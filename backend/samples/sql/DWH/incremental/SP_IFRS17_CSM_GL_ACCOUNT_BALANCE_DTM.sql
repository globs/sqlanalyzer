DROP PROCEDURE IFRS17_CSM_GL_ACCOUNT_BALANCE_DTM;
CREATE OR REPLACE PROCEDURE IFRS17_CSM_GL_ACCOUNT_BALANCE_DTM(VARCHAR(7),
VARCHAR(10),
VARCHAR(50),
VARCHAR(50),
SMALLINT,
VARCHAR(36),
VARCHAR(7),
SMALLINT,
VARCHAR(9)) RETURNS INTEGER
LANGUAGE nzplsql AS BEGIN_PROC
DECLARE 
P_CLOSING_QUARTER ALIAS FOR $1;
P_REAL_CLOSING_DATE ALIAS FOR $2;
P_DWH_SCHEMA ALIAS FOR $3;
P_BI_SCHEMA ALIAS FOR $4;
P_SCENARIO_ID ALIAS FOR $5;
P_ENTITY_ID ALIAS FOR $6;
P_NORM_CODE ALIAS FOR $7;
P_RUN_ID ALIAS FOR $8;
P_INTERVAL ALIAS FOR $9;


V_CLEAR_DATA_QUERY CHAR(64000);
V_QUERY CHAR(64000);
V_FILTER_SY CHAR(64000);


L_ERR_CD CHAR(5);
L_ERR_MSG CHAR(32000);


V_CURRENT_TS TIMESTAMP;



BEGIN

RAISE NOTICE 'Inserting accept data';


V_CLEAR_DATA_QUERY = 'DELETE FROM ' || P_DWH_SCHEMA || '.TCSM_GL_ACCOUNT_BALANCE_DTM  
						WHERE REPORTING_DT = VARCHAR_FORMAT(''' || P_REAL_CLOSING_DATE || ''' , ''DD/MM/YYYY'') 
							AND CLOSING_QUARTER_CODE = ''' || P_CLOSING_QUARTER || '''
							AND SCENARIO_ID   = ' || P_SCENARIO_ID || ' 
							AND ENTITY_ID =''' || P_ENTITY_ID || '''
							AND RUN_ID   = ' || P_RUN_ID || '
							AND NORM_CD  = ''' || P_NORM_CODE || ''' 
							AND ACCOUNT_PERIOD_UOM_CD =''' || P_INTERVAL || ''' ';


EXECUTE IMMEDIATE V_CLEAR_DATA_QUERY;


EXECUTE IMMEDIATE 'COMMIT;';

IF P_INTERVAL = 'SEMI-YEAR' 
	THEN V_FILTER_SY = 'AND (
 ' || '						(QUARTER(CLOSING_DATE)>2 AND QUARTER(PROJECTION_DATE)>2)
 ' || '						OR 
 ' || '						(QUARTER(CLOSING_DATE)<3 AND QUARTER(PROJECTION_DATE)<3)
 ' || '			)';
ELSE V_FILTER_SY = '';
END IF;


V_QUERY = 'INSERT INTO ' || P_DWH_SCHEMA || '.TCSM_GL_ACCOUNT_BALANCE_DTM
 ' || 'WITH QRATE AS (
 ' || '		SELECT QUOT.*,VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') REPORTING_DT
 ' || '		FROM ' || P_BI_SCHEMA || '.TBOCURQUOT2 QUOT
 ' || '		INNER JOIN (
 ' || '					SELECT SSD_CF||CUR_CF SSD_CUR,LAST_DAY(EXC_D +(3*QUARTER(EXC_D)-MONTH(EXC_D)) MONTH) REPORTING_DT
 ' || '							,MAX(EXC_D) EXC_D
 ' || '					FROM  ' || P_BI_SCHEMA || '.TBOCURQUOT2
 ' || '					WHERE EXC_CT=''C''
 ' || '					AND  YEAR(EXC_D) =  YEAR(''' || P_REAL_CLOSING_DATE || ''')
 ' || '					GROUP BY SSD_CF||CUR_CF,LAST_DAY(EXC_D +(3*QUARTER(EXC_D)-MONTH(EXC_D)) MONTH)) QRT
 ' || '			ON SSD_CF||CUR_CF = SSD_CUR
 ' || '			AND QUOT.EXC_D = QRT.EXC_D
 ' || '			AND EXC_CT=''C''
 ' || '		WHERE REPORTING_DT = ''' || P_REAL_CLOSING_DATE || ''')
 ' || ',TRT AS (
 ' || '		SELECT CTR_NF, SEC_NF, SECUWY_NF, ANNUAL_COHORT, PCPCUR_CF, SSD_CF, PROFIT_SIGN_FLG, INSURANCE_CONTRACT_GROUP_ID, ICG_FLAG
 ' || '			FROM ' || P_BI_SCHEMA || '.TCSM_TRT_CHARACS
 ' || '			WHERE REPORTING_DT = VARCHAR_FORMAT(''' || P_REAL_CLOSING_DATE || ''' , ''DD/MM/YYYY'') 
 ' || '				AND CLOSING_QUARTER_CODE = ''' || P_CLOSING_QUARTER || '''
 ' || '				AND SCENARIO_ID   = ' || P_SCENARIO_ID || ' 
 ' || '				AND ENTITY_ID =''' || P_ENTITY_ID || '''
 ' || '				AND INTERVAL =''' || P_INTERVAL || ''' 
 ' || '				AND RUN_ID   = ' || P_RUN_ID || '
 ' || '			GROUP BY CTR_NF, SEC_NF, SECUWY_NF, ANNUAL_COHORT, PCPCUR_CF, SSD_CF, PROFIT_SIGN_FLG, INSURANCE_CONTRACT_GROUP_ID, ICG_FLAG)
 ' || 'SELECT  ''' || P_CLOSING_QUARTER || ''' ,
 ' || '    ROW_NUMBER() OVER(ORDER BY INSURANCE_CONTRACT_GROUP_ID, CASHFLOW_DT) ROW_ID,
 ' || '    B.REPORTING_DT,
 ' || '    ' || P_SCENARIO_ID || ' SCENARIO_ID,
 ' || '    ''' || P_ENTITY_ID || ''' ENTITY_ID,
 ' || '    GL_ACCOUNT_ID,
 ' || '	CASE ''' || P_INTERVAL || '''  WHEN ''SEMI-YEAR'' THEN
 ' || '						 CASE WHEN  QUARTER(to_date(CASHFLOW_DT,''DD/MM/YYYY''))<3 THEN ''01/01/''
 ' || '									ELSE ''01/07/''
 ' || '								END 
 ' || '					WHEN ''YEAR'' THEN  ''01/01/''
 ' || '			END ||RIGHT(CASHFLOW_DT,4)  ACCOUNT_PERIOD_START_DT,
 ' || '	CASE ''' || P_INTERVAL || '''  WHEN ''SEMI-YEAR'' THEN
 ' || '						 CASE QUARTER(to_date(CASHFLOW_DT,''DD/MM/YYYY'')) 
 ' || '						 	WHEN  1 THEN ''31/03/''
 ' || '						 	WHEN  2 THEN ''30/06/''
 ' || '						 	WHEN  3 THEN ''30/09/''
 ' || '						 	WHEN  4 THEN ''31/12/''
 ' || '						END 
 ' || '					WHEN ''YEAR'' THEN  ''31/12/''
 ' || '			END ||RIGHT(CASHFLOW_DT,4)  ACCOUNT_PERIOD_END_DT,
 ' || '	INSURANCE_CONTRACT_GROUP_ID,
 ' || '    CASHFLOW_DT,
 ' || '    CEDED_FLG,
 ' || '    INCURRED_CLAIM_DT,
 ' || '    ''IF4'' REPORTING_METHOD_CD,
 ' || '	''' || P_INTERVAL || '''  AS ACCOUNT_PERIOD_UOM_CD,
 ' || '	PCPCUR_CF,
 ' || '    0 ACCOUNT_PERIOD_OPENING_BAL_AMT,
 ' || '    SUM((Q1.EXC_R/Q2.EXC_R)*ACCOUNT_PERIOD_CLOSING_BAL_AMT) ACCOUNT_PERIOD_CLOSING_BAL_AMT,
 ' || '    ''' || P_NORM_CODE || ''' NORM_CODE,
 ' || '	 ' || P_RUN_ID || ' AS RUN_ID,
 ' || '	TO_CHAR(SYSDATE, ''YYYYMMDD'') AS ASOFDAY,
 ' || '	NULL AOC_RULE_CD
 ' || 'FROM 
 ' || '	(SELECT 
 ' || '	    REPORTING_DT,
 ' || '	    GL_ACCOUNT_ID,
 ' || '	    INSURANCE_CONTRACT_GROUP_ID,
 ' || '	    CASHFLOW_DT,
 ' || '	    INCURRED_CLAIM_DT,
 ' || '		CURRENCY_CODE,
 ' || '		PCPCUR_CF,
 ' || '		SSD_CF,
 ' || '		CEDED_FLG,
 ' || '	    SUM(ACCOUNT_PERIOD_CLOSING_BAL_AMT) ACCOUNT_PERIOD_CLOSING_BAL_AMT
 ' || '	FROM
 ' || '	    (
 ' || '	    SELECT  
 ' || '			VARCHAR_FORMAT(CLOSING_DATE, ''DD/MM/YYYY'')  AS REPORTING_DT,
 ' || '			P.CODE AS GL_ACCOUNT_ID,
 ' || '			CASE WHEN ICG_FLAG=''Y'' AND ANNUAL_COHORT IS NOT NULL 
 ' || '				THEN CONTRACT_NUMBER || ''_'' || SECTION_NUMBER || ''_'' || ANNUAL_COHORT
 ' || '				ELSE TRT.INSURANCE_CONTRACT_GROUP_ID
 ' || '			END	 AS INSURANCE_CONTRACT_GROUP_ID,
 ' || '			VARCHAR_FORMAT(PROJECTION_DATE, ''DD/MM/YYYY'')  CASHFLOW_DT,
 ' || '			CASE
 ' || '			    WHEN  P.CODE IN (''LCL_CLAIMS_AMT'',''LCL_RSK_ADJ_AMT'',''LCL_PROVENUES_AMT'',''LCL_SETTL_COSTS_AMT''
 ' || '		                            ,''LCL_RE_DEF_AMT'',''LCL_CLAIMS_PLT_AMT'',''LCL_CLAIMS_LT_AMT'',''LCL_INVESTMENT_AMT'') 
 ' || '					THEN PR.PROJECTION_DATE
 ' || '				ELSE ''01/01/1960''
 ' || '			END AS INCURRED_CLAIM_DT,		
 ' || '			PR.CURRENCY_CODE ,PCPCUR_CF,SSD_CF,CEDED_FLG,
 ' || '			AMOUNT AS ACCOUNT_PERIOD_CLOSING_BAL_AMT,
 ' || '			AOC_RULE_CD,
 ' || '		    ROW_NUMBER() OVER(PARTITION BY CONTRACT_NUMBER, SECTION_NUMBER, PR.POLICY_UW_YEAR, PR.UNDERWRITING_YEAR, CLOSING_DATE, PR.CURRENCY_CODE
 ' || '		    					, PR.POSITION_ID, PROJECTION_DATE , ASSUMED_CONTRACT_NUMBER, ASSUMED_SECTION_NUMBER ,BUSINESS_MATURITY_ID,SPLIT_TYPE_ID
 ' || '		    					ORDER BY LOA.SORT_ORDER DESC ) RN
 ' || '		FROM ' || P_BI_SCHEMA || '.PROJECTION_FACT PR
 ' || '		    INNER JOIN (
 ' || '			        SELECT
 ' || '			            CASE WHEN nvl(MATH_OPERATOR,'''')=''''  THEN MP.POSITION_ID
 ' || '			                ELSE P.ID
 ' || '			            END POSITION_ID,
 ' || '			            ID, POSITION_TYPE_ID, CODE,CSM_POSITION_TYPE_ID
 ' || '			        FROM ' || P_BI_SCHEMA || '.POSITION_MAPPING MP
 ' || '			        INNER JOIN ' || P_BI_SCHEMA || '.POSITION P 
 ' || '			        	ON MP.MAPPING_POSITION_ID = P.ID
 ' || '			            AND P.IS_CSM
 ' || '			            AND P.CSM_POSITION_TYPE_ID = 3
 ' || '			            AND P.VALID_TO = ''9999-12-31''
 ' || '			            AND MP.VALID_TO = ''9999-12-31'') P 
 ' || '		        ON PR.POSITION_ID = P.POSITION_ID
 ' || '		INNER JOIN ' || P_BI_SCHEMA || '.LEVEL_OF_ANALYSIS LOA
 ' || '			ON LOA.ID=PR.LEVEL_OF_ANALYSIS_ID
 ' || '			AND LOA.LOC_CODE_CSM <> ''''
 ' || '			AND LOA.VALID_TO = ''9999-12-31''
 ' || '		INNER JOIN TRT ON 
 ' || ' 		PR.CONTRACT_NUMBER = TRT.CTR_NF 
 ' || ' 		AND PR.SECTION_NUMBER = TRT.SEC_NF 
 ' || ' 		AND 
 ' || ' 			CASE
 ' || '					WHEN TRT.ICG_FLAG = ''Y'' THEN PR.POLICY_UW_YEAR = TRT.SECUWY_NF
 ' || '					ELSE 1=1
 ' || '				END
 ' || '		INNER JOIN  (SELECT CTR_NF,''N'' CEDED_FLG  FROM ' || P_BI_SCHEMA || '.TUWCTR GROUP BY CTR_NF
 ' || '			UNION
 ' || '			SELECT RETCTR_NF, ''Y'' CEDED_FLG  FROM ' || P_BI_SCHEMA || '.TUWRETRO GROUP BY RETCTR_NF
 ' || '			) CTR
 ' || '		ON CTR.CTR_NF= CONTRACT_NUMBER 
 ' || '		WHERE PR.VALID_TO =''9999-12-31'' 
 ' || '			AND PR.SUPP_DATE=''9999-12-31'' 
 ' || '			AND CLOSING_DATE= ''' || P_REAL_CLOSING_DATE || '''
 ' || '			AND (YEAR(CLOSING_DATE) = YEAR(PROJECTION_DATE)
 ' || '					AND (QUARTER(PROJECTION_DATE)<=QUARTER(CLOSING_DATE)
 ' || '							' || V_FILTER_SY || '
 ' || '						)
 ' || '					)
 ' || '			)
 ' || '	WHERE RN = 1
 ' || '	GROUP BY 
 ' || '	    REPORTING_DT,
 ' || '	    GL_ACCOUNT_ID,
 ' || '		INSURANCE_CONTRACT_GROUP_ID,
 ' || '	    CASHFLOW_DT,
 ' || '	    INCURRED_CLAIM_DT,
 ' || '		CURRENCY_CODE,
 ' || '		PCPCUR_CF,
 ' || '		SSD_CF,
 ' || '		CEDED_FLG
 ' || '	    HAVING SUM(ACCOUNT_PERIOD_CLOSING_BAL_AMT)<>0
 ' || '		)B
 ' || 'LEFT JOIN QRATE  Q1
 ' || '		ON (Q1.SSD_CF = B.SSD_CF 
 ' || '		AND Q1.CUR_CF = CURRENCY_CODE
 ' || '		AND Q1.EXC_CT = ''C''
 ' || '		AND Q1.REPORTING_DT =B.REPORTING_DT)
 ' || 'LEFT JOIN QRATE  Q2
 ' || '		ON (Q2.SSD_CF = B.SSD_CF 
 ' || '		AND Q2.CUR_CF = PCPCUR_CF
 ' || '		AND Q2.EXC_CT = ''C''
 ' || '		AND Q2.REPORTING_DT =B.REPORTING_DT)
 ' || 'GROUP BY B.REPORTING_DT,
 ' || '	GL_ACCOUNT_ID,
 ' || '	INSURANCE_CONTRACT_GROUP_ID,
 ' || '	CASHFLOW_DT,
 ' || '	CEDED_FLG,
 ' || '	INCURRED_CLAIM_DT,
 ' || '	PCPCUR_CF';

EXECUTE IMMEDIATE V_QUERY;


EXECUTE IMMEDIATE 'COMMIT;';


EXCEPTION
WHEN OTHERS THEN L_ERR_CD := substr(SQLERRM,8,5);


L_ERR_MSG := SQLERRM;


RAISE EXCEPTION '% Error while executing SQL statement',
L_ERR_MSG;


RETURN L_ERR_CD;

END;


END_PROC;