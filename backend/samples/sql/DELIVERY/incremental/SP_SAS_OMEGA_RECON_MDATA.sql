CREATE OR REPLACE PROCEDURE SP_SAS_OMEGA_RECON_METADATA () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE VAR_BATCH_ID INT ;
VAR_DATA_VALIDATION_CONTROL_ID INT ;
VAR_DATA_VALIDATION_CONTROL_MAPPING_ID INT ;

L_ERR_CD CHAR(5);
L_ERR_MSG VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

SELECT BATCH_ID INTO VAR_BATCH_ID FROM BATCH WHERE BATCH_NAME = 'SAS to DIP Run';

SET VAR_DATA_VALIDATION_CONTROL_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO DATA_VALIDATION_CONTROL (DATA_VALIDATION_CONTROL_ID, CONTROL_NAME, CONTROL_PROCESSING, SPECIFIC_PROCESS) 
	VALUES(VAR_DATA_VALIDATION_CONTROL_ID, 'SAS AE Results Amounts', 'api-dip:sasAEAmountTrace', NULL);


SET VAR_DATA_VALIDATION_CONTROL_MAPPING_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO DATA_VALIDATION_CONTROL_MAPPING (DATA_VALIDATION_CONTROL_MAPPING_ID, BATCH_ID, JOB_GROUP_ID, JOB_ID, STEP_ID
, DATA_VALIDATION_CONTROL_ID, IS_ACTIVE, CONTROL_TYPE, CONTROL_CHRONOLOGY, CONTROL_SEQUENCE, PARAMETER_NAMES) 
	VALUES(VAR_DATA_VALIDATION_CONTROL_MAPPING_ID, VAR_BATCH_ID, NULL, NULL, NULL
	, VAR_DATA_VALIDATION_CONTROL_ID, TRUE, 'INFO', 'PRE-POST', 1, NULL);




SELECT BATCH_ID INTO VAR_BATCH_ID FROM BATCH WHERE BATCH_NAME = 'DIP to Omega Run (SAS Results)';

SET VAR_DATA_VALIDATION_CONTROL_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO DATA_VALIDATION_CONTROL (DATA_VALIDATION_CONTROL_ID, CONTROL_NAME, CONTROL_PROCESSING, SPECIFIC_PROCESS) 
	VALUES(VAR_DATA_VALIDATION_CONTROL_ID, 'Omega AE Results Amounts', 'api-dip:omegaAEAmountTrace', NULL);


SET VAR_DATA_VALIDATION_CONTROL_MAPPING_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO DATA_VALIDATION_CONTROL_MAPPING (DATA_VALIDATION_CONTROL_MAPPING_ID, BATCH_ID, JOB_GROUP_ID, JOB_ID, STEP_ID
, DATA_VALIDATION_CONTROL_ID, IS_ACTIVE, CONTROL_TYPE, CONTROL_CHRONOLOGY, CONTROL_SEQUENCE, PARAMETER_NAMES) 
	VALUES(VAR_DATA_VALIDATION_CONTROL_MAPPING_ID, VAR_BATCH_ID, NULL, NULL, NULL
	, VAR_DATA_VALIDATION_CONTROL_ID, TRUE, 'INFO', 'PRE-POST', 1, NULL);

COMMIT;

EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;