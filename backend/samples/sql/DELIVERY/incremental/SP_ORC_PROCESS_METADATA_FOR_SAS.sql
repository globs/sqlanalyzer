CREATE OR REPLACE PROCEDURE SP_ORCHESTRATION_PROCESS_METADATA_FOR_SAS () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE VAR_ORCHESTRATION_PROCESS_ID INT ;
VAR_ORCHESTRATION_PROCESS_STEP_ID_01 INT ;
VAR_ORCHESTRATION_PROCESS_STEP_ID_02 INT ;
VAR_BATCH_GROUPING_ID INT ;
VAR_BATCH_GROUPING1_ID INT ;
VAR_BATCH_ID INT;
VAR_JOB_GROUP_ID_01 INT;
VAR_JOB_GROUP_ID_02 INT;
VAR_JOB_ID_01 INT ;
VAR_JOB_ID_02 INT ;
VAR_JOB_ID_03 INT ;
VAR_JOB_ID_04 INT ;
VAR_JOB_ID_05 INT ;
VAR_JOB_ID_06 INT ;
VAR_STEP_01 INT;
VAR_STEP_02 INT;
VAR_STEP_03 INT;
VAR_STEP_04 INT;
L_ERR_CD				CHAR(5);
L_ERR_MSG				VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;


SET VAR_ORCHESTRATION_PROCESS_ID  = NEXT VALUE FOR SEQUENCE_ORCHESTRATION_PROCESS_METADATA;
SET VAR_ORCHESTRATION_PROCESS_STEP_ID_01  = NEXT VALUE FOR SEQUENCE_ORCHESTRATION_PROCESS_METADATA;
SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_03  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_04  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_05  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_06  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO ORCHESTRATION_PROCESS (ORCHESTRATION_PROCESS_ID,ORCHESTRATION_PROCESS_NAME,ORCHESTRATION_PROCESS_DESCRIPTION,INSTANCE_TYPE) VALUES
(VAR_ORCHESTRATION_PROCESS_ID,'Orchestration Process for DIP to SAS to DIP data flow','Orchestration Process for DIP to SAS to DIP data flow', null);

INSERT INTO ORCHESTRATION_PROCESS_STEP (ORCHESTRATION_PROCESS_STEP_ID,ORCHESTRATION_PROCESS_ID,ORCHESTRATION_PROCESS_STEP_NAME,CHILD_BATCH_ID,TRIGGER_DEPENDENT_STEPS, STARTING_STEP, OPTIONAL_RUN) VALUES
(VAR_ORCHESTRATION_PROCESS_STEP_ID_01, VAR_ORCHESTRATION_PROCESS_ID,'Orchestration Process Step for DIP to SAS',VAR_BATCH_ID,NULL, true, false);


INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING) VALUES
(VAR_BATCH_ID, 'DIP to SAS Run', 'DIP to SAS Run', 'DIP', 1, NULL, NULL, 'api-dip:dipToSasServiceFile');

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID) VALUES
(VAR_JOB_GROUP_ID_01,'Extract TRT and Quotes Data for SAS Run Job Group',VAR_BATCH_ID,NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID) VALUES
(VAR_JOB_GROUP_ID_02, 'Extract CF, RA, CU, RT Data for SAS Run Job Group',VAR_BATCH_ID, VAR_JOB_GROUP_ID_01);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_01, 'Extract Assumed Treaty Char. for SAS', NULL, VAR_JOB_GROUP_ID_01, NULL, NULL, NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_02, 'Extract Quotes for SAS', NULL, VAR_JOB_GROUP_ID_01, NULL, NULL, NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_03, 'Extract Cashflows for SAS', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL
		, 'CLOSING_TYPE=' || chr(36) || '{CF_CLOSING_TYPE};CLOSING_DATE=' || chr(36) || '{CF_CLOSING_DATE};SCENARIO_TYPE=' || chr(36) || '{CF_SCENARIO_TYPE};RUN_TYPE=' || chr(36) || '{CF_RUN_TYPE};CLOSING_PERIOD=' || chr(36) || '{CF_CLOSING_PERIOD};');

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_04, 'Extract Coverage Unit/Risk drivers for SAS', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL, NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_05, 'Extract RA Factors for SAS', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL, NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, JOB_PARAMS)
        VALUES ( VAR_JOB_ID_06, 'Extract Retro Linkage for SAS', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL, NULL);

SET VAR_STEP_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_03  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_01, 'Assumed Treaty Datamart - Procedeure call', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, NULL, NULL, chr(36) || '{DWH_DB}.IFRS17_CSM_TRT_CHARARCS(''' || chr(36) || '{CLOSING_PERIOD}'', ''' || chr(36) || '{CLOSING_DATE}'',''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')', NULL, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_01, 'Assumed Treaty - Data extraction', 2, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') AS REPORTING_DT, SCENARIO_ID, ENTITY_ID_GRP, ENTITY_ID_PAR, ENTITY_ID_LOC, LEGALENTITY_CF, LEGALENTITY_LL, PARTLEGENTITY_CF, PARTLEGENTITY_LL, LEBRANCH_CF, LEBRANCH_LL, PARTLEBRANCH_CF, PARTLEBRANCH_LL, PRDSIT_CF, SSD_CF, SSD_LS, ESB_CF, ESB_LS, CTR_NF, CTRPCPNAM_LL, SEC_NF, SECLAB_LM, UOA_CUR, TRT_CUR, PCPCUR_CF, SSDCUR_CF, UOA_GRP, UOA_PAR, UOA_LOC, PROFIT_SIGN_GRP, PROFIT_SIGN_PAR, PROFIT_SIGN_LOC, PROFIT_SIGN_FLG, PROFIT_LVL_GRP, PROFIT_LVL_PAR, PROFIT_LVL_LOC, SEG_PAR_CF, SEG_PAR_LS, SEG_LOC_CF, SEG_LOC_LS, SEG_GRP_CF, SEG_GRP_LS, LOB_CF, LOB_HS, LIFPRDLIN_CF, LIFPRDLIN_LL, LIFLOB_CF, LIFLOB_LL, USGAAP_CT, USGAAP_CT_LB, BUSUNIT_CF, BUSUNIT_LM, MRKUNT_NT, MRKUNT_LS, SUBMRK_NT, SUBMRK_LS, CR_NF, CR_LM, ANNUAL_COHORT, FRSSECUWY_NF, CTRUWY_NF, SECUWY_NF, CTRINC_D, SECINC_D, CTRFRSINC_D, SECFRSINC_D, CTRFRSPAYM_D, SECFRSPAYM_D, FRSPRICONER_D, TERM_D, CANCTR_D, SECCAN_D, CTRNEW_CT, RETFLG_CF, INTOPEFL_CF, TERMPERM_CF, NEWORMODIF_CF, MODTYP_CF, SECSTS_CT, SECSTS_LS, ACCADMTYP_CT, SECACCSTS_CT, SECACCSTS_LS, NAT_CF, NAT_GD, ACCFRQ_CT, LIFTRTTYP_CF, LIFTRTTYP_LS, RETROTYP_CF, RETRO_RA_LO_CF, RENTYP_CT, CTROLDNBR_LM, PARSEC_NF, ESTCRB_CT, INSURANCE_CONTRACT_GROUP_ID, GRPRATEINDEX_CT, PARRATEINDEX_CT, LOCRATEINDEX_CT, COV_RTO, COC_RTO FROM ' || chr(36) || '{DWH_DB}."V_CSM_TRT_CHARACS" a WHERE a.REPORTING_DT = ''' || chr(36) || '{CLOSING_DATE}'' AND a.CLOSING_QUARTER_CODE = ''' || chr(36) || '{CLOSING_PERIOD}'' ORDER BY ROW_ID', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_TRT_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_03, 4, VAR_JOB_ID_01, 'Assumed Treaty - SFTP file to SAS', 3, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_03, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_TRT_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');


SET VAR_STEP_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_03  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_02, 'Quotes Datamart - Procedeure call', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, NULL, NULL, chr(36) || '{DWH_DB}.IFRS17_CSM_QUOTES(''' || chr(36) || '{CLOSING_PERIOD}'', ''' || chr(36) || '{CLOSING_DATE}'',''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')', NULL, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_02, 'Quotes - Data extraction', 2, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, SCENARIO_ID, QUOTE_DT, QUOTE_ID, MATURITY_DT, QUOTE_RT, RISK_FACTOR_CATEGORY_CD, ENTITY_CD, CURRENCY_CD, RATEINDEX_CT, RUN_ID, ASOFDAY FROM ' || chr(36) || '{DWH_DB}."V_CSM_QUOTES" a WHERE a.REPORTING_DT = ''' || chr(36) || '{CLOSING_DATE}'' AND a.CLOSING_QUARTER_CODE = ''' || chr(36) || '{CLOSING_PERIOD}'' ORDER BY ROW_ID', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_QT_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_03, 4, VAR_JOB_ID_02, 'Quotes - SFTP file to SAS', 3, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_03, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_QT_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_03 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE, IS_ACTIVE, PRE_STEP_PROCESSING, STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_03, 'Cashflow Datamart - Procedeure call', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, NULL, NULL, chr(36) || '{DWH_DB}.IFRS17_CSM_PROJECTED_CASHFLOW(''' || chr(36) || '{CF_CLOSING_PERIOD}'', ''' || chr(36) || '{CF_CLOSING_DATE}'',''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')', NULL, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE, IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_03, 'Cashflow - Data extraction', 2, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') AS REPORTING_DT, SCENARIO_ID, ENTITY_ID, INSURANCE_CONTRACT_GROUP_ID, CASHFLOW_LEG_NM, CEDED_FLG, CASHFLOW_TYPE_CD, CURRENCY_CD, INCURRED_CLAIM_DT, CASHFLOW_DT, CASHFLOW_AMT, NORM_CD, DATA_TYPE FROM ' || chr(36) || '{DWH_DB}."V_CSM_PROJECTED_CASHFLOW" WHERE REPORTING_DT = ''' || chr(36) || '{CF_CLOSING_DATE}'' AND CLOSING_QUARTER_CODE = ''' || chr(36) || '{CF_CLOSING_PERIOD}'' ORDER BY ROW_ID', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_CF_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE, IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_03, 4, VAR_JOB_ID_03, 'Cashflow - SFTP file to SAS', 3, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_03, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_CF_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');




SET VAR_STEP_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_03  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_04, 'Coverage Unit/Risk drivers Datamart - Procedeure call', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, NULL, NULL, chr(36) || '{DWH_DB}.IFRS17_CSM_IR_DRIVER(''' || chr(36) || '{CLOSING_PERIOD}'', ''' || chr(36) || '{CLOSING_DATE}'',''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')', NULL, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_04, 'Coverage Unit/Risk drivers - Data extraction', 2, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') AS REPORTING_DT, SCENARIO_ID , ENTITY_ID, INSURANCE_CONTRACT_GROUP_ID, RISK_DRIVER_NM, CEDED_FLG, CURRENCY_CD, PROJECTION_DT, RISK_DRIVER_AMT, NORM_CD FROM ' || chr(36) || '{DWH_DB}."V_CSM_IR_DRIVER" a WHERE a.REPORTING_DT = ''' || chr(36) || '{CLOSING_DATE}'' AND a.CLOSING_QUARTER_CODE = ''' || chr(36) || '{CLOSING_PERIOD}'' ORDER BY ROW_ID', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_CU_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_03, 4, VAR_JOB_ID_04, 'Coverage Unit/Risk drivers - SFTP file to SAS', 3, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_03, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_CU_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');


SET VAR_STEP_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_03  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_05, 'RA Factors Datamart - Procedeure call', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, NULL, NULL, chr(36) || '{DWH_DB}.IFRS17_CSM_RISK_FACTORS(''' || chr(36) || '{CLOSING_PERIOD}'', ''' || chr(36) || '{CLOSING_DATE}'',''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')', NULL, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_05, 'RA Factors - Data extraction', 2, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') AS REPORTING_DT, SCENARIO_ID, ENTITY_ID, INSURANCE_CONTRACT_GROUP_ID, CASHFLOW_LEG_NM, CASHFLOW_TYPE_CD, CASHFLOW_DT, RISK_FACTOR_RT, NORM_CD, DATA_TYPE FROM ' || chr(36) || '{DWH_DB}."V_CSM_RA_RISK_FACTORS" a WHERE a.REPORTING_DT = ''' || chr(36) || '{CLOSING_DATE}'' AND a.CLOSING_QUARTER_CODE = ''' || chr(36) || '{CLOSING_PERIOD}'' ORDER BY ROW_ID', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_RA_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_03, 4, VAR_JOB_ID_05, 'RA Factors - SFTP file to SAS', 3, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_03, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_RA_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');


SET VAR_STEP_01  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_06, 'Retro - Data extraction', 1, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, '~', true, 'SELECT ROW_NUMBER() OVER() AS ROW_ID, VARCHAR_FORMAT(REPORTING_DT, ''DD/MM/YYYY'') AS REPORTING_DT, SCENARIO_ID, ENTITY_ID, INSURANCE_CONTRACT_GROUP_ID, REL_INSURANCE_CONTRACT_GROUP_ID, ASSOCIATION_CD, WEIGHT_PCT, REINS_FIXED_RECOVER_PCT, NORM_CODE AS NORM_CD, DATA_TYPE, RUN_ID FROM ' || chr(36) || '{DWH_DB}."TCSM_RETROLINKAGE" a WHERE a.REPORTING_DT = ''' || chr(36) || '{CLOSING_DATE}'' ORDER BY ROW_ID LIMIT 1', 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_RL_' || chr(36) || '{DIP_RUN_ID}.txt', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_06, 'Retro - SFTP file to SAS', 2, NULL, NULL, 'sftp:sas-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, NULL, NULL, NULL, 'csm/out'
		, chr(36) || '{E}_SAS_RUNJ0001_' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SCENARIO_TYPE}_' || chr(36) || '{SAS_ENTITY_STD}_' || chr(36) || '{CLOSING_DATE_YYYYMMDD}_RL_' || chr(36) || '{DIP_RUN_ID}.txt', 'ARCHIVE');
		

SELECT BATCH_GROUPING_ID INTO VAR_BATCH_GROUPING_ID FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'DIP to SAS PROCESSING';

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
        VALUES ( 'EVT_DIP_TO_SAS_DATA', 'Event TO EXTRACT DIP to SAS data' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
        VALUES ( 'EVT_DIP_TO_SAS_DATA', VAR_BATCH_ID, VAR_ORCHESTRATION_PROCESS_STEP_ID_01, VAR_ORCHESTRATION_PROCESS_ID, VAR_BATCH_GROUPING_ID, TRUE);

INSERT INTO EXECUTION_KEY_VALUE_METADATA ("GROUP", "KEY", VALUE)
	VALUES('SERVICE_FILE_NAMES', 'EVT_DIP_TO_SAS_DATA' , chr(36) || '{E}_INREQECH01_DIP_' || chr(36) || '{DATE_YYYYMMDD}_' || chr(36) || '{DIP_RUN_ID}_SERVICE.json');

INSERT INTO EXECUTION_KEY_VALUE_METADATA ("GROUP", "KEY", VALUE)
	VALUES('SYSTEM', 'EVT_DIP_TO_SAS_DATA', 'sas');


SET VAR_ORCHESTRATION_PROCESS_STEP_ID_02 = NEXT VALUE FOR SEQUENCE_ORCHESTRATION_PROCESS_METADATA;
SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_03 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_04 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO ORCHESTRATION_PROCESS_STEP (ORCHESTRATION_PROCESS_STEP_ID,ORCHESTRATION_PROCESS_ID,ORCHESTRATION_PROCESS_STEP_NAME,CHILD_BATCH_ID,TRIGGER_DEPENDENT_STEPS, STARTING_STEP, OPTIONAL_RUN) VALUES
(VAR_ORCHESTRATION_PROCESS_STEP_ID_02, VAR_ORCHESTRATION_PROCESS_ID,'Orchestration Process Step for SAS to DIP', VAR_BATCH_ID, NULL, false, false);

INSERT INTO ORCHESTRATION_PROCESS_STEP_DEPENDENCY(ORCHESTRATION_PROCESS_STEP_ID, PARENT_ORCHESTRATION_PROCESS_STEP_ID)
VALUES (VAR_ORCHESTRATION_PROCESS_STEP_ID_02, VAR_ORCHESTRATION_PROCESS_STEP_ID_01);

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING) VALUES
	(VAR_BATCH_ID,'SAS to DIP Run','SAS extract DIP','DIP', 1, NULL, NULL, 'api-dip:postSasResultsProcessing');

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID) VALUES
	(VAR_JOB_GROUP_ID_01, 'Extract Data from SAS Job Group', VAR_BATCH_ID, NULL);

	
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE)
        VALUES ( VAR_JOB_ID_01, 'Truncate AE Staging Table', NULL, VAR_JOB_GROUP_ID_01, NULL, NULL, NULL);
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE)
        VALUES ( VAR_JOB_ID_02, 'Extract AE from SAS to DIP', NULL, VAR_JOB_GROUP_ID_01, NULL, NULL, 'MULTI');
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE)
        VALUES ( VAR_JOB_ID_03, 'Truncate Profitability Staging Table', NULL, VAR_JOB_GROUP_ID_01, NULL, TRUE, NULL );
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE)
        VALUES ( VAR_JOB_ID_04, 'Extract Profitability from SAS to DIP', NULL, VAR_JOB_GROUP_ID_01, NULL, TRUE, 'MULTI');

INSERT INTO JOB_DEPENDENCY (JOB_ID, PARENT_JOB_ID)
		VALUES(VAR_JOB_ID_02, VAR_JOB_ID_01);
INSERT INTO JOB_DEPENDENCY (JOB_ID, PARENT_JOB_ID)
		VALUES(VAR_JOB_ID_04, VAR_JOB_ID_03);

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 2, VAR_JOB_ID_01, 'Truncate AE Staging Table', 1, NULL, NULL, NULL, NULL);
INSERT INTO STAGING_LOAD_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER
, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN)
		VALUES(VAR_STEP_01, 'STAGING_' || chr(36) || '{ENV}', 'TCSM_MICRO_AOC', true, NULL, NULL, NULL
		, NULL, false, NULL, NULL, false, NULL, NULL);

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;


INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 1, VAR_JOB_ID_02, 'AE Data fetch step', 1, NULL, NULL, 'sftp:sas-from', NULL);
INSERT INTO DATA_FETCH_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, FILE_DIRECTORY, FILE_NAME_PATTERN, REGIONAL_DATA, FETCH_TYPE
, FEEDER_SYSTEM_DB_SERVER, FEEDER_DB_NAME, FEEDER_SCHEMA_NAME, FEEDER_TABLE_NAME, SPECIFIC_PROCESS, FEEDER_FILE_DIRECTORY, FEEDER_FILE_NAME_PATTERN)
	VALUES(VAR_STEP_01, NULL, NULL, 'csm/in'
	, chr(36) || '{E}_ESIJ0790_AE_' || chr(36) || '{SSD_AE}_' || chr(36) || '{ESB_AE}_CSMENGINE_' || chr(36) || '{TIMESTAMP}.dat'
	, false, 'FILE_FETCH', NULL, NULL, NULL, NULL, NULL, '/csm/out'
	, chr(36) || '{E}_ESIJ0790_AE_' || chr(36) || '{SSD_AE}_' || chr(36) || '{ESB_AE}_CSMENGINE_' || chr(36) || '{TIMESTAMP}.dat');


INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 2, VAR_JOB_ID_02, 'AE Stagging load step', 2, NULL, NULL, 'binary-dip:dbload-file', NULL);
INSERT INTO STAGING_LOAD_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER
, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN)
		VALUES(VAR_STEP_02, 'STAGING_' || chr(36) || '{ENV}', 'TCSM_MICRO_AOC', false, true, NULL, '~'
		, NULL, false, 'FILLER', 'ARCHIVE', false, 'csm/in'
		, chr(36) || '{E}_ESIJ0790_AE_' || chr(36) || '{SSD_AE}_' || chr(36) || '{ESB_AE}_CSMENGINE_' || chr(36) || '{TIMESTAMP}.dat');


SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 2, VAR_JOB_ID_03, 'Truncate Profitability Staging Table', 1, NULL, NULL, NULL, NULL);
INSERT INTO STAGING_LOAD_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER
, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN)
		VALUES(VAR_STEP_01, 'STAGING_' || chr(36) || '{ENV}', 'TCSM_PROFITABILITY', true, NULL, NULL, NULL
		, NULL, false, NULL, NULL, false, NULL, NULL);

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 1, VAR_JOB_ID_04, 'PROFITABILITY Data fetch step ', 1, NULL, NULL, 'sftp:sas-from', NULL);
INSERT INTO DATA_FETCH_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, FILE_DIRECTORY, FILE_NAME_PATTERN, REGIONAL_DATA, FETCH_TYPE
, FEEDER_SYSTEM_DB_SERVER, FEEDER_DB_NAME, FEEDER_SCHEMA_NAME, FEEDER_TABLE_NAME, SPECIFIC_PROCESS, FEEDER_FILE_DIRECTORY, FEEDER_FILE_NAME_PATTERN)
	VALUES(VAR_STEP_01, NULL, NULL, 'csm/in'
	, chr(36) || '{E}_ESFD3860_PA' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SSD_PF}_' || chr(36) || '{ESB_PF}_' || chr(36) || '{TIMESTAMP}_CSMENGINE.dat'
	, false, 'FILE_FETCH', NULL, NULL, NULL, NULL, NULL, '/csm/out'
	, chr(36) || '{E}_ESFD3860_PA' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SSD_PF}_' || chr(36) || '{ESB_PF}_' || chr(36) || '{TIMESTAMP}_CSMENGINE.dat');


INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 2, VAR_JOB_ID_04, 'PROFITABILITY Stagging load step', 2, NULL, NULL, 'binary-dip:dbload-file', NULL);
INSERT INTO STAGING_LOAD_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER
, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN)
		VALUES(VAR_STEP_02, 'STAGING_' || chr(36) || '{ENV}', 'TCSM_PROFITABILITY', false, true, NULL, '~'
		, NULL, false, NULL, 'ARCHIVE', false, 'csm/in'
		, chr(36) || '{E}_ESFD3860_PA' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SSD_PF}_' || chr(36) || '{ESB_PF}_' || chr(36) || '{TIMESTAMP}_CSMENGINE.dat');


SELECT BATCH_GROUPING_ID INTO VAR_BATCH_GROUPING1_ID FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'SAS to DIP PROCESSING';

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
        VALUES ( 'EVT_SAS_TO_DIP_RESULTS', 'Event TO EXTRACT SAS to DIP data' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
        VALUES ( 'EVT_SAS_TO_DIP_RESULTS', VAR_BATCH_ID, VAR_ORCHESTRATION_PROCESS_STEP_ID_02, NULL, VAR_BATCH_GROUPING1_ID, TRUE);

SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_03 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID_04 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING) VALUES
	(VAR_BATCH_ID,'DIP to Omega Run (SAS Results)','DIP to Omega Run (SAS Results)','DIP', 1, NULL, NULL, NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID) VALUES
	(VAR_JOB_GROUP_ID_02, 'Provide SAS Data to Omega Job Group', VAR_BATCH_ID, NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE, EXECUTION_TYPE)
        VALUES ( VAR_JOB_ID_02, 'Process AE in DIP', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL, NULL, NULL);
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE, EXECUTION_TYPE)
        VALUES ( VAR_JOB_ID_03, 'Provide AE from DIP to Omega', NULL, VAR_JOB_GROUP_ID_02, NULL, NULL, 'MULTI', 'PARALLEL' );
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN, INSTANCE_TYPE, EXECUTION_TYPE)
        VALUES ( VAR_JOB_ID_04, 'Provide Profitability from DIP to Omega', NULL, VAR_JOB_GROUP_ID_02, NULL, TRUE, 'MULTI', 'PARALLEL' );

INSERT INTO JOB_DEPENDENCY (JOB_ID, PARENT_JOB_ID)
		VALUES(VAR_JOB_ID_03, VAR_JOB_ID_02);

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 2, VAR_JOB_ID_02, 'AE Stagging Process step', 1, NULL, NULL, 'db-dip:sp-explicit', NULL);
INSERT INTO STAGING_LOAD_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER
, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN)
		VALUES(VAR_STEP_01, NULL, NULL, false, false, NULL, NULL, NULL, false
		, 'STAGING_' || chr(36) || '{ENV}.SP_LOAD_TCSM_MACRO_AOC_TO_OMEGA(''' || chr(36) || '{CLOSING_PERIOD}'', ''' || chr(36) || '{AS_OF_DATE}'', ''STAGING_' || chr(36) || '{ENV}'', ''' || chr(36) || '{DWH_DB}'',''BI_' || chr(36) || '{ENV}'')'
		, NULL, false, NULL, NULL);

SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_03, 'AE - Data extraction', 1, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, '~', FALSE
		, 'SELECT SSD_CF, ESB_CF,  NUMLINE_NT, BALSHEY_NF, BALSHRMTH_NF, BALSHRDAY_NF, VALPERY_NF, VALPERMTH_NF, TRNCOD_CF, RETAUTGEN_B, CTR_NF, END_NT, SEC_NF, UWY_NF, UW_NT, OCCYEA_NF, ACY_NF, SCOSTRMTH_NF, SCOENDMTH_NF, CLM_NF, CUR_CF, AMT_M, RETCTR_NF, RETEND_NT, RETSEC_NF, RTY_NF, RETUW_NT, PLC_NT, RETOCCYEA_NF, RETACY_NF, RETSCOSTRMTH_NF, RETSCOENDMTH_NF, RCL_NF, RETCUR_CF,RETAMT_M, COMMAC_LL, SPEENTTYP_CF, SPEENTNAT_CT, EVT_NT, REVT_NT FROM STAGING_' || chr(36) || '{ENV}.TCSM_MACRO_AOC_TO_OMEGA WHERE SSD_CF = ''' || chr(36) || '{SSD_AE}'' and ESB_CF = ''' || chr(36) || '{ESB_AE}'' ORDER BY NUMLINE_NT'
		, 'omega/out'
		, chr(36) || '{E}_ESIJ0790_AE_' || chr(36) || '{SSD_AE}_' || chr(36) || '{ESB_AE}_CSMENGINE_' || chr(36) || '{TIMESTAMP_HHMMSS}.dat', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_03, 'AE - SFTP file to Omega', 2, NULL, NULL, 'sftp:omega-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, NULL, NULL, NULL, 'omega/out'
		, chr(36) || '{E}_ESIJ0790_AE_' || chr(36) || '{SSD_AE}_' || chr(36) || '{ESB_AE}_CSMENGINE_' || chr(36) || '{TIMESTAMP_HHMMSS}.dat', 'ARCHIVE');


SET VAR_STEP_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_02 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_01, 4, VAR_JOB_ID_04, 'PFT - Data extraction', 1, NULL, NULL, 'binary-dip:dbsql-query-explicit', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_01, NULL, NULL, '~', FALSE
		, 'SELECT * FROM STAGING_' || chr(36) || '{ENV}.TCSM_PROFITABILITY WHERE SSD_CF = ''' || chr(36) || '{SSD_PF}'' and ESB_CF = ''' || chr(36) || '{ESB_PF}'' ORDER BY NUMLINE_NT', 'omega/out'
		, chr(36) || '{E}_ESFD3860_PA' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SSD_PF}_' || chr(36) || '{ESB_PF}_' || chr(36) || '{TIMESTAMP_HHMMSS}_CSMENGINE.dat', NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_02, 4, VAR_JOB_ID_04, 'PFT - SFTP file to Omega', 2, NULL, NULL, 'sftp:omega-to', NULL);
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
		VALUES(VAR_STEP_02, NULL, NULL, NULL, NULL, NULL, 'omega/out'
		, chr(36) || '{E}_ESFD3860_PA' || chr(36) || '{CLOSING_TYPE}_' || chr(36) || '{SSD_PF}_' || chr(36) || '{ESB_PF}_' || chr(36) || '{TIMESTAMP_HHMMSS}_CSMENGINE.dat', 'ARCHIVE');
		

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
        VALUES ( 'EVT_DIP_TO_OMEGA_RUN_FOR_SAS_RESULTS', 'Event to Extract SAS Results from DIP for Omega' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
        VALUES ( 'EVT_DIP_TO_OMEGA_RUN_FOR_SAS_RESULTS', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING1_ID, FALSE);

EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;