CREATE OR REPLACE PROCEDURE SP_BATCH_METADATA_FOR_YIELD_CURVE () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE VAR_BATCH_GROUPING_ID INT ;
VAR_BATCH_ID INT;
VAR_JOB_GROUP_ID INT;
VAR_JOB_ID INT;
VAR_JOB_ID_CHILD INT;
VAR_STEP_ID INT;
VAR_DATA_VALIDATION_CONTROL_ID INT;
VAR_DATA_VALIDATION_CONTROL_MAPPING_ID INT;
L_ERR_CD CHAR(5);
L_ERR_MSG VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING)
	VALUES (VAR_BATCH_ID,'YC (Eris) to DIP Data flow','YC (Eris) to DIP Data flow','DIP', 1,NULL,NULL,NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID)
	VALUES (VAR_JOB_GROUP_ID,'YC (Eris) to DIP Data flow Job Group',VAR_BATCH_ID,NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID, 'YC (Eris) to DIP Data flow Job', NULL, VAR_JOB_GROUP_ID, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_ID, 3, VAR_JOB_ID, 'YC (Eris) to DIP Staging Load Step', 1, NULL, 'api-dip:uploadinsertycms', 'api-diptalend:eris_yc_processing', 'api-dip:ycmsPostProcessing');
 
INSERT INTO DWH_LOAD_STEP ( STEP_ID, DWH_SCHEMA_NAME, DWH_TABLE_NAME, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, INGESTION_MODE, HISTORIZATION_TYPE, SPECIFIC_PROCESS ) 
        VALUES (VAR_STEP_ID, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
		
SELECT DATA_VALIDATION_CONTROL_ID INTO VAR_DATA_VALIDATION_CONTROL_ID FROM DATA_VALIDATION_CONTROL WHERE CONTROL_NAME = 'Verify MD5 Hash Control';

IF VAR_DATA_VALIDATION_CONTROL_ID IS NULL THEN 
	SET VAR_DATA_VALIDATION_CONTROL_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

	INSERT INTO DATA_VALIDATION_CONTROL (DATA_VALIDATION_CONTROL_ID, CONTROL_NAME, CONTROL_PROCESSING, SPECIFIC_PROCESS) 
		VALUES(VAR_DATA_VALIDATION_CONTROL_ID, 'Verify MD5 Hash Control', 'api-dip:verifyMd5Hash', NULL);
END IF;


SET VAR_DATA_VALIDATION_CONTROL_MAPPING_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO DATA_VALIDATION_CONTROL_MAPPING (DATA_VALIDATION_CONTROL_MAPPING_ID, BATCH_ID, JOB_GROUP_ID, JOB_ID, STEP_ID
, DATA_VALIDATION_CONTROL_ID, IS_ACTIVE, CONTROL_TYPE, CONTROL_CHRONOLOGY, CONTROL_SEQUENCE, PARAMETER_NAMES) 
	VALUES(VAR_DATA_VALIDATION_CONTROL_MAPPING_ID, VAR_BATCH_ID, NULL, NULL, NULL
	, VAR_DATA_VALIDATION_CONTROL_ID, TRUE, 'INFO', 'PRE-PRE', 1, NULL);


SET VAR_JOB_ID_CHILD = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
 
INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID_CHILD, 'Post YCMS FFX Process', NULL, VAR_JOB_GROUP_ID, NULL, NULL);

INSERT INTO JOB_DEPENDENCY (JOB_ID, PARENT_JOB_ID)
		VALUES(VAR_JOB_ID_CHILD, VAR_JOB_ID);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP_ID, 3, VAR_JOB_ID_CHILD, 'Talend call for FFX Process Post YCMS', 1, NULL, 'api-dip:uploadinsert','api-diptalend:mu_ffx_processing',NULL);

INSERT INTO DWH_LOAD_STEP ( STEP_ID, DWH_SCHEMA_NAME, DWH_TABLE_NAME, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, INGESTION_MODE, HISTORIZATION_TYPE, SPECIFIC_PROCESS ) 
        VALUES ( VAR_STEP_ID, NULL, NULL, NULL, NULL, NULL, NULL, NULL );

SELECT BATCH_GROUPING_ID INTO VAR_BATCH_GROUPING_ID FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'YIELD CURVE PROCESSING';

IF VAR_BATCH_GROUPING_ID IS NULL THEN 
	SET VAR_BATCH_GROUPING_ID = NEXT VALUE FOR SEQUENCE_BATCH_GROUPING;

	INSERT INTO BATCH_GROUPING (BATCH_GROUPING_ID, BATCH_GROUPING_NAME, ACTIVE_DWH, PASSIVE_DWH, LAST_UPDATE_TIME)
		VALUES(VAR_BATCH_GROUPING_ID, 'YIELD CURVE PROCESSING', 'DWHD2_' || chr(36) || '{ENV}', 'DWHD1_' || chr(36) || '{ENV}', CURRENT_TIMESTAMP);

END IF;

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
	VALUES ( 'EVT_INGEST_YIELD_CURVE', 'Event for Yield Curve to DIP Data flow' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
	VALUES ( 'EVT_INGEST_YIELD_CURVE', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING_ID, FALSE);


EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;