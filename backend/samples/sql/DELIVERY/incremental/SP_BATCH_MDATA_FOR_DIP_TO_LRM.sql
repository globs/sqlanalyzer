CREATE OR REPLACE PROCEDURE SP_BATCH_METADATA_FOR_DIP_TO_LRM () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE VAR_BATCH_GROUPING_ID INT ;
VAR_BATCH_ID INT;
VAR_JOB_GROUP_ID INT;
VAR_JOB_ID INT;
VAR_STEP INT;
L_ERR_CD CHAR(5);
L_ERR_MSG VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING)
	VALUES (VAR_BATCH_ID,'DIP to LRM Data flow', 'DIP to LRM Data flow', 'DIP', 1,NULL,NULL,NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID)
	VALUES (VAR_JOB_GROUP_ID,'DIP to LRM Data flow Job Group',VAR_BATCH_ID,NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID, 'DIP to LRM Data flow Job', NULL, VAR_JOB_GROUP_ID, NULL, NULL);

SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 4, VAR_JOB_ID, 'DIP to LRM Talend Job trigger', 1, NULL, NULL, 'api-diptalend:dip_lrm_processing', 'api-dip:lrmDataFileName');
		
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
	VALUES(VAR_STEP, NULL, NULL, NULL, NULL, NULL, 'ilias/out', 'CcmIFRS17ProjectionExport' || chr(36) || '{TIMESTAMP}.h5', NULL);

SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 4, VAR_JOB_ID, 'DIP to LRM Data flow', 2, NULL, NULL,'azcopy:ilias-to',NULL);
		
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
	VALUES(VAR_STEP, NULL, NULL, NULL, NULL, NULL, 'ilias/out', 'CcmIFRS17ProjectionExport' || chr(36) || '{TIMESTAMP}.h5', 'ARCHIVE');

SET VAR_BATCH_GROUPING_ID = NEXT VALUE FOR SEQUENCE_BATCH_GROUPING;

INSERT INTO BATCH_GROUPING (BATCH_GROUPING_ID, BATCH_GROUPING_NAME, ACTIVE_DWH, PASSIVE_DWH, LAST_UPDATE_TIME)
		VALUES(VAR_BATCH_GROUPING_ID, 'DIP LRM PROCESSING', 'DWHD2_' || chr(36) || '{ENV}', 'DWHD1_' || chr(36) || '{ENV}', CURRENT_TIMESTAMP);

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
	VALUES ( 'EVT_DIP_TO_LRM', 'Event for LRM to DIP flow' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
	VALUES ( 'EVT_DIP_TO_LRM', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING_ID, FALSE);


EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;