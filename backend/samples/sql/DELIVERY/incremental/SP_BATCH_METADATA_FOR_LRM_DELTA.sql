CREATE OR REPLACE PROCEDURE SP_BATCH_METADATA_FOR_LRM_DELTA () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE 
VAR_JOB_GROUP_ID INT;
VAR_JOB_ID INT;
VAR_JOB_ID_01 INT;
VAR_STEP INT;
VAR_BATCH_GROUPING_ID_01 INT;
VAR_BATCH_GROUPING_ID_02 INT;
VAR_BATCH_GROUPING_ID_03 INT;
L_ERR_CD CHAR(5);
L_ERR_MSG VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

SELECT JOB_ID INTO VAR_JOB_ID FROM JOB WHERE JOB_NAME = 'LRM to DIP Data flow for RAP job';

SET VAR_JOB_ID_01 = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO JOB_DEPENDENCY (JOB_ID, PARENT_JOB_ID) VALUES(VAR_JOB_ID_01, VAR_JOB_ID);
 
INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP, 2, VAR_JOB_ID, 'LRM to DIP RA Staging Load Step ', 2, NULL, 'api-dip:lrmcontrolinsert','api-diptalend:lrm_ra_processing',NULL);
 
INSERT INTO STAGING_LOAD_STEP ( STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, TRUNCATE_STAGING_TABLE, MANDATORY_FILE, FILE_HEADER_ROWS, DELIMITER, CONVERTED_STAGING_TABLE_NAME, CHECK_DUPLICATES, SPECIFIC_PROCESS, DATA_FILE_TREATMENT, REGIONAL_DATA, FILE_DIRECTORY, FILE_NAME_PATTERN ) 
        VALUES ( VAR_STEP, 'STAGING_${ENV}', '', 0, 0, 0, '~', NULL, 0, NULL, NULL, 0, NULL, NULL );
		

SELECT JOB_GROUP_ID INTO VAR_JOB_GROUP_ID FROM JOB_GROUP WHERE JOB_GROUP_NAME = 'LRM to DIP Data flow for RAP Job Group';

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
        VALUES ( VAR_JOB_ID_01, 'Allocation Process Post LRM to DIP RA', NULL, VAR_JOB_GROUP_ID, NULL, NULL);


SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP, 3, VAR_JOB_ID_01, 'Talend call for Allocation Process Frame2 Post LRM to DIP RA', 1, NULL, 'api-dip:lrmframeids', 'api-diptalend:lrm_ra_allocation_frame2_processing', NULL);
 
INSERT INTO DWH_LOAD_STEP ( STEP_ID, DWH_SCHEMA_NAME, DWH_TABLE_NAME, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, INGESTION_MODE, HISTORIZATION_TYPE, SPECIFIC_PROCESS ) 
        VALUES ( VAR_STEP, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
		
SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP, 3, VAR_JOB_ID_01, 'Talend call for Allocation Process Frame1 Post LRM to DIP RA', 2, NULL, NULL, 'api-diptalend:lrm_ra_allocation_frame1_processing', NULL);
 
INSERT INTO DWH_LOAD_STEP ( STEP_ID, DWH_SCHEMA_NAME, DWH_TABLE_NAME, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, INGESTION_MODE, HISTORIZATION_TYPE, SPECIFIC_PROCESS ) 
        VALUES ( VAR_STEP, NULL, NULL, NULL, NULL, NULL, NULL, NULL );


SET VAR_BATCH_GROUPING_ID_01 = NEXT VALUE FOR SEQUENCE_BATCH_GROUPING;
SET VAR_BATCH_GROUPING_ID_02 = NEXT VALUE FOR SEQUENCE_BATCH_GROUPING;
SET VAR_BATCH_GROUPING_ID_03 = NEXT VALUE FOR SEQUENCE_BATCH_GROUPING;

DELETE FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'LRM PROCESSING';
DELETE FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'LRM RA PROCESSING';
DELETE FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'LRM CoC PROCESSING';
DELETE FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'DIP LRM PROCESSING';

INSERT INTO BATCH_GROUPING (BATCH_GROUPING_ID, BATCH_GROUPING_NAME, ACTIVE_DWH, PASSIVE_DWH, LAST_UPDATE_TIME)
		VALUES(VAR_BATCH_GROUPING_ID_01, 'LRM RA PROCESSING', 'DWHD2_' || chr(36) || '{ENV}', 'DWHD1_' || chr(36) || '{ENV}', CURRENT_TIMESTAMP);
		
INSERT INTO BATCH_GROUPING (BATCH_GROUPING_ID, BATCH_GROUPING_NAME, ACTIVE_DWH, PASSIVE_DWH, LAST_UPDATE_TIME)
		VALUES(VAR_BATCH_GROUPING_ID_02, 'LRM CoC PROCESSING', 'DWHD2_' || chr(36) || '{ENV}', 'DWHD1_' || chr(36) || '{ENV}', CURRENT_TIMESTAMP);	

INSERT INTO BATCH_GROUPING (BATCH_GROUPING_ID, BATCH_GROUPING_NAME, ACTIVE_DWH, PASSIVE_DWH, LAST_UPDATE_TIME)
		VALUES(VAR_BATCH_GROUPING_ID_03, 'DIP LRM PROCESSING', 'DWHD2_' || chr(36) || '{ENV}', 'DWHD1_' || chr(36) || '{ENV}', CURRENT_TIMESTAMP);

UPDATE EVENT_MAPPING SET BATCH_GROUPING_ID = VAR_BATCH_GROUPING_ID_01 WHERE EVENT_CODE = 'EVT_RAP_LRM_TO_DIP';
UPDATE EVENT_MAPPING SET BATCH_GROUPING_ID = VAR_BATCH_GROUPING_ID_02 WHERE EVENT_CODE = 'EVT_LRM_TO_DIP';
UPDATE EVENT_MAPPING SET BATCH_GROUPING_ID = VAR_BATCH_GROUPING_ID_03 WHERE EVENT_CODE = 'EVT_DIP_TO_LRM';

EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;