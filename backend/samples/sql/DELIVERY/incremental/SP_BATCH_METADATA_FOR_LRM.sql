CREATE OR REPLACE PROCEDURE SP_BATCH_METADATA_FOR_LRM () RETURNS INTEGER
   LANGUAGE nzplsql AS BEGIN_PROC

DECLARE VAR_BATCH_GROUPING_ID INT ;
VAR_BATCH_ID INT;
VAR_JOB_GROUP_ID INT;
VAR_JOB_ID INT;
VAR_STEP INT;
VAR_BUSINESS_EVENT_ID_01 INT ;
VAR_BUSINESS_EVENT_ID_02 INT ;
VAR_BUSINESS_EVENT_ID_03 INT ;
VAR_BUSINESS_PROCESS_ID INT ;
VAR_BUSINESS_PROCESS_STEP_ID_01 INT ; 
VAR_BUSINESS_PROCESS_STEP_ID_02 INT ; 
VAR_BUSINESS_PROCESS_STEP_ID_03 INT ; 
L_ERR_CD CHAR(5);
L_ERR_MSG VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

SET VAR_BUSINESS_EVENT_ID_01 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_EVENT_ID_02 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_EVENT_ID_03 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_PROCESS_ID = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_PROCESS_STEP_ID_01 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_PROCESS_STEP_ID_02 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;
SET VAR_BUSINESS_PROCESS_STEP_ID_03 = NEXT VALUE FOR SEQUENCE_BUSINESS_CALENDAR_METADATA;

INSERT INTO BUSINESS_EVENT (BUSINESS_EVENT_ID, EVENT_CODE, CLOSING_TYPE_CODE, SCENARIO_TYPE, RUN_TYPE, IS_ACTIVE, TRIGGER_MODE, DELAY_DAYS)
	VALUES(VAR_BUSINESS_EVENT_ID_01, 'EVT_RAP_LRM_TO_DIP', 'I17G', 'CLOSING', 'POSTING', true, 'External System Triggered', NULL);

INSERT INTO BUSINESS_EVENT (BUSINESS_EVENT_ID, EVENT_CODE, CLOSING_TYPE_CODE, SCENARIO_TYPE, RUN_TYPE, IS_ACTIVE, TRIGGER_MODE, DELAY_DAYS)
	VALUES(VAR_BUSINESS_EVENT_ID_02, 'EVT_DIP_TO_LRM', 'I17G', 'CLOSING', 'POSTING', true, 'External System Triggered', NULL);

INSERT INTO BUSINESS_EVENT (BUSINESS_EVENT_ID, EVENT_CODE, CLOSING_TYPE_CODE, SCENARIO_TYPE, RUN_TYPE, IS_ACTIVE, TRIGGER_MODE, DELAY_DAYS)
	VALUES(VAR_BUSINESS_EVENT_ID_03, 'EVT_LRM_TO_DIP', 'I17G', 'CLOSING', 'POSTING', true, 'External System Triggered', NULL);

INSERT INTO BUSINESS_PROCESS (BUSINESS_PROCESS_ID, BUSINESS_PROCESS_NAME, CLOSING_TYPE_CODE, SCENARIO_TYPE, RUN_TYPE)
	VALUES(VAR_BUSINESS_PROCESS_ID, 'Business Process for LRM to DIP to LRM', 'I17G', 'CLOSING', 'POSTING');

INSERT INTO BUSINESS_PROCESS_STEP (BUSINESS_PROCESS_STEP_ID, BUSINESS_PROCESS_STEP_NAME, BUSINESS_PROCESS_ID, STEP_SEQUENCE)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_01, 'LRM to DIP Data Flow for RAP', VAR_BUSINESS_PROCESS_ID, 1);
	
INSERT INTO BUSINESS_PROCESS_STEP (BUSINESS_PROCESS_STEP_ID, BUSINESS_PROCESS_STEP_NAME, BUSINESS_PROCESS_ID, STEP_SEQUENCE)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_02, 'DIP to LRM Data Flow', VAR_BUSINESS_PROCESS_ID, 2);

INSERT INTO BUSINESS_PROCESS_STEP (BUSINESS_PROCESS_STEP_ID, BUSINESS_PROCESS_STEP_NAME, BUSINESS_PROCESS_ID, STEP_SEQUENCE)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_03, 'LRM to DIP Data Flow', VAR_BUSINESS_PROCESS_ID, 3);

INSERT INTO BUSINESS_PROCESS_STEP_EVENT_MAPPING (BUSINESS_PROCESS_STEP_ID, BUSINESS_EVENT_ID)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_01, VAR_BUSINESS_EVENT_ID_01);

INSERT INTO BUSINESS_PROCESS_STEP_EVENT_MAPPING (BUSINESS_PROCESS_STEP_ID, BUSINESS_EVENT_ID)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_02, VAR_BUSINESS_EVENT_ID_02);

INSERT INTO BUSINESS_PROCESS_STEP_EVENT_MAPPING (BUSINESS_PROCESS_STEP_ID, BUSINESS_EVENT_ID)
	VALUES(VAR_BUSINESS_PROCESS_STEP_ID_03, VAR_BUSINESS_EVENT_ID_03);

SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING)
	VALUES (VAR_BATCH_ID,'LRM to DIP Data flow for RAP','LRM to DIP Data flow for RAP','DIP', 1,NULL,NULL,NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID)
	VALUES (VAR_JOB_GROUP_ID,'LRM to DIP Data flow for RAP Job Group',VAR_BATCH_ID,NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID, 'LRM to DIP Data flow for RAP job', NULL, VAR_JOB_GROUP_ID, NULL, NULL );

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 1, VAR_JOB_ID, 'LRM Data Fetch Step for RAP', 1, NULL, NULL,'azcopy:ilias-from',NULL);
		
INSERT INTO DATA_FETCH_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, FILE_DIRECTORY, FILE_NAME_PATTERN, REGIONAL_DATA, FETCH_TYPE
, FEEDER_SYSTEM_DB_SERVER, FEEDER_DB_NAME, FEEDER_SCHEMA_NAME, FEEDER_TABLE_NAME, SPECIFIC_PROCESS, FEEDER_FILE_DIRECTORY, FEEDER_FILE_NAME_PATTERN)
	VALUES(VAR_STEP, NULL, NULL, 'ilias/in', 'LRM_DIP_RAP_' || chr(36) || '{TIMESTAMP}.h5', false, 'FILE_FETCH'
	, NULL, NULL, NULL, NULL, NULL, NULL, 'LRM_DIP_RAP_' || chr(36) || '{TIMESTAMP}.h5');

SELECT BATCH_GROUPING_ID INTO VAR_BATCH_GROUPING_ID FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'LRM PROCESSING';

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
	VALUES ( 'EVT_RAP_LRM_TO_DIP', 'Event for LRM to DIP flow for RAP' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
	VALUES ( 'EVT_RAP_LRM_TO_DIP', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING_ID, FALSE);


SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING)
	VALUES (VAR_BATCH_ID,'DIP to LRM Data flow','DIP to LRM Data flow','DIP', 1,NULL,NULL,NULL);

INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID)
	VALUES (VAR_JOB_GROUP_ID,'DIP to LRM Data flow Job Group',VAR_BATCH_ID,NULL);

INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID, 'DIP to LRM Data flow Job', NULL, VAR_JOB_GROUP_ID, NULL, NULL);

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 4, VAR_JOB_ID, 'DIP to LRM Talend Job trigger', 1, NULL, NULL, 'api-diptalend:dip_lrm_processing', 'api-dip:lrmDataFileName');
		
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
	VALUES(VAR_STEP, NULL, NULL, NULL, NULL, NULL, 'ilias/out', 'CcmIFRS17ProjectionExport' || chr(36) || '{TIMESTAMP}.h5', NULL);

SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 4, VAR_JOB_ID, 'DIP to LRM Data flow', 2, NULL, NULL,'azcopy:ilias-to',NULL);
		
INSERT INTO DATA_EXPOSITION_STEP (STEP_ID, SCHEMA_NAME, TABLE_NAME, DELIMITER, INCLUDE_HEADER, SPECIFIC_PROCESS, FILE_DIRECTORY, FILE_NAME_PATTERN, DATA_FILE_TREATMENT)
	VALUES(VAR_STEP, NULL, NULL, NULL, NULL, NULL, 'ilias/out', 'CcmIFRS17ProjectionExport' || chr(36) || '{TIMESTAMP}.h5', 'ARCHIVE');

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
	VALUES ( 'EVT_DIP_TO_LRM', 'Event for LRM to DIP flow' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
	VALUES ( 'EVT_DIP_TO_LRM', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING_ID, FALSE);

SET VAR_BATCH_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_GROUP_ID = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_JOB_ID  = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;
SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO BATCH (BATCH_ID,BATCH_NAME,BATCH_DESCRIPTION,APPLICATION_NAME,BATCH_PRIORITY,ON_ERROR,PRE_BATCH_PROCESSING,POST_BATCH_PROCESSING)
	VALUES (VAR_BATCH_ID,'LRM to DIP Data flow','LRM to DIP Data flow','DIP', 1,NULL,NULL,NULL);


INSERT INTO JOB_GROUP (JOB_GROUP_ID,JOB_GROUP_NAME,BATCH_ID,PARENT_JOB_GROUP_ID)
	VALUES (VAR_JOB_GROUP_ID,'LRM to DIP Data flow Job Group',VAR_BATCH_ID,NULL);


INSERT INTO JOB ( JOB_ID, JOB_NAME, JOB_PRIORITY, JOB_GROUP_ID, IS_ACTIVE, JOB_OPTIONAL_RUN )
	VALUES ( VAR_JOB_ID, 'LRM to DIP Data flow job', NULL, VAR_JOB_GROUP_ID, NULL, NULL );
 

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING,STEP_PROCESSING, POST_STEP_PROCESSING)
	VALUES ( VAR_STEP, 1, VAR_JOB_ID, 'LRM CoC Data Fetch Step', 1, NULL, NULL,'azcopy:ilias-from',NULL);
		
INSERT INTO DATA_FETCH_STEP (STEP_ID, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, FILE_DIRECTORY, FILE_NAME_PATTERN, REGIONAL_DATA, FETCH_TYPE
, FEEDER_SYSTEM_DB_SERVER, FEEDER_DB_NAME, FEEDER_SCHEMA_NAME, FEEDER_TABLE_NAME, SPECIFIC_PROCESS, FEEDER_FILE_DIRECTORY, FEEDER_FILE_NAME_PATTERN)
	VALUES(VAR_STEP, NULL, NULL, 'ilias/in', 'RDWH_LRM_' || chr(36) || '{LRM_MODE}_' || chr(36) || '{TIMESTAMP}.csv.gz', false, 'FILE_FETCH'
	, NULL, NULL, NULL, NULL, NULL, NULL, 'RDWH_LRM_' || chr(36) || '{LRM_MODE}_' || chr(36) || '{TIMESTAMP}.csv.gz');

SET VAR_STEP = NEXT VALUE FOR SEQUENCE_BATCH_METADATA;

INSERT INTO STEP ( STEP_ID, STEP_TYPE_ID, JOB_ID, STEP_NAME, STEP_SEQUENCE ,IS_ACTIVE, PRE_STEP_PROCESSING, STEP_PROCESSING, POST_STEP_PROCESSING)
        VALUES ( VAR_STEP, 3, VAR_JOB_ID, 'LRM CoC Data Processing Step', 2, NULL, 'api-dip:uploadinsert', 'api-diptalend:lrm_coc_processing', NULL);
INSERT INTO DWH_LOAD_STEP (STEP_ID, DWH_SCHEMA_NAME, DWH_TABLE_NAME, STAGING_SCHEMA_NAME, STAGING_TABLE_NAME, INGESTION_MODE, HISTORIZATION_TYPE
, SPECIFIC_PROCESS)
		VALUES(VAR_STEP, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

SELECT BATCH_GROUPING_ID INTO VAR_BATCH_GROUPING_ID FROM BATCH_GROUPING WHERE BATCH_GROUPING_NAME = 'LRM PROCESSING';

INSERT INTO EVENT ( EVENT_CODE, EVENT_DESCRIPTION )
	VALUES ( 'EVT_LRM_TO_DIP', 'Event for LRM to DIP flow' );

INSERT INTO EVENT_MAPPING ( EVENT_CODE, BATCH_ID, ORCHESTRATION_PROCESS_STEP_ID, ORCHESTRATION_PROCESS_ID, BATCH_GROUPING_ID, IS_DWH_SWITCH)
	VALUES ('EVT_LRM_TO_DIP', VAR_BATCH_ID, NULL, NULL, VAR_BATCH_GROUPING_ID, FALSE);

EXCEPTION WHEN OTHERS THEN 
	L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;