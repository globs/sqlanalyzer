SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_WRK_LRM_PROJECTIONS;

CREATE OR REPLACE PROCEDURE SP_LOAD_WRK_LRM_PROJECTIONS (BIGINT,CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64)) RETURNS INTEGER 
LANGUAGE nzplsql AS 
BEGIN_PROC 

DECLARE 
    P_REQUEST_ID            ALIAS FOR $1;
    P_SRC_SCHEMA            ALIAS FOR $2;
    P_SRC_TABLE             ALIAS FOR $3;
    P_TRG_SCHEMA            ALIAS FOR $4;
    P_TRG_TABLE             ALIAS FOR $5;
    L_ERR_CD                CHAR(5);
    L_ERR_MSG               VARCHAR(32000);
    V_REC                   RECORD;
    V_DELETE_QUERY          VARCHAR(32000);
    V_INSERT_QUERY          VARCHAR(32000);

BEGIN
SET ISOLATION TO UR;

V_DELETE_QUERY := 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE REQUEST_ID =' || P_REQUEST_ID || ' ';

V_INSERT_QUERY :=  'INSERT INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || '
(  
    CONTRACT_NUMBER             ,
    SECTION_NUMBER              ,
    POLICY_UWY                  ,
    REPORTING_BASIS_CODE        ,
    BUSINESS_MATURITY_CODE      ,
    CLOSING_DATE                ,
    ASSUMED_CONTRACT_NUMBER     ,
    ASSUMED_SECTION_NUMBER      ,
    CURRENCY_CODE               ,
    POSITION_CODE               ,
    SCENARIO_TYPE_CODE          ,
    SCENARIO_PARAMETER          ,
    LEVEL_OF_ANALYSIS_CODE      ,
    PERIOD_DESCRIPTION          ,
    PROJECTION_MONTH            ,
    PROJECTION_YEAR             ,
    AMOUNT                      ,
    CREATED_BY                  ,
    CREATED_DATE                ,
    LINE_NUMBER                 ,
    REQUEST_ID                  ,
    HISTORIZATION_MODE
)
SELECT
    TREATY_NUMBER,
    CAST(SECTION_NUMBER AS INTEGER)     AS SECTION_NUMBER,
    CASE WHEN LENGTH(POLICY_UNDERWRITING_YEAR) !=0 then CAST(POLICY_UNDERWRITING_YEAR AS integer) end AS POLICY_UWY,
    REPORTING_BASIS_CODE,
    BUSINESS_MATURITY_CODE,
    TO_DATE(CLOSING_DATE,''dd-mm-yyyy'')AS CLOSING_DATE,
    GROSS_ASSUMED_CONTRACT_NUMBER,
    CASE WHEN  LENGTH(GROSS_ASSUMED_SECTION_NUMBER)!=0 THEN CAST(GROSS_ASSUMED_SECTION_NUMBER AS integer) END as ASSUMED_SECTION_NUMBER,
    CURRENCY_CODE,
    CSM_CASHFLOW_LEGS_CODE              AS POSITION_CODE ,
    SCENARIO_TYPE_CODE,
    SCENARIO_PARAMETER,
    LEVEL_OF_ANALYSIS_CODE,
    PERIOD_ID                           AS PERIOD_DESCRIPTION,
    PERIOD                              AS PROJECTION_MONTH,
    YEAR                                AS PROJECTION_YEAR,
    CAST( VALUE AS DECFLOAT)            AS AMOUNT ,
    ''LRM''                             as CREATED_BY ,
    CURRENT_TIMESTAMP                   AS CREATED_DATE,
    CAST(LINE_NUMBER AS BIGINT)         AS LINE_NUMBER,
    ' || P_REQUEST_ID || '              AS REQUEST_ID,
    ''INCREMENTAL''                     AS HISTORIZATION_MODE
FROM  ' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || ' STG
';

RAISE NOTICE 'Executing V_DELETE_QUERY: ''%''',V_DELETE_QUERY; 
EXECUTE IMMEDIATE V_DELETE_QUERY; 

RAISE NOTICE 'Executing V_INSERT_QUERY: ''%''',V_INSERT_QUERY;
EXECUTE IMMEDIATE V_INSERT_QUERY;

EXCEPTION WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;