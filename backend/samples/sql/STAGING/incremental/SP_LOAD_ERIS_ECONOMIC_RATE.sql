SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_ERIS_ECONOMIC_RATE;

CREATE OR REPLACE PROCEDURE SP_LOAD_ERIS_ECONOMIC_RATE(
    BIGINT,
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64)
) 
RETURNS INTEGER
language nzplsql
AS
BEGIN_PROC

DECLARE
    P_REQUEST_ID   ALIAS FOR $1;
    P_SRC_SCHEMA   ALIAS FOR $2;
    P_SRC_TABLE       ALIAS FOR $3;
    P_TRG_SCHEMA   ALIAS FOR $4;
    P_TRG_TABLE       ALIAS FOR $5;
    V_INS_SQL      VARCHAR(ANY);
    L_ERR_CD       CHAR(5);
    L_ERR_MSG      VARCHAR(32000);

BEGIN    
SET ISOLATION TO UR;

V_INS_SQL := 'INSERT INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' (
    REPORTING_BASIS_ID,
    CLOSING_DATE, 
    ORIGIN_CLOSING_DATE,
    PARAMETER_TYPE_ID,
    SEGMENT_TYPE_ID, 
    SEGMENT_CODE,
    SUBSIDIARY_CODE,
    SUBLEDGER_CODE,
    LOB_CODE,
    DOMAIN_CODE,
    ECONOMIC_DATA_AS_OF_DATE,
    BASE_CURRENCY_CODE,
    CURRENCY_CODE,
    MATURITY_TYPE_ID, 
    MATURITY,
    USAGE_TYPE_ID,
    SCENARIO_TYPE_ID,
    RATE,
    DISCOUNT_FACTOR,
    DISCOUNT_FACTOR_PC_UND,
    DISCOUNT_FACTOR_MYCF,
    SOURCE_IDENTIFIER,
    REQUEST_ID
)
SELECT
    rb.ID AS REPORTING_BASIS_ID,
    CAST(TO_DATE(yc.CLOSING_DATE, ''DD/MM/YYYY'', ''YYYY-MM-YY'') AS DATE) AS CLOSING_DATE,
    CASE 
        WHEN
            TRIM(yc.ORIGIN_CLOSING_DATE) = ''''
        THEN
            NULL
        ELSE
            CAST(TO_DATE(yc.ORIGIN_CLOSING_DATE, ''DD/MM/YYYY'', ''YYYY-MM-YY'') AS DATE)
    END AS ORIGIN_CLOSING_DATE,
    pt.ID AS PARAMETER_TYPE_ID,
    (
        SELECT
            ID
        FROM
            BI_<env>.SEGMENT_TYPE
        WHERE
            CODE = ''ILL''
    ) AS SEGMENT_TYPE_ID,
    CASE 
        WHEN 
            TRIM(yc.SEGMENT_CODE) = '''' 
        THEN
            NULL 
        ELSE 
            yc.SEGMENT_CODE
    END AS SEGMENT_CODE,
    CASE 
        WHEN
            TRIM(yc.SUBSIDIARY_CODE) = ''''
        THEN
            NULL
        ELSE
            yc.SUBSIDIARY_CODE
    END AS SUBSIDIARY_CODE,
    CASE 
        WHEN
            TRIM(yc.SUBLEDGER_CODE) = ''''
        THEN
            NULL
        ELSE
            yc.SUBLEDGER_CODE
    END AS SUBLEDGER_CODE,
    CASE
        WHEN 
            UPPER(yc.CURVE_DIVISION) = ''LIFE'' 
        THEN 
            ''30''
        WHEN 
            UPPER(yc.CURVE_DIVISION) = ''P&C''
        THEN 
            NULL
        ELSE 
            NULL
    END AS LOB_CODE,
    NULL AS DOMAIN_CODE,
    TO_DATE(yc.ECONOMIC_DATA_AS_OF_DATE, ''DD/MM/YYYY'') AS ECONOMIC_DATA_AS_OF_DATE,
    NULL AS BASE_CURRENCY_CODE,
    yc.CURRENCY_CODE,
    mt.ID AS MATURITY_TYPE_ID,
    yc.MATURITY,
    ut.ID AS USAGE_TYPE_ID,
    st.ID AS SCENARIO_TYPE_ID,
    CAST(yc.RATE AS DECFLOAT) AS RATE,
    CASE 
        WHEN
            TRIM(yc.DISCOUNT_FACTOR) = ''''
        THEN
            NULL
        ELSE
            CAST(yc.DISCOUNT_FACTOR AS DECFLOAT) 
    END AS DISCOUNT_FACTOR,
    CASE 
        WHEN
            TRIM(yc.DISCOUNT_FACTOR_PC_UND) = ''''
        THEN
            NULL
        ELSE
            CAST(yc.DISCOUNT_FACTOR_PC_UND AS DECFLOAT)
    END AS DISCOUNT_FACTOR_PC_UND,
    CASE 
        WHEN
            TRIM(yc.DISCOUNT_FACTOR_PC_MYCF) = ''''
        THEN
            NULL
        ELSE
            CAST(yc.DISCOUNT_FACTOR_PC_MYCF AS DECFLOAT)
    END AS DISCOUNT_FACTOR_PC_MYCF,
    yc.SOURCE_IDENTIFIER,
    ' || P_REQUEST_ID || ' AS REQUEST_ID
FROM ' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || ' yc
INNER JOIN BI_<env>.REPORTING_BASIS rb ON yc.REPORTING_BASIS = rb.CODE
INNER JOIN BI_<env>.PARAMETER_TYPE pt ON yc.PARAMETER_TYPE = pt.CODE
INNER JOIN BI_<env>.MATURITY_TYPE mt ON yc.MATURITY_TYPE = LEFT(mt.CODE, 1)
INNER JOIN BI_<env>.USAGE_TYPE ut ON yc.USAGE_TYPE = ut.CODE
LEFT OUTER JOIN BI_<env>.SCENARIO_TYPE st    ON yc.USAGE_SCENARIO = st.CODE
';
        
EXECUTE IMMEDIATE 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE 1 = 1';

RAISE NOTICE 'Executing V_INS_SQL: ''%''', V_INS_SQL;

EXECUTE IMMEDIATE V_INS_SQL;
        
EXCEPTION WHEN OTHERS THEN
	L_ERR_CD := SUBSTR(SQLERRM,8,5); 
	L_ERR_MSG := SQLERRM;
	RAISE EXCEPTION '% Error while executing SQL statement',L_ERR_MSG;
	RETURN L_ERR_CD;

END;

END_PROC
;