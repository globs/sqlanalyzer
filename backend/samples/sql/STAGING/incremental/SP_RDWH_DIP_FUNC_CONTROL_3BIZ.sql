SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_DIP_FUNC_CONTROL_3BIZ;

CREATE OR REPLACE PROCEDURE SP_DIP_FUNC_CONTROL_3BIZ( 
    CHARACTER VARYING(20),
    CHARACTER VARYING(50),
    CHARACTER VARYING(100),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50)
) 
RETURNS INTEGER
LANGUAGE NZPLSQL 
AS BEGIN_PROC 

DECLARE 

    P_REQ_ID ALIAS FOR $1;
    P_SRC_REF_NAME ALIAS FOR $2;
    P_CLOSING_DATE ALIAS FOR $3;
    P_STG_SCHEMA ALIAS FOR $4;
    P_DLV_SCHEMA ALIAS FOR $5;
    P_WRK_TBL ALIAS FOR $6;
    P_DLV_TBL ALIAS FOR $7;
    P_ERR_TBL ALIAS FOR $8;
    V_REQ_ID VARCHAR(20);
    V_SRC_REF_NAME VARCHAR(20);
    V_CLOSING_DATE VARCHAR(20);
    V_INS_UPLOAD_ERR_LOG_TBL VARCHAR(ANY);
    V_CTRL3BIZ VARCHAR(1000);
    L_ERR_CD CHAR(5);
    L_ERR_MSG VARCHAR(32000);

BEGIN

V_REQ_ID := UPPER(TRIM(P_REQ_ID));
V_SRC_REF_NAME := UPPER(TRIM(P_SRC_REF_NAME));
V_CLOSING_DATE := UPPER(TRIM(P_CLOSING_DATE));
V_CTRL3BIZ := 'CTRL3BIZ_' || P_REQ_ID;

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_CTRL3BIZ || ' IF EXISTS';

EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_CTRL3BIZ || '(
	SENSITIVITY_TYPE    VARCHAR(100), 
	SENSITIVITY_VALUE   DECIMAL(10,6),
	LINE_NUMBER         BIGINT,
	REQUEST_ID          BIGINT
) ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';

EXECUTE IMMEDIATE 'INSERT INTO SESSION.' || V_CTRL3BIZ || '  
( 
   SENSITIVITY_TYPE,
   SENSITIVITY_VALUE,
   LINE_NUMBER,
   REQUEST_ID
)
SELECT
	UPPER(SENSITIVITY_TYPE) AS SENSITIVITY_TYPE ,
	SENSITIVITY_VALUE,
   LINE_NUMBER,
   REQUEST_ID
FROM ' || P_STG_SCHEMA || '.' || P_WRK_TBL || '
WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || '''
GROUP BY
	SENSITIVITY_TYPE ,
	SENSITIVITY_VALUE ,
	LINE_NUMBER ,
	REQUEST_ID 
';

V_INS_UPLOAD_ERR_LOG_TBL := 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || ' 
(   REQUEST_ID,
	ERROR_MESSAGE_ID,
	ERROR_ROW)
SELECT
	REQUEST_ID,
	ERR.ERROR_MESSAGE_ID,
	X.LINE_NUMBER
FROM 	(
	SELECT
		LINE_NUMBER ,
		REQUEST_ID ,
		CONTROL_3BIZ
	FROM 		(
		SELECT
			STG.LINE_NUMBER ,
			STG.REQUEST_ID ,
			CASE
				WHEN STG.SENSITIVITY_TYPE = ''BEST ESTIMATE''
				AND STG.SENSITIVITY_VALUE = 0 THEN ''OK''
				WHEN STG.SENSITIVITY_TYPE != ''BEST ESTIMATE''
				AND STG.SENSITIVITY_VALUE != 0
				AND STG.SENSITIVITY_VALUE BETWEEN -100 AND 100 THEN ''OK''
				ELSE ''SENSITIVITY VALUE IS INVALID REGARDING THE SENSITIVITY TYPE''
			END CONTROL_3BIZ
		FROM SESSION.' || V_CTRL3BIZ || ' STG )
	WHERE CONTROL_3BIZ != ''OK''
   )X
JOIN ' || P_DLV_SCHEMA || '.' || P_ERR_TBL || ' ERR ON 	X.CONTROL_3BIZ = UPPER(ERROR_MESSAGE_LABEL)';

RAISE NOTICE 'Executing 2nd SQL';
EXECUTE IMMEDIATE V_INS_UPLOAD_ERR_LOG_TBL;

EXCEPTION
    WHEN OTHERS THEN 
        L_ERR_CD := SUBSTR(SQLERRM, 8, 5);
        L_ERR_MSG := SQLERRM;
        RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG;
        RETURN L_ERR_CD;

END 

END_PROC;
