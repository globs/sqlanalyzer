SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_PROJECTION_ALLOCATION;

CREATE OR REPLACE PROCEDURE SP_LOAD_PROJECTION_ALLOCATION(
	BIGINT,
	BIGINT,
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	SMALLINT
) 
RETURNS INTEGER
language nzplsql
AS
BEGIN_PROC
 
DECLARE    
    P_REQUEST_ID           ALIAS FOR $1;
   	P_REQUEST_ID_2     	   ALIAS FOR $2;
    P_WRK_SCHEMA           ALIAS FOR $3;
    P_WRK_TABLE            ALIAS FOR $4;
    P_DWH_SCHEMA           ALIAS FOR $5;
    P_DWH_TABLE            ALIAS FOR $6;  
   	P_BI_SCHEMA            ALIAS FOR $7;
    P_BI_RD_TABLE          ALIAS FOR $8;
    P_BI_RA_TABLE          ALIAS FOR $9;
    P_BI_PROJECTION        ALIAS FOR $10;
    P_TYPE                 ALIAS FOR $11;
    L_ERR_CD               CHAR(5);          
    L_ERR_MSG              VARCHAR(32000);       
	V_INSERT_FRAME1	       VARCHAR(64000);
	V_INSERT_FRAME2	       VARCHAR(64000);
    V_INSERT_ALLO          VARCHAR(64000);
	V_DELETE_WRK           VARCHAR(64000);
	V_REQUEST_ID_FILTER	   VARCHAR(64000);
    V_JOIN_FILTER          VARCHAR(64000);
    
BEGIN
	SET ISOLATION TO UR;

	IF P_REQUEST_ID <> 0 THEN
		RAISE NOTICE 'Nominal Mode'; 
        V_REQUEST_ID_FILTER := 'AND ( PRJ.CREATED_REQUEST_ID = ' || P_REQUEST_ID || ')';
	ELSE
		V_REQUEST_ID_FILTER := '';
        RAISE NOTICE 'Init Mode'; 
	END IF;
    
    IF P_REQUEST_ID_2 is null THEN
        RAISE NOTICE 'MU Mode'; 
		V_JOIN_FILTER := '';
   	ELSE
	    RAISE NOTICE 'H5 Mode'; 
        V_JOIN_FILTER := 'UNION
	SELECT
		pral.CONTRACT_NUMBER,
		pral.SECTION_NUMBER,
		pral.ASSUMED_CONTRACT_NUMBER,
		pral.ASSUMED_SECTION_NUMBER,
		(
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Processed successfully at T/S level from aggregated level''
		) AS ALLOCATION_STATUS_ID,
		pral.REPORTING_BASIS_ID,
		pral.CLOSING_DATE,
		pral.LEVEL_OF_ANALYSIS_ID,
		' || P_REQUEST_ID_2 || ' AS REQUEST_ID
	FROM
		' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || ' pral
		JOIN
			DELIVERY_<env>.REFCODVAL rcv
			ON rcv.REFCODVAL_ID = pral.ALLOCATION_STATUS_ID
		JOIN
			(
				SELECT  
                    CONTRACT_NUMBER, 
                    SECTION_NUMBER, 
                    ASSUMED_CONTRACT_NUMBER,
                    ASSUMED_SECTION_NUMBER,
                    REPORTING_BASIS_ID,
                    CLOSING_DATE,
					LEVEL_OF_ANALYSIS_ID
                FROM  
					' || P_BI_SCHEMA || '.' || P_BI_RD_TABLE || '
                WHERE 
					DATE(VALID_TO) = ''9999-12-31''
					AND DATE(SUPP_DATE) = ''9999-12-31''
					AND CREATED_REQUEST_ID = ' || P_REQUEST_ID_2 || '
                GROUP BY 
					CONTRACT_NUMBER, 
					SECTION_NUMBER, 
					ASSUMED_CONTRACT_NUMBER, 
					ASSUMED_SECTION_NUMBER, 
					REPORTING_BASIS_ID,
					CLOSING_DATE,
					LEVEL_OF_ANALYSIS_ID
			) rdfc 
			ON rdfc.CONTRACT_NUMBER = pral.CONTRACT_NUMBER 
			AND rdfc.SECTION_NUMBER = pral.SECTION_NUMBER
            AND COALESCE(rdfc.ASSUMED_CONTRACT_NUMBER, ''XX'') = COALESCE(pral.ASSUMED_CONTRACT_NUMBER, ''XX'')
            AND COALESCE(rdfc.ASSUMED_SECTION_NUMBER, 0) = COALESCE(pral.ASSUMED_SECTION_NUMBER, 0)
            AND rdfc.REPORTING_BASIS_ID = pral.REPORTING_BASIS_ID
            AND rdfc.CLOSING_DATE = pral.CLOSING_DATE
			AND rdfc.LEVEL_OF_ANALYSIS_ID = pral.LEVEL_OF_ANALYSIS_ID
	WHERE
		DATE(pral.VALID_TO) = ''9999-12-31''
		AND DATE(pral.SUPP_DATE) = ''9999-12-31''
		AND  rcv.REFERENCE_CODE_VALUE = ''Processed successfully at aggregated level''';
	END IF;

	V_INSERT_FRAME1 := 'INSERT INTO ' || P_WRK_SCHEMA || '.' || P_WRK_TABLE || ' (
		CONTRACT_NUMBER,
		SECTION_NUMBER,
		ASSUMED_CONTRACT_NUMBER,
		ASSUMED_SECTION_NUMBER,
		ALLOCATION_STATUS_ID,
		REPORTING_BASIS_ID,
		CLOSING_DATE,
		LEVEL_OF_ANALYSIS_ID,
		REQUEST_ID
	)
	SELECT
		pa.CONTRACT_NUMBER,
		pa.SECTION_NUMBER,
		pa.ASSUMED_CONTRACT_NUMBER,
		pa.ASSUMED_SECTION_NUMBER,
		(
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Processed successfully at T/S level''
		) AS ALLOCATION_STATUS_ID,
		pa.REPORTING_BASIS_ID,
		pa.CLOSING_DATE,
		pa.LEVEL_OF_ANALYSIS_ID,
		' || P_REQUEST_ID || ' AS REQUEST_ID
	FROM
		' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || ' pa
		JOIN
			DELIVERY_<env>.REFCODVAL rcv
			ON rcv.REFCODVAL_ID = pa.ALLOCATION_STATUS_ID
		JOIN
			(
				SELECT  
                    CONTRACT_NUMBER, 
                    SECTION_NUMBER, 
                    ASSUMED_CONTRACT_NUMBER,
                    ASSUMED_SECTION_NUMBER,
                    REPORTING_BASIS_ID,
                    CLOSING_DATE,
					LEVEL_OF_ANALYSIS_ID
                FROM  
					' || P_BI_SCHEMA || '.' || P_BI_RD_TABLE || '
                WHERE 
					DATE(VALID_TO) = ''9999-12-31''
					AND DATE(SUPP_DATE) = ''9999-12-31''
					AND (CREATED_REQUEST_ID = ' || P_REQUEST_ID ||' OR MODIFIED_REQUEST_ID = ' || P_REQUEST_ID ||')
                GROUP BY 
					CONTRACT_NUMBER, 
					SECTION_NUMBER, 
					ASSUMED_CONTRACT_NUMBER, 
					ASSUMED_SECTION_NUMBER, 
					REPORTING_BASIS_ID,
					CLOSING_DATE,
					LEVEL_OF_ANALYSIS_ID
			) rd 
			ON rd.CONTRACT_NUMBER = pa.CONTRACT_NUMBER 
			AND rd.SECTION_NUMBER = pa.SECTION_NUMBER
            AND COALESCE(rd.ASSUMED_CONTRACT_NUMBER, ''XX'') = COALESCE(pa.ASSUMED_CONTRACT_NUMBER, ''XX'')
            AND COALESCE(rd.ASSUMED_SECTION_NUMBER, 0) = COALESCE(pa.ASSUMED_SECTION_NUMBER, 0)
            AND rd.REPORTING_BASIS_ID = pa.REPORTING_BASIS_ID
            AND rd.CLOSING_DATE = pa.CLOSING_DATE
			AND rd.LEVEL_OF_ANALYSIS_ID = pa.LEVEL_OF_ANALYSIS_ID
	WHERE
		DATE(pa.VALID_TO) = ''9999-12-31''
		AND DATE(pa.SUPP_DATE) = ''9999-12-31''
		AND (
			rcv.REFERENCE_CODE_VALUE = ''Not allocated''
			OR rcv.REFERENCE_CODE_VALUE = ''Processed successfully at aggregated level''
			OR rcv.REFERENCE_CODE_VALUE = ''Processed successfully at T/S level from aggregated level''
		)
	UNION
	SELECT 
		rdf.CONTRACT_NUMBER,
		rdf.SECTION_NUMBER,
		CASE 
			WHEN TRIM(ASSUMED_CONTRACT_NUMBER) = '''' THEN NULL 
			ELSE ASSUMED_CONTRACT_NUMBER 
		END AS ASSUMED_CONTRACT_NUMBER,
		CASE 
			WHEN TRIM(ASSUMED_SECTION_NUMBER) = '''' THEN NULL 
			ELSE ASSUMED_SECTION_NUMBER 
		END AS ASSUMED_SECTION_NUMBER,
		(
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Rejected on T/S level''
		) AS ALLOCATION_STATUS_ID,
		rdf.REPORTING_BASIS_ID,
		rdf.CLOSING_DATE,
		rdf.LEVEL_OF_ANALYSIS_ID,
		' || P_REQUEST_ID || ' AS REQUEST_ID
	FROM 
		' || P_BI_SCHEMA || '.' || P_BI_RD_TABLE || ' rdf
	WHERE NOT EXISTS (
				SELECT 1
				FROM 
					' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || ' pal
				WHERE rdf.CONTRACT_NUMBER = pal.CONTRACT_NUMBER
				AND	rdf.SECTION_NUMBER = pal.SECTION_NUMBER
				AND COALESCE(rdf.ASSUMED_CONTRACT_NUMBER, ''XX'') = COALESCE(pal.ASSUMED_CONTRACT_NUMBER, ''XX'')
				AND COALESCE(rdf.ASSUMED_SECTION_NUMBER, 0) = COALESCE(pal.ASSUMED_SECTION_NUMBER, 0)
				AND	rdf.REPORTING_BASIS_ID = pal.REPORTING_BASIS_ID
				AND	rdf.CLOSING_DATE = pal.CLOSING_DATE
				AND	rdf.LEVEL_OF_ANALYSIS_ID = pal.LEVEL_OF_ANALYSIS_ID
				AND DATE(pal.VALID_TO) = ''9999-12-31''
				AND DATE(pal.SUPP_DATE) = ''9999-12-31''
		)
	'|| V_JOIN_FILTER;
				
	V_INSERT_FRAME2 := 'INSERT INTO ' || P_WRK_SCHEMA || '.' || P_WRK_TABLE || ' (
		CONTRACT_NUMBER,
		SECTION_NUMBER,
		ASSUMED_CONTRACT_NUMBER,
		ASSUMED_SECTION_NUMBER,
		ALLOCATION_STATUS_ID,
		REPORTING_BASIS_ID,
		CLOSING_DATE,
		LEVEL_OF_ANALYSIS_ID,
		REQUEST_ID
	)
	SELECT
		pa.CONTRACT_NUMBER,
		pa.SECTION_NUMBER,
		pa.ASSUMED_CONTRACT_NUMBER,
		pa.ASSUMED_SECTION_NUMBER,
		(
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Processed successfully at aggregated level''
		) AS ALLOCATION_STATUS_ID,
		pa.REPORTING_BASIS_ID,
		pa.CLOSING_DATE,
		pa.LEVEL_OF_ANALYSIS_ID,
		' || P_REQUEST_ID || ' AS REQUEST_ID
	FROM
		' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || ' pa
		JOIN
			DELIVERY_<env>.REFCODVAL rcv
			ON rcv.REFCODVAL_ID = pa.ALLOCATION_STATUS_ID
		JOIN
			(
				SELECT 
					TU.CTR_NF,
					TU.SEC_NF,
					PAR_PRJ.CLOSING_DATE,
					PAR_PRJ.REPORTING_BASIS_ID,
					PAR_PRJ.LEVEL_OF_ANALYSIS_ID
				FROM
					' || P_BI_SCHEMA || '.' || P_BI_RA_TABLE || ' PAR_PRJ
					JOIN 
					(
						SELECT
							*
						FROM
							(
								SELECT
									CTR_NF,
									SEC_NF,
									GAR_CF,
									LOB_CF,
									SSD_CF,
									ACCESB_CF,
									SOB_CF,
									TOP_CF,
									PCPRSKTRY_CF,
									LIFTRTTYP_CF,
									SUBMRK_NT,
									USGAAP_CT,
									ASSFINANCE_CT,
									ROW_NUMBER() OVER ( PARTITION BY
									CTR_NF,
									SEC_NF
								ORDER BY
									CTR_NF,
									SEC_NF,
									UWY_NF
									DESC
								) MAX_UWY_NF
								FROM 
									BI_<env>.TUWSEC
								WHERE 
									LOB_CF IN (30,31)
									AND SECSTS_CT IN (14,16,19)
									AND SECACCSTS_CT NOT IN (9,8)
									AND BUSUNIT_LM IS NOT NULL
									AND DATE(SUPP_D) = ''9999-12-31'' 
									AND DATE(END_D) = ''9999-12-31''  
							)
						WHERE
							MAX_UWY_NF = 1 
				   ) TU
					ON TU.GAR_CF = PAR_PRJ.GUARANTEE_CODE 
					AND TU.LOB_CF = PAR_PRJ.LOB_CODE
					AND TU.SSD_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SUBSIDIARY_CODE) = '''' THEN NULL ELSE PAR_PRJ.SUBSIDIARY_CODE END),TU.SSD_CF)
					AND TU.ACCESB_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SUBLEDGER_CODE) = '''' THEN NULL ELSE PAR_PRJ.SUBLEDGER_CODE END),TU.ACCESB_CF)
					AND TU.SOB_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SOB_CODE) = '''' THEN NULL ELSE PAR_PRJ.SOB_CODE END),TU.SOB_CF)
					AND TU.TOP_CF = NVL((CASE WHEN TRIM(PAR_PRJ.TOP_CODE) = '''' THEN NULL ELSE PAR_PRJ.TOP_CODE END),TU.TOP_CF)
					AND TU.PCPRSKTRY_CF = NVL((CASE WHEN TRIM(PAR_PRJ.COUNTRY_OF_RISK_CODE) = '''' THEN NULL ELSE PAR_PRJ.COUNTRY_OF_RISK_CODE END),TU.PCPRSKTRY_CF)
					AND TU.LIFTRTTYP_CF = NVL((CASE WHEN TRIM(PAR_PRJ.LIFE_TREATY_TYPE_CODE) = '''' THEN NULL ELSE PAR_PRJ.LIFE_TREATY_TYPE_CODE END),TU.LIFTRTTYP_CF)
					AND NVL((CASE WHEN TRIM(TU.SUBMRK_NT) = '''' THEN NULL ELSE TU.SUBMRK_NT END),''XX'') = NVL(NVL((CASE WHEN TRIM(PAR_PRJ.SEGMENT_CODE) = '''' THEN NULL ELSE PAR_PRJ.SEGMENT_CODE END),TU.SUBMRK_NT),''XX'')
					AND NVL((CASE WHEN LENGTH(TU.USGAAP_CT) = 0 THEN NULL ELSE TU.USGAAP_CT END),0) = NVL(NVL((CASE WHEN LENGTH(PAR_PRJ.USGAAP_CODE) = 0 THEN NULL ELSE PAR_PRJ.USGAAP_CODE END),TU.USGAAP_CT),0)
					AND NVL((CASE WHEN LENGTH(TU.ASSFINANCE_CT) = 0 THEN NULL ELSE TU.ASSFINANCE_CT END),0) = NVL(NVL((CASE WHEN LENGTH(PAR_PRJ.IAS39_CODE) = 0 THEN NULL ELSE PAR_PRJ.IAS39_CODE END),TU.ASSFINANCE_CT),0)	
				UNION
				SELECT 
					TUR.RETCTR_NF AS CTR_NF, 
					TUR.RETSEC_NF AS SEC_NF,
					PAR_PRJ.CLOSING_DATE ,
					PAR_PRJ.REPORTING_BASIS_ID,
					PAR_PRJ.LEVEL_OF_ANALYSIS_ID
				FROM
					' || P_BI_SCHEMA || '.' || P_BI_RA_TABLE || ' PAR_PRJ
					JOIN 
					(
						SELECT
							*
						FROM
							(
								SELECT
									RES.RETCTR_NF,
									RES.RETSEC_NF,
									RES.RTY_NF,
									RES.GAR_CF,
									RES.LOB_CF,
									RES.SSD_CF,
									RES.ESB_CF,
									RES.SOB_CF,
									RES.TOP_CF,
									RES.PCPRSKTRY_CF,
									RES.SUBMRK_NT,
									RES.USGAAP_CT,
									RES.ASSFINANCE_CT,
									ROW_NUMBER() OVER ( PARTITION BY
									RES.RETCTR_NF,
									RES.RETSEC_NF
								ORDER BY
									RES.RETCTR_NF,
									RES.RETSEC_NF,
									RES.RTY_NF
									DESC
									) MAX_RTY_NF
								FROM 
									BI_<env>.TUWRETSEC RES
									JOIN 
										(
											SELECT 
												TURET.RETCTR_NF, TURET.RETSEC_NF, TURET.RTY_NF, TURET.SSD_CF, TURET.ESB_CF
											FROM 
												BI_<env>.TRETCTR TRET
												JOIN 
													BI_<env>.TUWRETSEC TURET
												ON	TRET.RETCTR_NF = TURET.RETCTR_NF
												AND TRET.RTY_NF = TURET.RTY_NF
												AND TRET.SSD_CF = TURET.SSD_CF
											WHERE 
												TRET.RETCTRSTS_CT IN (3,19)
												AND TURET.LOB_CF IN (30,31)
												AND TURET.LIFPRDLINR_LL IS NOT NULL
										) RETVLD
										ON RES.RETCTR_NF = RETVLD.RETCTR_NF
										AND RES.RETSEC_NF = RETVLD.RETSEC_NF
										AND RES.RTY_NF = RETVLD.RTY_NF
										AND RES.SSD_CF = RETVLD.SSD_CF
										AND RES.ESB_CF = RETVLD.ESB_CF
								WHERE 
									DATE(RES.SUPP_D) = ''9999-12-31'' 
									AND DATE(RES.END_D) = ''9999-12-31''
							)
						WHERE
							MAX_RTY_NF = 1
				   ) TUR
					ON TUR.GAR_CF = PAR_PRJ.GUARANTEE_CODE 
					AND TUR.LOB_CF = PAR_PRJ.LOB_CODE
					AND TUR.SSD_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SUBSIDIARY_CODE) = '''' THEN NULL ELSE PAR_PRJ.SUBSIDIARY_CODE END),TUR.SSD_CF)
					AND TUR.ESB_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SUBLEDGER_CODE) = '''' THEN NULL ELSE PAR_PRJ.SUBLEDGER_CODE END),TUR.ESB_CF)
					AND TUR.SOB_CF = NVL((CASE WHEN TRIM(PAR_PRJ.SOB_CODE) = '''' THEN NULL ELSE PAR_PRJ.SOB_CODE END),TUR.SOB_CF)
					AND TUR.TOP_CF = NVL((CASE WHEN TRIM(PAR_PRJ.TOP_CODE) = '''' THEN NULL ELSE PAR_PRJ.TOP_CODE END),TUR.TOP_CF)
					AND TUR.PCPRSKTRY_CF = NVL((CASE WHEN TRIM(PAR_PRJ.COUNTRY_OF_RISK_CODE) = '''' THEN NULL ELSE PAR_PRJ.COUNTRY_OF_RISK_CODE END),TUR.PCPRSKTRY_CF)
					AND NVL((CASE WHEN TRIM(TUR.SUBMRK_NT) = '''' THEN NULL ELSE TUR.SUBMRK_NT END),''XX'') = NVL(NVL((CASE WHEN TRIM(PAR_PRJ.SEGMENT_CODE) = '''' THEN NULL ELSE PAR_PRJ.SEGMENT_CODE END),TUR.SUBMRK_NT),''XX'')
					AND NVL((CASE WHEN LENGTH(TUR.USGAAP_CT) = 0 THEN NULL ELSE TUR.USGAAP_CT END),0) = NVL(NVL((CASE WHEN LENGTH(PAR_PRJ.USGAAP_CODE) = 0 THEN NULL ELSE PAR_PRJ.USGAAP_CODE END),TUR.USGAAP_CT),0)
					AND NVL((CASE WHEN LENGTH(TUR.ASSFINANCE_CT) = 0 THEN NULL ELSE TUR.ASSFINANCE_CT END),0) = NVL(NVL((CASE WHEN LENGTH(PAR_PRJ.IAS39_CODE) = 0 THEN NULL ELSE PAR_PRJ.IAS39_CODE END),TUR.ASSFINANCE_CT),0)
			) SRC
			ON SRC.CTR_NF = pa.CONTRACT_NUMBER
            AND SRC.SEC_NF = pa.SECTION_NUMBER
            AND SRC.CLOSING_DATE = pa.CLOSING_DATE
            AND SRC.REPORTING_BASIS_ID = pa.REPORTING_BASIS_ID
			AND SRC.LEVEL_OF_ANALYSIS_ID = pa.LEVEL_OF_ANALYSIS_ID
	WHERE
		DATE(pa.VALID_TO) = ''9999-12-31''
		AND DATE(pa.SUPP_DATE) = ''9999-12-31''
		AND rcv.REFERENCE_CODE_VALUE = ''Not allocated''';
	
	V_INSERT_ALLO := 'INSERT INTO ' || P_WRK_SCHEMA || '.' || P_WRK_TABLE || ' (
	    CONTRACT_NUMBER,
		SECTION_NUMBER,
		ASSUMED_CONTRACT_NUMBER,
	    ASSUMED_SECTION_NUMBER,
		ALLOCATION_STATUS_ID,
		REPORTING_BASIS_ID,
		CLOSING_DATE,
		LEVEL_OF_ANALYSIS_ID,
		REQUEST_ID
	)
	SELECT DISTINCT 
	    PR.CONTRACT_NUMBER,
	    PR.SECTION_NUMBER,
		CASE 
			WHEN TRIM(PR.ASSUMED_CONTRACT_NUMBER) = '''' THEN NULL 
			ELSE PR.ASSUMED_CONTRACT_NUMBER 
		END AS ASSUMED_CONTRACT_NUMBER,
		CASE 
			WHEN TRIM(PR.ASSUMED_SECTION_NUMBER) = '''' THEN NULL 
			ELSE PR.ASSUMED_SECTION_NUMBER 
		END AS ASSUMED_SECTION_NUMBER,
	    (
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Processed successfully at T/S level''
		) AS ALLOCATION_STATUS_ID,
	    PR.REPORTING_BASIS_ID,
	    PR.CLOSING_DATE,
		PR.LEVEL_OF_ANALYSIS_ID,
	    ' || P_REQUEST_ID || ' AS REQUEST_ID
	FROM  
		' || P_BI_SCHEMA || '.' || P_BI_PROJECTION || ' PR
		JOIN
			(
				SELECT DISTINCT 
					CONTRACT_NUMBER, 
					SECTION_NUMBER, 
					ASSUMED_CONTRACT_NUMBER,
					ASSUMED_SECTION_NUMBER,
					REPORTING_BASIS_ID,
					CLOSING_DATE,
					LEVEL_OF_ANALYSIS_ID
				FROM  
					' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || '
				WHERE 
					DATE(VALID_TO) = ''9999-12-31''
					AND DATE(SUPP_DATE) = ''9999-12-31''
					AND ALLOCATION_STATUS_ID IN (SELECT REFCODVAL_ID 
												FROM DELIVERY_<env>.REFCODVAL 
												WHERE REFERENCE_CODE_VALUE = ''Rejected on T/S level''
												)
			) PRA 
			ON PRA.CONTRACT_NUMBER = PR.CONTRACT_NUMBER 
			AND PRA.SECTION_NUMBER = PR.SECTION_NUMBER
			AND NVL((CASE WHEN TRIM(PRA.ASSUMED_CONTRACT_NUMBER) = '''' THEN NULL ELSE PRA.ASSUMED_CONTRACT_NUMBER END),''X'') = NVL((CASE WHEN TRIM(PR.ASSUMED_CONTRACT_NUMBER) = '''' THEN NULL ELSE PR.ASSUMED_CONTRACT_NUMBER END),''X'')
			AND NVL((CASE WHEN LENGTH(PRA.ASSUMED_SECTION_NUMBER) = 0 THEN NULL ELSE PRA.ASSUMED_SECTION_NUMBER END),0) = NVL((CASE WHEN LENGTH(PR.ASSUMED_SECTION_NUMBER) = 0 THEN NULL ELSE PR.ASSUMED_SECTION_NUMBER END),0)
			AND PRA.REPORTING_BASIS_ID = PR.REPORTING_BASIS_ID
			AND PRA.CLOSING_DATE = PR.CLOSING_DATE
			AND PRA.LEVEL_OF_ANALYSIS_ID = PR.LEVEL_OF_ANALYSIS_ID
	WHERE
		DATE(PR.VALID_TO) = ''9999-12-31''
		AND DATE(PR.SUPP_DATE) = ''9999-12-31''
		AND PR.CREATED_REQUEST_ID = ' || P_REQUEST_ID || '
	UNION
	SELECT DISTINCT 
	    PRJ.CONTRACT_NUMBER,
	    PRJ.SECTION_NUMBER,
		CASE 
			WHEN TRIM(PRJ.ASSUMED_CONTRACT_NUMBER) = '''' THEN NULL 
			ELSE PRJ.ASSUMED_CONTRACT_NUMBER 
		END AS ASSUMED_CONTRACT_NUMBER,
		CASE 
			WHEN TRIM(PRJ.ASSUMED_SECTION_NUMBER) = '''' THEN NULL 
			ELSE PRJ.ASSUMED_SECTION_NUMBER 
		END AS ASSUMED_SECTION_NUMBER,
	    (
			SELECT
			    REFCODVAL_ID 
			FROM 
				DELIVERY_<env>.REFCODVAL 
			WHERE 
				REFERENCE_CODE_VALUE = ''Not allocated''
		) AS ALLOCATION_STATUS_ID,
	    PRJ.REPORTING_BASIS_ID,
	    PRJ.CLOSING_DATE,
		PRJ.LEVEL_OF_ANALYSIS_ID,
	    ' || P_REQUEST_ID || ' AS REQUEST_ID
	FROM  
		' || P_BI_SCHEMA || '.' || P_BI_PROJECTION || ' PRJ
	WHERE 
		DATE(PRJ.VALID_TO) = ''9999-12-31'' 
		AND DATE(PRJ.SUPP_DATE) = ''9999-12-31''
		AND PRJ.VALID_FROM > (
			SELECT
				COALESCE(MAX(VALID_FROM), ''1900-01-01'')
            FROM 
				' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || '
		)
		AND NOT EXISTS (
						SELECT 
							1
						FROM 
							' || P_DWH_SCHEMA || '.' || P_DWH_TABLE || ' PRJA
						WHERE PRJ.CONTRACT_NUMBER = PRJA.CONTRACT_NUMBER
						AND	PRJ.SECTION_NUMBER = PRJA.SECTION_NUMBER
						AND COALESCE(PRJ.ASSUMED_CONTRACT_NUMBER, ''XX'') = COALESCE(PRJA.ASSUMED_CONTRACT_NUMBER, ''XX'')
						AND COALESCE(PRJ.ASSUMED_SECTION_NUMBER, 0) = COALESCE(PRJA.ASSUMED_SECTION_NUMBER, 0)
						AND	PRJ.REPORTING_BASIS_ID = PRJA.REPORTING_BASIS_ID
						AND	PRJ.CLOSING_DATE = PRJA.CLOSING_DATE
						AND DATE(PRJA.VALID_TO) = ''9999-12-31''
						AND DATE(PRJA.SUPP_DATE) = ''9999-12-31''
						AND PRJA.ALLOCATION_STATUS_ID IN (SELECT REFCODVAL_ID 
														FROM DELIVERY_<env>.REFCODVAL 
														WHERE REFERENCE_CODE_VALUE = ''Rejected on T/S level''
						)
		)
		'|| V_REQUEST_ID_FILTER;
	
    V_DELETE_WRK := 'DELETE FROM ' || P_WRK_SCHEMA || '.' || P_WRK_TABLE || ' WHERE REQUEST_ID = ' || P_REQUEST_ID;
	
	RAISE NOTICE 'Executing V_DELETE_WRK: ''%''', V_DELETE_WRK; 
	EXECUTE IMMEDIATE V_DELETE_WRK; 

	IF P_TYPE = 1 THEN
	    RAISE NOTICE 'Executing V_INSERT_FRAME1: ''%''', V_INSERT_FRAME1; 
	    EXECUTE IMMEDIATE V_INSERT_FRAME1;
	    EXECUTE IMMEDIATE 'COMMIT';
	ELSIF P_TYPE = 2 THEN 
	    RAISE NOTICE 'Executing V_INSERT_FRAME2: ''%''', V_INSERT_FRAME2; 
	    EXECUTE IMMEDIATE V_INSERT_FRAME2; 
	    EXECUTE IMMEDIATE 'COMMIT';
	ELSIF P_TYPE = 3 THEN 
	    RAISE NOTICE 'Executing V_INSERT_ALLO: ''%''', V_INSERT_ALLO; 
	    EXECUTE IMMEDIATE V_INSERT_ALLO;
	    EXECUTE IMMEDIATE 'COMMIT';
	END IF;

EXCEPTION 
	WHEN OTHERS THEN
		L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
		L_ERR_MSG := SQLERRM;
		RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG;
		RETURN L_ERR_CD;

END;

END_PROC;