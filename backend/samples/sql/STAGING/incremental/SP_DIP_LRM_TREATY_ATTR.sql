SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_DIP_LRM_TREATY_ATTR;

CREATE OR REPLACE PROCEDURE SP_DIP_LRM_TREATY_ATTR (CHARACTER VARYING(50),CHARACTER VARYING(50),CHARACTER VARYING(50),CHARACTER VARYING(50) ) 
RETURNS INTEGER
LANGUAGE NZPLSQL 
AS 
BEGIN_PROC

DECLARE 

    P_STG_SCHEMA            ALIAS FOR $1;
    P_DIP_LRM_TRTY_ATTR     ALIAS FOR $2;
    P_QTR_DATE              ALIAS FOR $3;
    P_RPT_BA_CODE           ALIAS FOR $4;
    V_RETCTR_NF             VARCHAR(5);
    V_CLISSD_CF1            VARCHAR(5);
    V_CLISSD_CF2            VARCHAR(5);
    V_SEP_OPTR              VARCHAR(5);
    V_TILT_VAL              VARCHAR(100);
    V_QUERY_2               VARCHAR(32000);
	V_PRE_QUERY_3_DDL		VARCHAR(32000);
   	V_PRE_QUERY_3           VARCHAR(32000);
    V_QUERY_3               VARCHAR(32000);
    V_SESS_DTM_PRJ          VARCHAR(1000);
    V_SESS_TUWSEC           VARCHAR(1000);
    V_SESS_TUWRETSEC        VARCHAR(1000);
    V_SESS_TPLACEMT         VARCHAR(1000);
    V_SESS_WRK_TREATY       VARCHAR(1000);        
    V_SESS_CTRPTY_CODE      VARCHAR(1000);        
    V_QTRS                  VARCHAR(150);
    V_QTR                   VARCHAR(50);
    V_YR                    VARCHAR(50);    
    L_ERR_CD                CHAR(5);
    L_ERR_MSG               VARCHAR(32000);
    V_REC                   RECORD;

BEGIN
SET ISOLATION TO UR;

V_SESS_DTM_PRJ = 'WRK_DTM_PROJ_FACT';
V_SESS_TUWRETSEC = 'WRK_TUWRETSEC';
V_SESS_TUWSEC = 'WRK_TUWSEC';
V_SESS_TPLACEMT = 'WRK_TPLACEMT';
V_SESS_WRK_TREATY = 'WRK_ATTR_TREATY';
V_SESS_CTRPTY_CODE = 'WRK_CTR_PTY_CODE';
V_TILT_VAL = '~';
V_RETCTR_NF = 'RE';
V_CLISSD_CF1 = 'GTP';
V_CLISSD_CF2 = 'IA';
V_SEP_OPTR = '-';
V_QTR = SUBSTRING(P_QTR_DATE,2,1); 
V_YR = SUBSTRING(P_QTR_DATE,3,4);

V_QTRS :=
CASE
   WHEN V_QTR = 4 THEN '(''Q4' ||(V_YR)|| ''')'
   WHEN V_QTR = 1 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''')'
   WHEN V_QTR = 2 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''',''Q2' || V_YR || ''')'
   WHEN V_QTR = 3 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''',''Q2' || V_YR || ''',''Q3' || V_YR || ''')'
END ;


RAISE NOTICE '''%''',
V_QTRS ;

V_PRE_QUERY_3 = '(
SELECT  
    DENSE_RANK() OVER (ORDER BY CONTRACT_NUMBER , UNDERWRITING_YEAR , SECTION_NUMBER ,UNDERWRITING_ORDER , ENDORSEMENT_NUMBER , CLOSING_DATE ,POLICY_UW_YEAR , BUSINESS_MATURITY_ID , REPORTING_BASIS_ID , ASSUMED_CONTRACT_NUMBER , ASSUMED_SECTION_NUMBER , SPLIT_TYPE_ID ) AS ID ,
	LEVEL_OF_ANALYSIS_ID,
    CONTRACT_NUMBER ,
    UNDERWRITING_YEAR, 
    SECTION_NUMBER, 
    UNDERWRITING_ORDER,
    ENDORSEMENT_NUMBER ,
    POLICY_UW_YEAR , 
    BUSINESS_MATURITY_ID ,
    REPORTING_BASIS_ID , 
    ASSUMED_CONTRACT_NUMBER , 
    ASSUMED_SECTION_NUMBER,
    SPLIT_TYPE_ID,    
    LVL.CODE,
    PR.CLOSING_DATE,
    ''Q''||QUARTER(PR.CLOSING_DATE) AS QTR,
    YEAR(PR.CLOSING_DATE) AS CLOSING_YR  
FROM BI_<env>.PROJECTION_FACT PR
INNER JOIN DWHD1_<env>.V_MAPPING_POSITION MP ON PR.POSITION_ID = MP.SOURCE_Position_ID AND MP.IS_CSM_MAP is TRUE AND DATE(MP.VALID_TO) = ''9999-12-31'' AND MP.MAP_POSITION_CODE <> ''COV_UNITS''
INNER JOIN BI_<env>.LEVEL_OF_ANALYSIS LVL ON LVL.ID=PR.LEVEL_OF_ANALYSIS_ID AND DATE(LVL.VALID_TO) = ''9999-12-31''
INNER JOIN BI_<env>.REPORTING_BASIS RB ON  PR.REPORTING_BASIS_ID = RB.ID AND RB.CODE = ''' || P_RPT_BA_CODE || '''
WHERE DATE(PR.VALID_TO) = ''9999-12-31'' AND DATE(PR.SUPP_DATE) = ''9999-12-31'' AND PR.PROJECTION_YEAR >= (YEAR(PR.CLOSING_DATE)-1)
    AND QTR||CLOSING_YR IN ' || V_QTRS || ' 
GROUP BY    LEVEL_OF_ANALYSIS_ID,
    CONTRACT_NUMBER ,
	UNDERWRITING_YEAR, 
	SECTION_NUMBER, 
	UNDERWRITING_ORDER,
	ENDORSEMENT_NUMBER ,
	POLICY_UW_YEAR , 
	BUSINESS_MATURITY_ID ,
	REPORTING_BASIS_ID , 
	ASSUMED_CONTRACT_NUMBER , 
	ASSUMED_SECTION_NUMBER,
	SPLIT_TYPE_ID,    
    LVL.CODE,
    PR.CLOSING_DATE,
    ''Q''||QUARTER(PR.CLOSING_DATE),
    YEAR(PR.CLOSING_DATE)   
)';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_SESS_DTM_PRJ || '_HELPER  IF EXISTS';

V_PRE_QUERY_3_DDL = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_DTM_PRJ || '_HELPER AS ' || V_PRE_QUERY_3 || ' WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY HASH(CONTRACT_NUMBER)';
EXECUTE IMMEDIATE V_PRE_QUERY_3_DDL;

V_QUERY_3 = '(
SELECT    
    ID , 
    CONTRACT_NUMBER ,
    UNDERWRITING_YEAR, 
    SECTION_NUMBER, 
    UNDERWRITING_ORDER,
    ENDORSEMENT_NUMBER ,
    CLOSING_DATE,
    POLICY_UW_YEAR , 
    BUSINESS_MATURITY_ID ,
    REPORTING_BASIS_ID , 
    ASSUMED_CONTRACT_NUMBER , 
    ASSUMED_SECTION_NUMBER,
    SPLIT_TYPE_ID  
FROM (SELECT   
        MAX(LEVEL_OF_ANALYSIS_ID) as LEVEL_OF_ANALYSIS_ID ,
        PC.ID , 
        PC.CONTRACT_NUMBER ,
        PC.UNDERWRITING_YEAR, 
        PC.SECTION_NUMBER, 
        PC.UNDERWRITING_ORDER,
        PC.ENDORSEMENT_NUMBER ,
        PC.CLOSING_DATE,
        PC.POLICY_UW_YEAR , 
        PC.BUSINESS_MATURITY_ID ,
        PC.REPORTING_BASIS_ID , 
        PC.ASSUMED_CONTRACT_NUMBER , 
        PC.ASSUMED_SECTION_NUMBER,
        PC.SPLIT_TYPE_ID    
    FROM SESSION.' || V_SESS_DTM_PRJ || '_HELPER '|| ' PC
    GROUP BY 
        PC.ID , 
        PC.CONTRACT_NUMBER ,
        PC.UNDERWRITING_YEAR, 
        PC.SECTION_NUMBER, 
        PC.UNDERWRITING_ORDER,
        PC.ENDORSEMENT_NUMBER ,
        PC.CLOSING_DATE,
        PC.POLICY_UW_YEAR , 
        PC.BUSINESS_MATURITY_ID ,
        PC.REPORTING_BASIS_ID , 
        PC.ASSUMED_CONTRACT_NUMBER , 
        PC.ASSUMED_SECTION_NUMBER,
        PC.SPLIT_TYPE_ID  
   ) 
)';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_SESS_DTM_PRJ || '  IF EXISTS';
V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_DTM_PRJ || ' AS ' || V_QUERY_3 || ' WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY HASH(CONTRACT_NUMBER)';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',
V_QUERY_2;

EXECUTE IMMEDIATE V_QUERY_2;

RAISE NOTICE '% INSERT DATA INTO SESSION TABLE WRK_DTM_PROJECTION_FACT';


V_QUERY_3 = ' (         
SELECT
    RETCTR_NF,
    RTY_NF,
    RETSEC_NF,
    SSD_CF,
    END_D,
    NAT_CF,
    ESB_CF,
    PCPRSKTRY_CF,
    ASSFINANCE_CT,
    TOP_CF,
    SOB_CF,
    LOB_CF,
    USGAAP_CT,
    GAR_CF,
    SUBMRK_NT,
    ROW_NUM
FROM(SELECT
        RETCTR_NF,
        RTY_NF,
        RETSEC_NF,
        SSD_CF,
        END_D,
        NAT_CF,
        ESB_CF,
        PCPRSKTRY_CF,
        ASSFINANCE_CT,
        TOP_CF,
        SOB_CF,
        LOB_CF,
        USGAAP_CT,
        GAR_CF,
        SUBMRK_NT,
        ROW_NUMBER() OVER(PARTITION BY RETCTR_NF, RETSEC_NF ORDER BY RTY_NF DESC) AS ROW_NUM
    FROM BI_<env>.TUWRETSEC              
    WHERE DATE(END_D) = ''9999-12-31'' AND DATE(SUPP_D) = ''9999-12-31''
    )
WHERE ROW_NUM = 1 )';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.'|| V_SESS_TUWRETSEC || '  IF EXISTS';
V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_TUWRETSEC || ' AS ' || V_QUERY_3 || ' WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY HASH(RETCTR_NF)';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',V_QUERY_2; 
EXECUTE IMMEDIATE V_QUERY_2;

RAISE NOTICE '% INSERT DATA INTO SESSION TABLE V_SESS_TUWRETSEC';

V_QUERY_3 = ' (
SELECT   
    CTR_NF ,
    SEC_NF,
    SUBMRK_NT,
    TOP_CF,
    GAR_CF,
    LOB_CF,
    SOB_CF,
    USGAAP_CT ,
    END_D,
    SUPP_D,
    NAT_CF,
    ASSFINANCE_CT,
    LIFTRTTYP_CF,
    PCPRSKTRY_CF,
    SECLAB_LM,
    UW_NT,
    UWY_NF,
    END_NT,
    ACCESB_CF,
    SSD_CF,
    CED_NF 
FROM ( SELECT    
        CTR_NF ,
        SEC_NF,
        SUBMRK_NT,
        TOP_CF,
        GAR_CF,
        LOB_CF,
        SOB_CF,
        USGAAP_CT ,
        END_D,
        SUPP_D,
        NAT_CF,
        ASSFINANCE_CT,
        LIFTRTTYP_CF,
        PCPRSKTRY_CF,
        SECLAB_LM,
        UW_NT,
        UWY_NF,
        END_NT,
        ACCESB_CF,
        SSD_CF,
        CED_NF
        ,ROW_NUMBER() OVER(PARTITION BY CTR_NF,  SEC_NF    ORDER BY  uwy_nf DESC) AS ROW_NUM
    FROM  BI_<env>.TUWSEC  WHERE  DATE(END_D) = ''9999-12-31'' AND DATE(SUPP_D) = ''9999-12-31'')    
    WHERE   ROW_NUM = 1        
)';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.'|| V_SESS_TUWSEC || '  IF EXISTS';
V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_TUWSEC || ' AS ' || V_QUERY_3 || ' WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY HASH(CTR_NF)';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',V_QUERY_2;
EXECUTE IMMEDIATE V_QUERY_2;

RAISE NOTICE '% INSERT DATA INTO SESSION TABLE WRK_TUWSEC';

V_QUERY_3 = ' (
SELECT  
    ssd_cf,
    RETCTR_NF, 
    RTO_NF, 
    RANK_NM
FROM ( SELECT
        ssd_cf,
        RETCTR_NF,
        RTO_NF,
        ROW_NUMBER() OVER ( PARTITION BY RETCTR_NF, PLC_NT, PLCVER_NT ORDER BY PLCVER_NT ASC) AS RANK_NM
    FROM BI_<env>.TPLACEMT tmp
    WHERE PLCSTS_CT IN (16,19) ) 
WHERE RANK_NM = 1 
)';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_SESS_TPLACEMT || '  IF EXISTS';
V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_TPLACEMT || ' AS ' || V_QUERY_3 || 'WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY RANDOM';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',V_QUERY_2;
EXECUTE IMMEDIATE V_QUERY_2;

RAISE NOTICE '% INSERT DATA INTO SESSION TABLE WRK_SESS_TPLACEMT';
V_QUERY_2 = 'DROP TABLE SESSION.' || V_SESS_WRK_TREATY || ' IF EXISTS';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',
V_QUERY_2;

EXECUTE IMMEDIATE V_QUERY_2;

V_QUERY_3 = 'SELECT *     
                        FROM ' || P_STG_SCHEMA || '.' || P_DIP_LRM_TRTY_ATTR ||
                        ' WHERE 1 <> 1';

EXECUTE IMMEDIATE 'DROP TABLE SESSION.'|| V_SESS_WRK_TREATY || '  IF EXISTS';

V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_WRK_TREATY || ' AS (' || V_QUERY_3 || ' )WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY RANDOM';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',V_QUERY_2; 
EXECUTE IMMEDIATE V_QUERY_2;

V_QUERY_2 = '(
SELECT  
   ID,
   "Treaty_Number",
   "Section_Number",
   "Treaty_Section_Name",
   "Policy_Underwriting_Year",
   "Subsidiary_Code",
   "Ledger_Code",
   "Region_Code",
   "Treaty_Life_Characteristic_Code",
   "Financing_Type_Code",
   "IAS39_Code",
   "USGAAP_Code",
   "Coinsurance_Code",
   "Type_Of_Business_Code",
   "Omega_LoB_Code",
   "Guarantee_Code",
   "Policy_Type_Code",
   "Nature_Code",
   "Basis_Type",
   NULL AS "Counter_Party_Code" ,
   "Actuarial_Model_Type_Code",
   "Client_Code",
   "Term_Type_Code",
   "Business_Maturity_Code",
   "Business_Maturity_Flag",
   "Market_Unit_Code",
   "Gross_Assumed_Treaty_Number",
   "Gross_Assumed_Section_Number",
   "Closing_Date",
   "Reporting_Basis_Code",
   NULL AS "IFRS17_Cohort",
   NULL AS "IFRS17_Portfolio",
   NULL AS "IFRS17_Sub_Portfolio",
   NULL AS "Transition_Mode",
   "Initial_Profitability",
   "Annual_Cohort",
   "Split"    
FROM (SELECT  
       TRIM(PC.ID) AS ID ,
       TRIM(PC.CONTRACT_NUMBER) AS "Treaty_Number" ,
       TRIM(PC.SECTION_NUMBER) AS "Section_Number" ,
       COALESCE(TRIM(TU.SECLAB_LM), TRIM(TURET.CTRPCPNAM_LL) ,  NULL) AS "Treaty_Section_Name" ,
       COALESCE(TRIM(PC.POLICY_UW_YEAR), NULL) AS "Policy_Underwriting_Year" ,
       COALESCE(TRIM(TU.SSD_CF), TRIM(TUR.SSD_CF)) AS "Subsidiary_Code" ,
       COALESCE(TRIM(TU.ACCESB_CF), TRIM(TUR.ESB_CF)) AS "Ledger_Code" ,
       COALESCE(TRIM(TU.PCPRSKTRY_CF), TRIM(TUR.PCPRSKTRY_CF),  NULL) AS "Region_Code" ,
       COALESCE(TRIM(TU.LIFTRTTYP_CF),NULL) AS "Treaty_Life_Characteristic_Code" ,
       COALESCE(TRIM(TCO.FINTYP_CF), TRIM(TRET.FINTYP_CF)) AS "Financing_Type_Code" ,
       COALESCE(TRIM(TU.ASSFINANCE_CT), TRIM(TUR.ASSFINANCE_CT), NULL) AS "IAS39_Code" ,
       COALESCE(TRIM(TU.USGAAP_CT) ,TRIM(TUR.USGAAP_CT )) AS "USGAAP_Code" ,
       COALESCE(TRIM(TU.SOB_CF), TRIM(TUR.SOB_CF),  NULL) AS "Coinsurance_Code" ,
       CASE WHEN PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF THEN(CASE WHEN TCO.RSKCOMPRM_B IS TRUE THEN 82 ELSE 80    END)
           WHEN PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF THEN NULL  END AS "Type_Of_Business_Code" ,
       COALESCE(TRIM(TU.LOB_CF), TRIM(TUR.LOB_CF), NULL) AS "Omega_LoB_Code" ,
       COALESCE(TRIM(TU.GAR_CF), TRIM(TUR.GAR_CF), NULL) AS "Guarantee_Code" ,
       COALESCE(TRIM(TU.TOP_CF), TRIM(TUR.TOP_CF), NULL) AS "Policy_Type_Code" ,
       COALESCE(TRIM(TCT.CTRNATMNE_HD), NULL) AS "Nature_Code" ,
       CASE WHEN TUR.RETCTR_NF <> '''' OR TUR.RETCTR_NF IS NOT NULL THEN ''' || V_RETCTR_NF || '''
           WHEN TU.CTR_NF <> '''' OR TU.CTR_NF IS NOT NULL THEN (CASE WHEN TCLI.CLISSD_CF IS NULL THEN ''' || V_CLISSD_CF1 || ''' ELSE ''' || V_CLISSD_CF2 || ''' END) 
       ELSE NULL END AS "Basis_Type" ,
       '''' AS "Counter_Party_Code",
       COALESCE(TRIM(TCO.DATATYP_CT), NULL) AS "Actuarial_Model_Type_Code" ,
       CASE WHEN ASSUMED_CONTRACT_NUMBER IS NOT NULL THEN GTU.CED_NF
           WHEN (tu.ctr_nf <> ''''  OR tu.ctr_nf IS NOT NULL)  AND ASSUMED_CONTRACT_NUMBER IS NULL THEN TU.CED_NF
       ELSE NULL   END AS "Client_Code" ,
       COALESCE(TRIM(TCO.POLDUR_CF), NULL) AS "Term_Type_Code" ,
       COALESCE(TRIM(BM.CODE), NULL) AS "Business_Maturity_Code" , 
       NULL AS "Business_Maturity_Flag" ,
       COALESCE(TRIM(TU.SUBMRK_NT), TRIM(TUR.SUBMRK_NT), NULL) AS "Market_Unit_Code",
       TRIM(PC.ASSUMED_CONTRACT_NUMBER) AS "Gross_Assumed_Treaty_Number",
       TRIM(PC.ASSUMED_SECTION_NUMBER) AS "Gross_Assumed_Section_Number",
       TRIM(PC.Closing_date) AS "Closing_Date",
       TRIM(RB.code) AS "Reporting_Basis_Code",
       ''Q''||QUARTER(PC.CLOSING_DATE) AS QTR,
       YEAR(PC.CLOSING_DATE) AS CLOSING_YR,
       TRIM(TS.GRPINIPRO_CF)  AS "Initial_Profitability",
       NULL AS "Annual_Cohort",
       TRIM(ST.CODE) AS "Split"        
   FROM SESSION.' || V_SESS_DTM_PRJ || ' PC
   INNER JOIN BI_<env>.BUSINESS_MATURITY BM ON PC.BUSINESS_MATURITY_ID = BM.ID
   INNER JOIN BI_<env>.REPORTING_BASIS RB ON  PC.REPORTING_BASIS_ID = RB.ID
   LEFT OUTER JOIN SESSION.' || V_SESS_TUWSEC || ' GTU ON PC.ASSUMED_CONTRACT_NUMBER = GTU.CTR_NF AND PC.ASSUMED_SECTION_NUMBER = GTU.SEC_NF
   LEFT OUTER JOIN SESSION.' || V_SESS_TUWSEC || ' TU ON PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF        
   LEFT OUTER JOIN SESSION.' || V_SESS_TUWRETSEC || ' TUR ON PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF
   LEFT OUTER JOIN BI_<env>.TCLIENT TCLI ON TCLI.CLI_NF = TU.CED_NF
   LEFT OUTER JOIN BI_<env>.SPLIT_TYPE ST ON  ST.ID=PC.SPLIT_TYPE_ID
   LEFT OUTER JOIN (
       SELECT
           RETCTR_NF,
           RTY_NF,
           RETSEC_NF,
           SSD_CF,
           CTRPCPNAM_LL
       FROM BI_<env>.TUWRETRO
       GROUP BY
           RETCTR_NF,
           RTY_NF,
           RETSEC_NF,
           SSD_CF,
           CTRPCPNAM_LL
       ) TURET ON TURET.RETCTR_NF = TUR.RETCTR_NF AND TURET.RTY_NF = TUR.RTY_NF AND TURET.RETSEC_NF = TUR.RETSEC_NF AND TURET.SSD_CF = TUR.SSD_CF
   LEFT OUTER JOIN BI_<env>.TSECTION TSE ON TU.CTR_NF = TSE.CTR_NF AND TU.SEC_NF = TSE.SEC_NF AND TU.END_NT = TSE.END_NT AND TU.UWY_NF = TSE.UWY_NF AND TU.UW_NT = TSE.UW_NT AND TU.SSD_CF = TSE.SSD_CF
   LEFT OUTER JOIN BI_<env>.TUWCTR TUWC ON TUWC.CTR_NF = TU.CTR_NF AND TUWC.UWY_NF = TU.UWY_NF AND TUWC.UW_NT = TU.UW_NT AND TUWC.END_NT = TU.END_NT AND TUWC.SSD_CF = TU.SSD_CF AND TUWC.END_D = TU.END_D AND TUWC.SUPP_D = TU.SUPP_D
   LEFT OUTER JOIN BI_<env>.TCONTR TCO ON TCO.CTR_NF = TUWC.CTR_NF AND TCO.UWY_NF = TUWC.UWY_NF AND TCO.UW_NT = TUWC.UW_NT AND TCO.END_NT = TUWC.END_NT AND TCO.SSD_CF = TUWC.SSD_CF
   LEFT OUTER JOIN BI_<env>.TRETSEC TRETS ON TRETS.RETCTR_NF = TUR.RETCTR_NF AND TRETS.RTY_NF = TUR.RTY_NF AND TRETS.SSD_CF = TUR.SSD_CF AND TRETS.RETSEC_NF = TUR.RETSEC_NF AND TRETS.SUPP_D = ''9999-12-31'' AND TUR.END_D = ''9999-12-31''
   LEFT OUTER JOIN BI_<env>.TRETCTR TRET ON TRETS.RTY_NF = TRET.RTY_NF AND TRETS.RETCTR_NF = TRET.RETCTR_NF AND TRETS.SSD_CF = TRET.SSD_CF AND TRETS.SUPP_D = ''9999-12-31''
   LEFT OUTER JOIN BI_<env>.TBANALL TBANA3 ON TBANA3.COLVAL_CT = CAST(TCO.POLDUR_CF AS VARCHAR(80)) AND TBANA3.COL_LS = ''POLDUR_CF'' AND TBANA3.LAG_CF = ''E''   
   LEFT OUTER JOIN BI_<env>.TCTRNATL TCT ON COALESCE(TU.NAT_CF, TUR.NAT_CF) = TCT.CTRNAT_CF AND TCT.LAG_CF = ''E''   
   LEFT OUTER JOIN SESSION.' || V_SESS_TPLACEMT || ' TP ON TUR.RETCTR_NF = TP.RETCTR_NF AND TUR.SSD_CF = TP.SSD_CF
   LEFT JOIN BI_<env>.TCLIENT tc ON TC.CLI_NF = TP.RTO_NF
   LEFT OUTER JOIN BI_<env>.TSECIFRS  TS ON TU.CTR_NF =TS.CTR_NF AND TU.UWY_NF=TS.UWY_NF AND TU.SSD_CF=TS.SSD_CF AND TU.UW_NT=TS.UW_NT AND TU.SEC_NF=TS.SEC_NF AND TU.END_NT=TS.END_NT        
   LEFT OUTER JOIN BI_<env>.TRETIFRS TSR ON TUR.RETCTR_NF=TSR.RETCTR_NF AND TUR.RTY_NF=TSR.RTY_NF
   )                
WHERE  QTR||CLOSING_YR IN ' || V_QTRS || '       
GROUP BY
 ID,
 "Treaty_Number",
 "Section_Number",
 "Treaty_Section_Name",
 "Policy_Underwriting_Year",
 "Subsidiary_Code",
 "Ledger_Code",
 "Region_Code",
 "Treaty_Life_Characteristic_Code",
 "Financing_Type_Code",
 "IAS39_Code",
 "USGAAP_Code",
 "Coinsurance_Code",
 "Type_Of_Business_Code",
 "Omega_LoB_Code",
 "Guarantee_Code",
 "Policy_Type_Code",
 "Nature_Code",
 "Basis_Type",
 "Actuarial_Model_Type_Code",
 "Client_Code",
 "Term_Type_Code",
 "Business_Maturity_Code",
 "Business_Maturity_Flag",
 "Market_Unit_Code",
 "Gross_Assumed_Treaty_Number",
 "Gross_Assumed_Section_Number",
 "Closing_Date",
 "Reporting_Basis_Code",
 "Initial_Profitability",
 "Annual_Cohort",
 "Split"  
)
';

V_QUERY_3 = 'INSERT INTO SESSION' || '.' || V_SESS_WRK_TREATY || ' ' || V_QUERY_2;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION' || '.' || V_SESS_CTRPTY_CODE || ' IF EXISTS';
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = '
SELECT 
    "Counter_Party_Code", 
    ID,
    "IFRS17_Cohort",
    "IFRS17_Portfolio",
    "IFRS17_Sub_Portfolio",
    "Transition_Mode"     
FROM ' || P_STG_SCHEMA || '.' || P_DIP_LRM_TRTY_ATTR || ' 
WHERE 1 <> 1
';
EXECUTE IMMEDIATE 'DROP TABLE SESSION.'|| V_SESS_CTRPTY_CODE || '  IF EXISTS';
V_QUERY_2 = 'DECLARE GLOBAL TEMPORARY TABLE ' || V_SESS_CTRPTY_CODE || ' AS (' || V_QUERY_3 || ' )WITH DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE BY RANDOM';

RAISE NOTICE 'Executing V_QUERY_2: ''%''',V_QUERY_2; 
EXECUTE IMMEDIATE V_QUERY_2;

V_QUERY_2 = '(
SELECT DISTINCT
   CASE WHEN tu.ctr_nf <> '''' OR tu.ctr_nf IS NOT NULL THEN
           CASE WHEN tcli.CLISSD_CF IS NULL THEN CAST (tu.ced_nf AS VARCHAR)
                   WHEN TCLI.CLISSD_CF IS NOT NULL THEN 
                   CASE WHEN tw5.CTR_NF_LVL4 IS NOT NULL THEN tw5.RSSD_CF_LVL4 || ''' || V_SEP_OPTR || ''' || tw5.ESB_CF_LVL4
                            WHEN tw4.CTR_NF_LVL3 IS NOT NULL THEN tw4.RSSD_CF_LVL3 || ''' || V_SEP_OPTR || ''' || tw4.ESB_CF_LVL3
                            WHEN tw3.CTR_NF_LVL2 IS NOT NULL THEN tw3.RSSD_CF_LVL2 || ''' || V_SEP_OPTR || ''' || tw3.ESB_CF_LVL2
                            WHEN tw2.CTR_NF_LVL1 IS NOT NULL THEN tw2.RSSD_CF_LVL1 || ''' || V_SEP_OPTR || ''' || tw2.RESB_CF_LVL1
                   ELSE NULL 
                   END  
           END
       WHEN tur.retctr_nf <> '''' OR tur.retctr_nf IS NOT NULL THEN
           CASE WHEN tc.CLISSD_CF IS NULL THEN CAST(tc.CLI_NF AS VARCHAR(100))
                    WHEN tc.CLISSD_CF IS NOT NULL THEN 
                    CASE
                       WHEN rtw4.RETCTR_NF_LVL4 IS NOT NULL THEN rtw4.ASSD_CF_LVL4 || ''' || V_SEP_OPTR || ''' || rtw4.ACCESB_CF_LVL4
                       WHEN rtw3.RETCTR_NF_LVL3 IS NOT NULL THEN rtw3.ASSD_CF_LVL3 || ''' || V_SEP_OPTR || ''' || rtw3.ACCESB_CF_LVL3
                       WHEN rtw2.RETCTR_NF_LVL2 IS NOT NULL THEN rtw2.ASSD_CF_LVL2 || ''' || V_SEP_OPTR || ''' || rtw2.ACCESB_CF_LVL2
                       WHEN rtw1.RETCTR_NF_LVL1 IS NOT NULL THEN rtw1.ASSD_CF_LVL1 || ''' || V_SEP_OPTR || ''' || rtw1.ACCESB_CF_LVL1
                       ELSE NULL 
                   END 
           END
   END AS "Counter_Party_Code",
   PC.ID,
   CASE WHEN PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF THEN TRIM(TS.GRPIFRSSEG_CT) || ''' || V_SEP_OPTR || ''' || TRIM(TS.GRPIFRSSEG1_CT) || ''' || V_SEP_OPTR || ''' || TRIM(TS.GRPINIPRO_CF)
       WHEN PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF THEN TRIM(TSR.GRPIFRSSEG_CT) || ''' || V_SEP_OPTR || ''' || TRIM(TSR.GRPIFRSSEG1_CT) || ''' || V_SEP_OPTR || ''' || TRIM(TSR.GRPINIPRO_CF) 
   END AS "IFRS17_Cohort",
   CASE WHEN PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF THEN TRIM(TS.GRPIFRSSEG_CT)
       WHEN PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF  THEN TRIM(TSR.GRPIFRSSEG_CT)
   END AS "IFRS17_Portfolio",
   CASE WHEN PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF THEN TRIM(TS.GRPIFRSSEG1_CT)
       WHEN PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF  THEN TRIM(TSR.GRPIFRSSEG1_CT)
   END AS "IFRS17_Sub_Portfolio",
   CASE WHEN PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF THEN TRIM(TS.GRPIFRSTRA_CT)
        WHEN PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF  THEN TRIM(TSR.GRPIFRSTRA_CT) 
   END AS "Transition_Mode"        
FROM SESSION.' || V_SESS_DTM_PRJ || ' PC
INNER JOIN BI_<env>.BUSINESS_MATURITY BM ON PC.BUSINESS_MATURITY_ID = BM.ID
LEFT OUTER JOIN SESSION.' || V_SESS_TUWSEC || ' GTU ON PC.ASSUMED_CONTRACT_NUMBER = GTU.CTR_NF AND PC.ASSUMED_SECTION_NUMBER = GTU.SEC_NF
LEFT OUTER JOIN SESSION.' || V_SESS_TUWSEC || ' TU ON PC.CONTRACT_NUMBER = TU.CTR_NF AND PC.SECTION_NUMBER = TU.SEC_NF        
LEFT OUTER JOIN SESSION.' || V_SESS_TUWRETSEC || ' TUR ON PC.CONTRACT_NUMBER = TUR.RETCTR_NF AND PC.SECTION_NUMBER = TUR.RETSEC_NF
LEFT OUTER JOIN BI_<env>.TCLIENT TCLI ON TCLI.CLI_NF = TU.CED_NF
LEFT JOIN (
   SELECT
       AC0SEC,
       AC0CTR
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       AC0SEC,
       AC0CTR 
   )tw1 ON tw1.AC0CTR = tu.CTR_NF AND tw1.AC0SEC = tu.SEC_NF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' cli1 ON cli1.CTR_NF = tw1.AC0CTR AND cli1.SEC_NF = tw1.AC0SEC
LEFT JOIN (
   SELECT
       RESB_CF_LVL1,
       CTR_NF_LVL1,
       RSSD_CF_LVL1,
       SEC_NF_LVL1,
       ASSD_CF_LVL1,
       ACCESB_CF_LVL1,
       AC0CTR,
       AC0SEC
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       RESB_CF_LVL1,
       CTR_NF_LVL1,
       RSSD_CF_LVL1,
       SEC_NF_LVL1,
       ASSD_CF_LVL1,
       ACCESB_CF_LVL1,
       AC0CTR,
       AC0SEC 
   ) tw2 ON tw2.CTR_NF_LVL1 = tu.CTR_NF AND tw2.SEC_NF_LVL1 = tu.SEC_NF AND tw2.ASSD_CF_LVL1 = tu.SSD_CF AND tw2.ACCESB_CF_LVL1 = tu.ACCESB_CF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' cli2 ON cli2.CTR_NF = tw2.AC0CTR AND cli2.SEC_NF = tw2.AC0SEC
LEFT JOIN(
   SELECT
       CTR_NF_LVL2,
       SEC_NF_LVL2,
       ACCESB_CF_LVL2,
       AC0CTR,
       AC0SEC,
       ESB_CF_LVL2,
       RSSD_CF_LVL2,
       ASSD_CF_LVL2
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       CTR_NF_LVL2,
       SEC_NF_LVL2,
       ACCESB_CF_LVL2,
       AC0CTR,
       AC0SEC,
       ESB_CF_LVL2,
       RSSD_CF_LVL2,
       ASSD_CF_LVL2
   ) tw3 ON tw3.CTR_NF_LVL2 = tu.CTR_NF AND tw3.SEC_NF_LVL2 = tu.SEC_NF AND tw3.ASSD_CF_LVL2 = tu.SSD_CF AND tw3.ACCESB_CF_LVL2 = tu.ACCESB_CF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' cli3 ON cli3.CTR_NF = tw3.AC0CTR AND cli3.SEC_NF = tw3.AC0SEC
LEFT JOIN (
   SELECT
       CTR_NF_LVL3,
       SEC_NF_LVL3,
       ASSD_CF_LVL3,
       ACCESB_CF_LVL3,
       ESB_CF_LVL3,
       RSSD_CF_LVL3,
       AC0SEC,
       AC0CTR
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       CTR_NF_LVL3,
       SEC_NF_LVL3,
       ASSD_CF_LVL3,
       ACCESB_CF_LVL3,
       ESB_CF_LVL3,
       RSSD_CF_LVL3,
       AC0SEC,
       AC0CTR
   ) tw4 ON tw4.CTR_NF_LVL3 = tu.CTR_NF AND tw4.SEC_NF_LVL3 = tu.SEC_NF AND tw4.ASSD_CF_LVL3 = tu.SSD_CF AND tw4.ACCESB_CF_LVL3 = tu.ACCESB_CF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' cli4 ON cli4.CTR_NF = tw4.AC0CTR AND cli4.SEC_NF = tw4.AC0SEC
LEFT JOIN (
   SELECT
       ESB_CF_LVL4,
       CTR_NF_LVL4,
       RSSD_CF_LVL4,
       SEC_NF_LVL4,
       ASSD_CF_LVL4,
       ACCESB_CF_LVL4,
       AC0CTR,
       AC0SEC
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       ESB_CF_LVL4,
       CTR_NF_LVL4,
       RSSD_CF_LVL4,
       SEC_NF_LVL4,
       ASSD_CF_LVL4,
       ACCESB_CF_LVL4,
       AC0CTR,
       AC0SEC 
   ) tw5 ON tw5.CTR_NF_LVL4 = tu.CTR_NF AND tw5.SEC_NF_LVL4 = tu.SEC_NF AND tw5.ASSD_CF_LVL4 = tu.SSD_CF AND tw5.ACCESB_CF_LVL4 = tu.ACCESB_CF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' cli5 ON cli5.CTR_NF = tw5.AC0CTR AND cli5.SEC_NF = tw5.AC0SEC
LEFT OUTER JOIN (
   SELECT
       RETCTR_NF,
       RTY_NF,
       RETSEC_NF,
       SSD_CF,
       CTRPCPNAM_LL
   FROM BI_<env>.TUWRETRO
   GROUP BY
       RETCTR_NF,
       RTY_NF,
       RETSEC_NF,
       SSD_CF,
       CTRPCPNAM_LL
   ) TURET ON TURET.RETCTR_NF = TUR.RETCTR_NF AND TURET.RTY_NF = TUR.RTY_NF AND TURET.RETSEC_NF = TUR.RETSEC_NF AND TURET.SSD_CF = TUR.SSD_CF
LEFT OUTER JOIN BI_<env>.TSECTION TSE ON TU.CTR_NF = TSE.CTR_NF AND TU.SEC_NF = TSE.SEC_NF AND TU.END_NT = TSE.END_NT AND TU.UWY_NF = TSE.UWY_NF AND TU.UW_NT = TSE.UW_NT AND TU.SSD_CF = TSE.SSD_CF
LEFT OUTER JOIN BI_<env>.TUWCTR TUWC ON TUWC.CTR_NF = TU.CTR_NF AND TUWC.UWY_NF = TU.UWY_NF AND TUWC.UW_NT = TU.UW_NT AND TUWC.END_NT = TU.END_NT AND TUWC.SSD_CF = TU.SSD_CF AND TUWC.END_D = TU.END_D AND TUWC.SUPP_D = TU.SUPP_D
LEFT OUTER JOIN BI_<env>.TCONTR TCO ON TCO.CTR_NF = TUWC.CTR_NF AND TCO.UWY_NF = TUWC.UWY_NF AND TCO.UW_NT = TUWC.UW_NT AND TCO.END_NT = TUWC.END_NT AND TCO.SSD_CF = TUWC.SSD_CF
LEFT OUTER JOIN BI_<env>.TRETSEC TRETS ON TRETS.RETCTR_NF = TUR.RETCTR_NF AND TRETS.RTY_NF = TUR.RTY_NF AND TRETS.SSD_CF = TUR.SSD_CF AND TRETS.RETSEC_NF = TUR.RETSEC_NF AND TRETS.SUPP_D = ''9999-12-31'' AND TUR.END_D = ''9999-12-31''
LEFT OUTER JOIN BI_<env>.TRETCTR TRET ON TRETS.RTY_NF = TRET.RTY_NF AND TRETS.RETCTR_NF = TRET.RETCTR_NF AND TRETS.SSD_CF = TRET.SSD_CF AND TRETS.SUPP_D = ''9999-12-31''
LEFT OUTER JOIN BI_<env>.TBANALL TBANA3 ON TBANA3.COLVAL_CT = CAST(TCO.POLDUR_CF AS VARCHAR(80)) AND TBANA3.COL_LS = ''POLDUR_CF'' AND TBANA3.LAG_CF = ''E''   
LEFT OUTER JOIN BI_<env>.TCTRNATL TCT ON COALESCE(TU.NAT_CF, TUR.NAT_CF) = TCT.CTRNAT_CF AND TCT.LAG_CF = ''E''   
LEFT OUTER JOIN SESSION.' || V_SESS_TPLACEMT || ' TP ON TUR.RETCTR_NF = TP.RETCTR_NF AND TUR.SSD_CF = TP.SSD_CF
LEFT JOIN BI_<env>.TCLIENT tc ON TC.CLI_NF = TP.RTO_NF
LEFT JOIN (
   SELECT
       ACCESB_CF_LVL1,
       RETCTR_NF_LVL1,
       ASSD_CF_LVL1,
       AC0SEC,
       AC0CTR
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       ACCESB_CF_LVL1,
       RETCTR_NF_LVL1,
       ASSD_CF_LVL1,
       AC0SEC,
       AC0CTR
   ) rtw1 ON rtw1.RETCTR_NF_LVL1 = tp.RETCTR_NF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' rcli1 ON rcli1.CTR_NF = rtw1.AC0CTR AND rcli1.SEC_NF = rtw1.AC0SEC
LEFT JOIN (
   SELECT
       AC0CTR,
       RETCTR_NF_LVL2,
       AC0SEC,
       ACCESB_CF_LVL2,
       ASSD_CF_LVL2
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       AC0CTR,
       AC0SEC,
       ACCESB_CF_LVL2,
       RETCTR_NF_LVL2,
       ASSD_CF_LVL2
   ) rtw2 ON rtw2.RETCTR_NF_LVL2 = tp.RETCTR_NF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' rcli2 ON rcli2.CTR_NF = rtw2.AC0CTR AND rcli2.SEC_NF = rtw2.AC0SEC
LEFT JOIN (
   SELECT
       RETCTR_NF_LVL3,
       AC0SEC,
       ACCESB_CF_LVL3 ,
       ASSD_CF_LVL3,
       AC0CTR
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       RETCTR_NF_LVL3,
       AC0SEC,
       ACCESB_CF_LVL3 ,
       ASSD_CF_LVL3,
       AC0CTR
   ) rtw3 ON rtw3.RETCTR_NF_LVL3 = tp.RETCTR_NF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' rcli3 ON rcli3.CTR_NF = rtw3.AC0CTR AND rcli3.SEC_NF = rtw3.AC0SEC
LEFT JOIN (
   SELECT
       AC0CTR,
       AC0SEC,
       RETCTR_NF_LVL4,
       ASSD_CF_LVL4,
       ACCESB_CF_LVL4
   FROM BI_<env>.TWRETRO_LINKS_FINAL
   GROUP BY
       AC0CTR,
       AC0SEC,
       RETCTR_NF_LVL4,
       ASSD_CF_LVL4,
       ACCESB_CF_LVL4 
   ) rtw4 ON rtw4.RETCTR_NF_LVL4 = tp.RETCTR_NF
LEFT JOIN SESSION.' || V_SESS_TUWSEC || ' rcli4 ON rcli4.CTR_NF = rtw4.AC0CTR AND rcli4.SEC_NF = rtw4.AC0SEC 
   LEFT OUTER JOIN BI_<env>.TSECIFRS  TS ON TU.CTR_NF =TS.CTR_NF AND TU.UWY_NF=TS.UWY_NF AND TU.SSD_CF=TS.SSD_CF AND TU.UW_NT=TS.UW_NT AND TU.SEC_NF=TS.SEC_NF AND TU.END_NT=TS.END_NT
   LEFT OUTER JOIN BI_<env>.TRETIFRS TSR ON TUR.RETCTR_NF=TSR.RETCTR_NF AND TUR.RTY_NF=TSR.RTY_NF                
   WHERE (tu.ctr_nf <> '''' OR tu.ctr_nf IS NOT NULL) 
   AND (tu.ctr_nf <> '''' OR tu.ctr_nf IS NOT NULL)        
   )
';

V_QUERY_3 = 'INSERT INTO SESSION' || '.' || V_SESS_CTRPTY_CODE || ' ' || V_QUERY_2;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DELETE  FROM  ' || P_STG_SCHEMA || '.' || P_DIP_LRM_TRTY_ATTR ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_2 = '
SELECT 
     t1.ID
    ,t1."Treaty_Number"
    ,t1."Section_Number"
    ,t1."Treaty_Section_Name"
    ,t1."Policy_Underwriting_Year"
    ,t1."Subsidiary_Code"
    ,t1."Ledger_Code"
    ,t1."Region_Code"
    ,t1."Treaty_Life_Characteristic_Code"
    ,t1."Financing_Type_Code"
    ,t1."IAS39_Code"
    ,t1."USGAAP_Code"
    ,t1."Coinsurance_Code"
    ,t1."Type_Of_Business_Code"
    ,t1."Omega_LoB_Code"
    ,t1."Guarantee_Code"
    ,t1."Policy_Type_Code"
    ,t1."Nature_Code"
    ,t1."Basis_Type"
    ,LISTAGG(t2."Counter_Party_Code",''' || V_TILT_VAL || ''') AS "Counter_Party_Code"
    ,t1."Actuarial_Model_Type_Code"
    ,t1."Client_Code"
    ,t1."Term_Type_Code"
    ,t1."Business_Maturity_Code"
    ,t1."Business_Maturity_Flag"
    ,t1."Market_Unit_Code"
    ,t1."Gross_Assumed_Treaty_Number"
    ,t1."Gross_Assumed_Section_Number"
    ,t1."Closing_Date"
    ,t1."Reporting_Basis_Code"
    ,t2."IFRS17_Cohort"
    ,t2."IFRS17_Portfolio"
    ,t2."IFRS17_Sub_Portfolio"
    ,t2."Transition_Mode"
    ,t1."Initial_Profitability"
    ,t1."Annual_Cohort"
    ,t1."Split"
FROM SESSION' || '.' || V_SESS_WRK_TREATY || ' t1 
LEFT OUTER JOIN SESSION' || '.' || V_SESS_CTRPTY_CODE || ' t2 ON t1.ID = t2.ID 
GROUP BY 
     t1.ID
    ,t1."Treaty_Number"
    ,t1."Section_Number"
    ,t1."Treaty_Section_Name"
    ,t1."Policy_Underwriting_Year"
    ,t1."Subsidiary_Code"
    ,t1."Ledger_Code"
    ,t1."Region_Code"
    ,t1."Treaty_Life_Characteristic_Code"
    ,t1."Financing_Type_Code"
    ,t1."IAS39_Code"
    ,t1."USGAAP_Code"
    ,t1."Coinsurance_Code"
    ,t1."Type_Of_Business_Code"
    ,t1."Omega_LoB_Code"
    ,t1."Guarantee_Code"
    ,t1."Policy_Type_Code"
    ,t1."Nature_Code"
    ,t1."Basis_Type"
    ,t2."Counter_Party_Code"
    ,t1."Actuarial_Model_Type_Code"
    ,t1."Client_Code"
    ,t1."Term_Type_Code"
    ,t1."Business_Maturity_Code"
    ,t1."Business_Maturity_Flag"
    ,t1."Market_Unit_Code"
    ,t1."Gross_Assumed_Treaty_Number"
    ,t1."Gross_Assumed_Section_Number"
    ,t1."Closing_Date"
    ,t1."Reporting_Basis_Code"
    ,t2."IFRS17_Cohort"
    ,t2."IFRS17_Portfolio"
    ,t2."IFRS17_Sub_Portfolio"
    ,t2."Transition_Mode"
    ,t1."Initial_Profitability"
    ,t1."Annual_Cohort"
    ,t1."Split"
';

V_QUERY_3 = 'INSERT INTO ' || P_STG_SCHEMA || '.' || P_DIP_LRM_TRTY_ATTR || ' ' || V_QUERY_2;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

EXECUTE IMMEDIATE 'DROP TABLE SESSION.'|| V_SESS_DTM_PRJ || '_HELPER  IF EXISTS';

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_DTM_PRJ ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_TUWRETSEC ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_TUWSEC ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_TPLACEMT ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_WRK_TREATY ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

V_QUERY_3 = 'DROP TABLE SESSION.' || V_SESS_CTRPTY_CODE ;
RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
EXECUTE IMMEDIATE V_QUERY_3;

EXCEPTION WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
    L_ERR_MSG := SQLERRM; 
    RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
    RETURN L_ERR_CD; 
 
END; 

END_PROC;