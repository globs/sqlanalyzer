SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_WRK_APAC_DWH_PROJECTION;

CREATE OR REPLACE PROCEDURE SP_LOAD_WRK_APAC_DWH_PROJECTION (BIGINT,CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64)) RETURNS INTEGER 
LANGUAGE nzplsql AS 
BEGIN_PROC 

DECLARE 
    P_REQUEST_ID            ALIAS FOR $1;
    P_SRC_SCHEMA            ALIAS FOR $2;
    P_SRC_TABLE             ALIAS FOR $3;
    P_TRG_SCHEMA            ALIAS FOR $4;
    P_TRG_TABLE             ALIAS FOR $5;
    P_HIST_MODE             ALIAS FOR $6;
    L_ERR_CD                CHAR(5);
    L_ERR_MSG               VARCHAR(32000);
    V_REC                   RECORD;
    V_DELETE_QUERY          VARCHAR(32000);
    V_INSERT_QUERY          VARCHAR(32000);
    V_ASSUMED_TEMP_QUERY    VARCHAR(32000);
    V_RETRO_TEMP_QUERY      VARCHAR(32000);
    

BEGIN
SET ISOLATION TO UR;

V_ASSUMED_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_APAC IF EXISTS';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 

V_ASSUMED_TEMP_QUERY := 'CREATE TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_APAC AS 
(
SELECT
    CTR_NF,
    SEC_NF,
    MAX(UWY_NF) ASSUMED
FROM
    (
    SELECT
        SSD_CF,
        ACCESB_CF,
        CTR_NF,
        SEC_NF,
        SECSTS_CT,
        ACCADMTYP_CT,
        LIFPRDLINA_LL,
        BUSUNIT_LM,
        SUBMRK_LS,
        UWY_NF,
        ROW_NUMBER() OVER (PARTITION BY SSD_CF,ACCESB_CF,CTR_NF,SEC_NF,SECSTS_CT,ACCADMTYP_CT,LIFPRDLINA_LL,BUSUNIT_LM,SUBMRK_LS ORDER BY UWY_NF DESC) rank1
    FROM
        BI_<env>.TUWSEC
    WHERE
        LOB_CF IN (30,31)
        AND SECSTS_CT IN (14,16,19)
        AND SECACCSTS_CT NOT IN (9,8)
        AND BUSUNIT_LM IS NOT NULL
        AND DATE(END_D) = ''9999-12-31''
        AND DATE(SUPP_D)=''9999-12-31''
    )
WHERE rank1 = 1
GROUP BY CTR_NF,SEC_NF 
)
WITH DATA DISTRIBUTE ON RANDOM
';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 

V_RETRO_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_APAC IF EXISTS';

EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 
V_RETRO_TEMP_QUERY := 'CREATE TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_APAC AS 
(
SELECT
    RETCTR_NF,
    RETSEC_NF,
    MAX(rty_nf) AS retro_value
FROM(
    SELECT
        TWT.RETCTR_NF,
        TWT.RETSEC_NF,
        TWT.RTY_NF,
        ROW_NUMBER() OVER (PARTITION BY TWT.SSD_CF,TWT.ESB_CF,TWT.RETCTR_NF,TWT.RETSEC_NF,DTT.RETCTRSTS_CT,DTT.RETACCTYP_CT,TWT.LIFPRDLINR_LL,TWT.MRKUNT_LS, TWT.SUBMRK_LS ORDER BY TWT.RTY_NF DESC) rank1
    FROM BI_<env>.TUWRETSEC TWT
    RIGHT JOIN BI_<env>.TRETCTR DTT ON (TWT.RETCTR_NF = DTT.RETCTR_NF AND TWT.RTY_NF = DTT.RTY_NF)
    WHERE
        TWT.LOB_CF IN (30,31)
        AND DTT.RETCTRSTS_CT IN (3,19)
        AND TWT.LIFPRDLINR_LL IS NOT NULL
        AND DATE(TWT.END_D) = ''9999-12-31''
        AND DATE(SUPP_D)=''9999-12-31'' 
    )
WHERE rank1 = 1
GROUP BY RETCTR_NF,RETSEC_NF
)
WITH DATA DISTRIBUTE ON RANDOM
';
EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 

V_DELETE_QUERY := 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE REQUEST_ID =' || P_REQUEST_ID || ' ';

V_INSERT_QUERY :=  'INSERT INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || '
(   CONTRACT_NUMBER,
    SECTION_NUMBER,
    ASSUMED_CONTRACT_NUMBER,
    ASSUMED_SECTION_NUMBER,
    UNDERWRITING_ORDER,
    ENDORSEMENT_NUMBER,
    AOC_STEP,
    LEVEL_OF_ANALYSIS_ID,
    SENSITIVITY_TYPE,
    SCENARIO_TYPE_ID,
    SENSITIVITY_VALUE,
    SCENARIO_PARAMETER,
    POLICY_UW_YEAR,
    UNDERWRITING_YEAR,
    BUSINESS_MATURITY,
    BUSINESS_MATURITY_ID,
    POSITION,
    POSITION_ID,
    CURRENCY_CODE,
    BASIS,
    REPORTING_BASIS_ID,
    CLOSING_DATE,
    HISTORIZATION_MODE,
    P_TIME,
    PROJECTION_YEAR,
    PROJECTION_MONTH,
    PROJECTION_DATE,
    PERIOD_TYPE_ID,
    AMOUNT,
    CREATED_BY,
    CREATED_DATE,
    LINE_NUMBER,
    REQUEST_ID,
    SOURCE_REF_NAME
)
SELECT
	WRK.CONTRACT_NUMBER,
	WRK.SECTION_NUMBER,
	CASE WHEN LENGTH(WRK.ASSUMED_CONTRACT_NUMBER) > 0 THEN WRK.ASSUMED_CONTRACT_NUMBER END AS ASSUMED_CONTRACT_NUMBER,
	WRK.ASSUMED_SECTION_NUMBER,
	CASE WHEN ra.CTR_NF IS NOT NULL THEN 1 END AS UNDERWRITING_ORDER,
	CASE WHEN ra.CTR_NF IS NOT NULL THEN 0 END AS ENDORSEMENT_NUMBER,
	WRK.AOC_STEP,
	CASE WHEN LVL.ID IS NOT NULL THEN LVL.ID ELSE 9999 END AS LEVEL_OF_ANALYSIS_ID,
	WRK.SENSITIVITY_TYPE,
	CASE WHEN SCN.ID IS NOT NULL THEN SCN.ID ELSE 9999 END AS SCENARIO_TYPE_ID,
	WRK.SENSITIVITY_VALUE,
	WRK.SENSITIVITY_VALUE AS SCENARIO_PARAMETER,
	WRK.POLICY_UWY,
	CASE WHEN RET.RETRO_VALUE IS NOT NULL THEN RET.RETRO_VALUE ELSE  DTW.ASSUMED	END AS UNDERWRITING_YEAR,
	WRK.BUSINESS_MATURITY,
	CASE WHEN DM.ID IS NOT NULL THEN DM.ID ELSE 9999 END AS BUSINESS_MATURITY_ID,
	WRK.POSITION,
	WRK.POSITION_ID,
	UCASE(CURRENCY)             AS CURRENCY_CODE,
	WRK.REPORTING_BASIS,
	CASE WHEN RB.ID IS NOT NULL THEN RB.ID ELSE 9999 END AS REPORTING_BASIS_ID,
	WRK.CLOSING_DATE,
    ''' || P_HIST_MODE || '''   AS HISTORIZATION_MODE,
	P_TIME,	
	YEAR(P_TIME)                AS PROJECTION_YEAR,
	MONTH(P_TIME)               AS PROJECTION_MONTH,
	LAST_DAY(P_TIME)            AS PROJECTION_DATE,
	PT.ID                       AS PERIOD_TYPE_ID,
	AMOUNT,
	WRK.CREATED_BY,
	WRK.CREATED_DATE,
	LINE_NUMBER,
	REQUEST_ID,
	''APAC PROPHET''            AS SOURCE_REF_NAME	  
FROM
	(
	SELECT
		WRK.JOIN_KEY,
		WRK.PRODUCT,
		WRK.CONTRACT_NUMBER,
		WRK.SECTION_NUMBER,
		WRK.ASSUMED_CONTRACT_NUMBER,
		WRK.ASSUMED_SECTION_NUMBER,
		WRK.RUN_NUMBER,
		WRK.AOC_STEP,
		WRK.SENSITIVITY_TYPE,
		WRK.SENSITIVITY_VALUE,
		WRK.SPCODE,
		WRK.POLICY_UWY,
		WRK.BUSINESS_MATURITY,
		WRK.NEW_BUSINESS,
		WRK.CLOSING_DATE,
		WRK.P_PERIOD,
		WRK.P_TIME,
		WRK.REPORTING_BASIS,
		WRK.CURRENCY,
		POS.NAME AS POSITION,
		POS.POSITION_ID,
		WRK.AMOUNT,
		WRK.CREATED_BY,
		WRK.CREATED_DATE,
		WRK.LINE_NUMBER,
		WRK.REQUEST_ID
	FROM (
        WITH T(POSITION_CODE) as 
        (VALUES 
            (''PREM_WRITTEN''),
            (''CLAIMS_INCURRED''),
            (''CLAIMS_FROM_IBNP''),
            (''COLLATERAL_COST''),
            (''TOT_COMM''),
            (''FIN_COMM''),
            (''FIN_BROK_FEE''),
            (''RETRO_OVERRIDE_COMM''),
            (''PS_TOTAL_ALLOCATION''),
            (''DEP_MATH_RES_IF''),
            (''DEP_UNEARN_PREM_RES_IF''),
            (''DEP_INC_RISK_RES_IF''),
            (''NDEP_MATH_RES_IF''),
            (''NDEP_UNEARN_PREM_RES_IF''),
            (''NDEP_INC_RISK_RES_IF''),
            (''DEP_IBNP_RES_IF''),
            (''NDEP_IBNP_RES_IF''),
            (''DAC_IF''),
            (''RES_DEPINT''),
            (''RES_NONDEPINT''),
            (''TOT_REN_EXP''),
            (''TOT_ACQ_EXP''),
            (''TOT_INV_EXP''),
            (''TAX''),
            (''SUM_ASSD_IF''),
            (''VOBA''),
            (''PV_PS_TOTAL_ALLOCATION''),
            (''PREM_TAX''),
            (''PREM_REFUND''),
            (''INIT_COMM''),
            (''COMM_CLAWBACK''),
            (''REN_COMM''),
            (''REN_EXP_ATTRIBUTABLE''),
            (''ACQ_EXP_ATTRIBUTABLE''),
            (''INV_EXP_ATTRIBUTABLE''),
            (''CLAIM_EXP_ATTRIBUTABLE''),
            (''REN_EXP_NONATTRIBUTABLE''),
            (''ACQ_EXP_NONATTRIBUTABLE''),
            (''INV_EXP_NONATTRIBUTABLE''),
            (''CLAIM_EXP_NONATTRIBUTABLE''),
            (''COVERAGE_UNITS'') 
        )
        SELECT
            S.JOIN_KEY,
            S.PRODUCT,
            S.CONTRACT_NUMBER,
            S.SECTION_NUMBER,
            S.ASSUMED_CONTRACT_NUMBER,
            S.ASSUMED_SECTION_NUMBER,
            S.RUN_NUMBER,
            S.AOC_STEP,
            S.SENSITIVITY_TYPE,
            S.SENSITIVITY_VALUE,
            S.SPCODE,
            S.POLICY_UWY,
            S.BUSINESS_MATURITY,
            S.NEW_BUSINESS,
            S.CLOSING_DATE,
            S.P_PERIOD,
            S.P_TIME,
            S.REPORTING_BASIS,
            S.CURRENCY,
            T.POSITION_CODE AS POSITION,
            CASE T.POSITION_CODE
                WHEN ''PREM_WRITTEN'' THEN S.PREM_WRITTEN
                WHEN ''CLAIMS_INCURRED'' THEN S.CLAIMS_INCURRED
                WHEN ''CLAIMS_FROM_IBNP'' THEN S.CLAIMS_FROM_IBNP
                WHEN ''COLLATERAL_COST'' THEN S.COLLATERAL_COST
                WHEN ''TOT_COMM'' THEN S.TOT_COMM
                WHEN ''FIN_COMM'' THEN S.FIN_COMM
                WHEN ''FIN_BROK_FEE'' THEN S.FIN_BROK_FEE
                WHEN ''RETRO_OVERRIDE_COMM'' THEN S.RETRO_OVERRIDE_COMM
                WHEN ''PS_TOTAL_ALLOCATION'' THEN S.PS_TOTAL_ALLOCATION
                WHEN ''DEP_MATH_RES_IF'' THEN S.DEP_MATH_RES_IF
                WHEN ''DEP_UNEARN_PREM_RES_IF'' THEN S.DEP_UNEARN_PREM_RES_IF
                WHEN ''DEP_INC_RISK_RES_IF'' THEN S.DEP_INC_RISK_RES_IF
                WHEN ''NDEP_MATH_RES_IF'' THEN S.NDEP_MATH_RES_IF
                WHEN ''NDEP_UNEARN_PREM_RES_IF'' THEN S.NDEP_UNEARN_PREM_RES_IF
                WHEN ''NDEP_INC_RISK_RES_IF'' THEN S.NDEP_INC_RISK_RES_IF
                WHEN ''DEP_IBNP_RES_IF'' THEN S.DEP_IBNP_RES_IF
                WHEN ''NDEP_IBNP_RES_IF'' THEN S.NDEP_IBNP_RES_IF
                WHEN ''DAC_IF'' THEN S.DAC_IF
                WHEN ''RES_DEPINT'' THEN S.RES_DEPINT
                WHEN ''RES_NONDEPINT'' THEN S.RES_NONDEPINT
                WHEN ''TOT_REN_EXP'' THEN S.TOT_REN_EXP
                WHEN ''TOT_ACQ_EXP'' THEN S.TOT_ACQ_EXP
                WHEN ''TOT_INV_EXP'' THEN S.TOT_INV_EXP
                WHEN ''TAX'' THEN S.TAX
                WHEN ''SUM_ASSD_IF'' THEN S.SUM_ASSD_IF
                WHEN ''VOBA'' THEN S.VOBA
                WHEN ''PV_PS_TOTAL_ALLOCATION'' THEN S.PV_PS_TOTAL_ALLOCATION
                WHEN ''PREM_TAX'' THEN S.PREM_TAX
                WHEN ''PREM_REFUND'' THEN S.PREM_REFUND
                WHEN ''INIT_COMM'' THEN S.INIT_COMM
                WHEN ''COMM_CLAWBACK'' THEN S.COMM_CLAWBACK
                WHEN ''REN_COMM'' THEN S.REN_COMM
                WHEN ''REN_EXP_ATTRIBUTABLE'' THEN S.REN_EXP_ATTRIBUTABLE
                WHEN ''ACQ_EXP_ATTRIBUTABLE'' THEN S.ACQ_EXP_ATTRIBUTABLE
                WHEN ''INV_EXP_ATTRIBUTABLE'' THEN S.INV_EXP_ATTRIBUTABLE
                WHEN ''CLAIM_EXP_ATTRIBUTABLE'' THEN S.CLAIM_EXP_ATTRIBUTABLE
                WHEN ''REN_EXP_NONATTRIBUTABLE'' THEN S.REN_EXP_NONATTRIBUTABLE 
                WHEN ''ACQ_EXP_NONATTRIBUTABLE'' THEN S.ACQ_EXP_NONATTRIBUTABLE 
                WHEN ''INV_EXP_NONATTRIBUTABLE'' THEN S.INV_EXP_NONATTRIBUTABLE
                WHEN ''CLAIM_EXP_NONATTRIBUTABLE'' THEN S.CLAIM_EXP_NONATTRIBUTABLE 
                WHEN ''COVERAGE_UNITS'' THEN S.COVERAGE_UNITS
            ELSE NULL END                                               AS  AMOUNT,
            S.CREATED_BY,
            S.CREATED_DATE,
            S.LINE_NUMBER,
            S.REQUEST_ID
        FROM ' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || ' AS S
        INNER JOIN T ON NVL(MOD(LENGTH(T.POSITION_CODE), 1), 0) = NVL(MOD(LENGTH(S.NEW_BUSINESS), 1), 0)
        ) WRK
        INNER JOIN (
            SELECT
				POS.NAME ,
                POS.CODE ,
                PM.POSITION_ID
            FROM BI_<env>.POSITION pos
            INNER JOIN BI_<env>.POSITION_MAPPING PM ON POS.ID = PM.MAPPING_POSITION_ID  AND DATE(POS.VALID_TO) = ''9999-12-31'' AND DATE(pm.VALID_TO) = ''9999-12-31''
            INNER JOIN BI_<env>.POSITION_TYPE PT ON PT.ID=POS.POSITION_TYPE_ID AND PT.CODE = ''APAC''   
            ) POS ON (UCASE(POS.CODE) = UCASE(WRK.POSITION))
    ) WRK
LEFT OUTER JOIN ' || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_APAC  DTW ON (WRK.CONTRACT_NUMBER = DTW.CTR_NF AND WRK.SECTION_NUMBER = DTW.SEC_NF)
LEFT OUTER JOIN ' || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_APAC RET ON (WRK.CONTRACT_NUMBER = RET.RETCTR_NF   AND WRK.SECTION_NUMBER = RET.RETSEC_NF)
LEFT OUTER JOIN BI_<env>.SCENARIO_TYPE SCN ON (UCASE(SCN.NAME) = UCASE(WRK.SENSITIVITY_TYPE) AND DATE(SCN.VALID_TO) = ''9999-12-31'')
LEFT OUTER JOIN BI_<env>.LEVEL_OF_ANALYSIS LVL ON (UCASE( LVL.NAME) = UCASE(WRK.AOC_STEP) AND DATE(LVL.VALID_TO) = ''9999-12-31'')
LEFT OUTER JOIN BI_<env>.BUSINESS_MATURITY DM ON (UCASE(DM.NAME) = UCASE(WRK.BUSINESS_MATURITY))
LEFT OUTER JOIN BI_<env>.REPORTING_BASIS RB ON (UCASE(RB.NAME) = UCASE(WRK.REPORTING_BASIS))
LEFT OUTER JOIN BI_<env>.PERIOD_TYPE PT ON  (PT.CODE = ''M'')
LEFT OUTER JOIN (
        SELECT
            CTR_NF
        FROM
            BI_<env>.TCONTR
        GROUP BY
            CTR_NF
    ) RA ON ( RA.CTR_NF = WRK.CONTRACT_NUMBER)
WHERE WRK.REQUEST_ID = ' || P_REQUEST_ID || '
';

RAISE NOTICE 'Executing V_DELETE_QUERY: ''%''',V_DELETE_QUERY; 
EXECUTE IMMEDIATE V_DELETE_QUERY; 

RAISE NOTICE 'Executing V_INSERT_QUERY: ''%''',V_INSERT_QUERY;
EXECUTE IMMEDIATE V_INSERT_QUERY;

V_ASSUMED_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_APAC IF EXISTS';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 

V_RETRO_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_APAC IF EXISTS';
EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 

EXCEPTION WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;