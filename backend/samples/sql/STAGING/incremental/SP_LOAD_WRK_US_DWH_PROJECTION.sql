SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_WRK_US_DWH_PROJECTION;

CREATE OR REPLACE PROCEDURE SP_LOAD_WRK_US_DWH_PROJECTION (BIGINT,CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64),CHARACTER VARYING(64)) RETURNS INTEGER 
LANGUAGE nzplsql AS 
BEGIN_PROC 

DECLARE 
    P_REQUEST_ID            ALIAS FOR $1;
    P_SRC_SCHEMA            ALIAS FOR $2;
    P_SRC_TABLE             ALIAS FOR $3;
    P_TRG_SCHEMA            ALIAS FOR $4;
    P_TRG_TABLE             ALIAS FOR $5;
    P_HIST_MODE             ALIAS FOR $6;
    L_ERR_CD                CHAR(5);
    L_ERR_MSG               VARCHAR(32000);
    V_REC                   RECORD;
    V_DELETE_QUERY          VARCHAR(32000);
    V_INSERT_QUERY          VARCHAR(32000);
    V_ASSUMED_TEMP_QUERY    VARCHAR(32000);
    V_RETRO_TEMP_QUERY      VARCHAR(32000);
    A_FILTER                VARCHAR(32000);
    
BEGIN
SET ISOLATION TO UR;

IF P_HIST_MODE= 'INCREMENTAL' THEN     
    A_FILTER := '';  
ELSEIF  P_HIST_MODE= 'FULL' THEN 
   A_FILTER := ' WHERE (X.AMOUNT <> 0 OR (X.POSITION_CODE = ''PREMIUMS'' AND X.AMOUNT = 0)) '; 
END IF;

V_ASSUMED_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_US IF EXISTS';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 

V_ASSUMED_TEMP_QUERY := 'CREATE TABLE ' || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_US AS 
(     SELECT
            CTR_NF,
            SEC_NF,
            MAX(UWY_NF) AS ASSUMED
        FROM
            BI_<env>.TUWSEC
        WHERE
            LOB_CF IN (30,31)
            AND SECSTS_CT IN (14,16,19)
            AND SECACCSTS_CT NOT IN (9,8)
            AND BUSUNIT_LM IS NOT NULL
            AND DATE(END_D) = ''9999-12-31''
            AND DATE(SUPP_D)=''9999-12-31''
        GROUP BY CTR_NF,SEC_NF) 
WITH DATA DISTRIBUTE ON RANDOM
';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 


V_RETRO_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_US  IF EXISTS';

EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 
V_RETRO_TEMP_QUERY := 'CREATE TABLE ' || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_US AS 
(     SELECT
            TWT.RETCTR_NF,
            TWT.RETSEC_NF,
            MAX(TWT.RTY_NF) RETRO_VALUE
        FROM
            BI_<env>.TUWRETSEC TWT
        RIGHT JOIN BI_<env>.TRETCTR DTT ON (TWT.RETCTR_NF = DTT.RETCTR_NF    AND TWT.RTY_NF = DTT.RTY_NF)
        WHERE
            TWT.LOB_CF IN (30,31)
            AND DTT.RETCTRSTS_CT IN (3,19)
            AND TWT.LIFPRDLINR_LL IS NOT NULL
            AND DATE(TWT.END_D) = ''9999-12-31''
            AND DATE(SUPP_D)=''9999-12-31''
        GROUP BY TWT.RETCTR_NF, TWT.RETSEC_NF )
WITH DATA DISTRIBUTE ON RANDOM
';
EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 

V_DELETE_QUERY := 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE REQUEST_ID =' || P_REQUEST_ID || ' ';

V_INSERT_QUERY :=  'INSERT     INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || '
(   
    CONTRACT_NUMBER,
    SECTION_NUMBER,
    ASSUMED_CONTRACT_NUMBER,
    ASSUMED_SECTION_NUMBER,
    UNDERWRITING_ORDER,
    ENDORSEMENT_NUMBER,
    AOC_STEP,
    LEVEL_OF_ANALYSIS_ID,
    SENSITIVITY_TYPE,
    SCENARIO_TYPE_ID,
    SENSITIVITY_VALUE,
    SCENARIO_PARAMETER,
    UNDERWRITING_YEAR,
    BUSINESS_MATURITY,
    NEW_BUSINESS_IND,
    BUSINESS_MATURITY_ID,
    POSITION,
    POSITION_ID,
    CURRENCY_CODE,
    BASIS,
    REPORTING_BASIS_ID,
    CLOSING_DATE,
    HISTORIZATION_MODE,
    PROJECTION_MONTH,
    PROJECTION_YEAR,
    PROJECTION_DATE,
    PERIOD_TYPE_ID,
    AMOUNT,
    CREATED_BY,
    CREATED_DATE,
    LINE_NUMBER,
    REQUEST_ID,
    SOURCE_REF_NAME,
    SPLIT,
    SPLIT_TYPE_ID
)
SELECT
    CONTRACT_NUMBER,
    SECTION_NUMBER,
    ASSUMED_CONTRACT_NUMBER,
    ASSUMED_SECTION_NUMBER,
    UNDERWRITING_ORDER,
    ENDORSEMENT_NUMBER,
    AOC_STEP,
    LEVEL_OF_ANALYSIS_ID,
    SENSITIVITY_TYPE,
    SCENARIO_TYPE_ID,
    SENSITIVITY_VALUE,
    SCENARIO_PARAMETER,
    UNDERWRITING_YEAR,
    BUSINESS_MATURITY,
    NEW_BUSINESS_IND,
    BUSINESS_MATURITY_ID,
    POSITION,
    POSITION_ID,
    CURRENCY_CODE,
    BASIS,
    REPORTING_BASIS_ID,
    CLOSING_DATE,
    HISTORIZATION_MODE,
    PROJECTION_MONTH,
    PROJECTION_YEAR,
    PROJECTION_DATE,
    PERIOD_TYPE_ID,
    AMOUNT,
    CREATED_BY,
    CREATED_DATE,
    LINE_NUMBER,
    REQUEST_ID,
    SOURCE_REF_NAME,
    SPLIT,
    SPLIT_TYPE_ID
FROM (
    WITH T(POSITION_CODE) as 
    (VALUES 
        (''ACQ_EXP''),
        (''CL_PAY_IBNP_RES''),
        (''CLAIMS''),
        (''COLLATERAL_COSTS''),
        (''COMMISSIONS''),
        (''DAC''),
        (''DEP_IBNP_RES''),
        (''DEP_MATH_RES''),
        (''IFRS_RES_BEN''),
        (''IFRS_RES_DAC''),
        (''IFRS17_ATTR_EXP''),
        (''IFRS17_NON_ATTRIBUTABLE_EXPENSES''),
        (''INIT_COMM''),
        (''INT_ON_DEP''),
        (''INT_IN_B_RES_DAC''),
        (''INVEST_EXP''),
        (''MAINT_EXP''),
        (''MAINT_EXP_NO_INF''),
        (''NET_INVEST_INC''),
        (''NON_HE_R_BAS_CAP''),
        (''NON_DEP_MATH_RES''),
        (''NON_DEP_IBNP_RES''),
        (''OTH_INCOM_CON_CF''),
        (''OTH_OUT_CONT_CF''),
        (''PLT_CLAIMS''),
        (''PLT_COMMISSION''),
        (''PLT_PREMIUMS''),
        (''PLT_SUM_ASSURED ''),
        (''PLT_SURRENDERS''),
        (''PLT_NO_POLS_IF''),
        (''PREMIUMS''),
        (''PROFIT_COMM''),
        (''REN_COMM''),
        (''REQUIRED_CAPITAL''),
        (''RA_SUM_ASSURED''),
        (''SUM_ASSURED''),
        (''SURRENDERS''),
        (''TAX''),
        (''TAX_RES''),
        (''TOTAL_INFLATION''),
        (''US_GAAP_RES_BEN''),
        (''US_GAAP_RES_DAC''),
        (''US_STATUTORY_RES''),
        (''IFRS17_ATTR_EXP_EUR''),
        (''IFRS17_NON_ATTRIBUTABLE_EXPENSES_EUR''),
        (''MAINT_EXP_EUR''),
        (''TAX_EUR''),
        (''COVERAGE_UNITS''),
        (''NDIC_ACTUAL''),
        (''NDIC_ESTIMATED'')
    )
    SELECT
        CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='''') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR S.RETRO_OMEGA_SECTION_NUMBER=0) THEN S.OMEGA_TREATY_NUMBER 
            ELSE S.RETRO_OMEGA_TREATY_NUMBER END                        AS CONTRACT_NUMBER,
        CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='''') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR S.RETRO_OMEGA_SECTION_NUMBER=0) THEN S.OMEGA_SECTION_NUMBER
            ELSE S.RETRO_OMEGA_SECTION_NUMBER END                       AS SECTION_NUMBER,
        CASE WHEN LENGTH(OMEGA_TREATY_NUMBER) > 0 THEN OMEGA_TREATY_NUMBER END AS ASSUMED_CONTRACT_NUMBER,
            OMEGA_SECTION_NUMBER                                        AS ASSUMED_SECTION_NUMBER,
        CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='''') THEN 1
            ELSE CASE WHEN RA.CTR_NF IS NOT NULL THEN 1 END END         AS UNDERWRITING_ORDER,
        CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='''') THEN 0
            ELSE CASE WHEN RA.CTR_NF IS NOT NULL THEN 0 END END         AS ENDORSEMENT_NUMBER,
        S.AOC_STEP_STEPS                                                  AS AOC_STEP,
        CASE WHEN  LVL.ID IS NULL THEN 9999    ELSE LVL.ID    END             AS LEVEL_OF_ANALYSIS_ID,
        S.SENSITIVITY_TYPE,
        CASE WHEN  SCN.ID IS NULL THEN 9999 ELSE SCN.ID END             AS SCENARIO_TYPE_ID,
        S.SENSITIVITY_VOLUME                                              AS SENSITIVITY_VALUE,
        S.SENSITIVITY_VOLUME                                              AS SCENARIO_PARAMETER,
        CASE WHEN RET.RETRO_VALUE IS NOT NULL  THEN RET.RETRO_VALUE    ELSE  DTW.ASSUMED      END AS UNDERWRITING_YEAR,
        CASE WHEN DM.ID IS NOT NULL THEN DM.NAME ELSE ''NA'' END        AS BUSINESS_MATURITY,
        S.NEW_BUSINESS_IND,
        CASE WHEN DM.ID IS NULL THEN 9999 ELSE DM.ID END AS BUSINESS_MATURITY_ID ,
        POS.NAME                                                        AS POSITION,
        T.POSITION_CODE                                                 AS POSITION_CODE,
        POS.POSITION_ID,
        POS.CURRENCY_CODE                                               AS CURRENCY_CODE,
        ''IFRS17 Global''                                               AS BASIS,
        CASE WHEN RB.ID IS NOT NULL THEN RB.ID ELSE 9999 END            AS REPORTING_BASIS_ID,
        S.CLOSING_DATE,
        ''' || P_HIST_MODE || '''                                       AS HISTORIZATION_MODE,
        S.PROJECTION_MONTH,
        S.PROJECTION_YEAR,
        LAST_DAY(S.PROJECTION_YEAR || ''-'' || S.PROJECTION_MONTH || ''-'' || ''01'') AS PROJECTION_DATE,
        CASE WHEN PET.ID IS NULL THEN 9999 ELSE PET.ID END              AS PERIOD_TYPE_ID,
        CASE T.POSITION_CODE 
                        WHEN ''ACQ_EXP'' THEN S.ACQUISITION_EXPENSES
            WHEN ''CL_PAY_IBNP_RES'' THEN S.CLAIM_PAYMENTS_FROM_EXISTING_IBNP_RESERVES
            WHEN ''CLAIMS'' THEN S.CLAIMS
            WHEN ''COLLATERAL_COSTS'' THEN S.COLLATERAL_COSTS
            WHEN ''COMMISSIONS'' THEN S.COMMISSIONS
            WHEN ''DAC'' THEN S.DAC
            WHEN ''DEP_IBNP_RES'' THEN S.DEPOSITED_IBNP_RESERVES
            WHEN ''DEP_MATH_RES'' THEN S.DEPOSITED_MATHEMATICAL_RESERVES
            WHEN ''IFRS_RES_BEN'' THEN S.IFRS_RESERVE_BENEFIT
            WHEN ''IFRS_RES_DAC'' THEN S.IFRS_RESERVE_DAC
            WHEN ''IFRS17_ATTR_EXP'' THEN S.IFRS17_ATTRIBUTABLE_EXPENSES
            WHEN ''IFRS17_NON_ATTRIBUTABLE_EXPENSES'' THEN S.IFRS17_NON_ATTRIBUTABLE_EXPENSES
            WHEN ''INIT_COMM'' THEN S.INITIAL_COMMISSION
            WHEN ''INT_ON_DEP'' THEN S.INTEREST_ON_DEPOSITS
            WHEN ''INT_IN_B_RES_DAC'' THEN S.INTEREST_ON_INVESTMENTS_BACKING_RESERVES_AND_DAC
            WHEN ''INVEST_EXP'' THEN S.INVESTMENT_EXPENSES
            WHEN ''MAINT_EXP'' THEN S.MAINTENANCE_EXPENSES
            WHEN ''MAINT_EXP_NO_INF'' THEN S.MAINTENANCE_EXPENSES_NO_INFLATION
            WHEN ''NET_INVEST_INC'' THEN S.NET_INVESTMENT_INCOME
            WHEN ''NON_HE_R_BAS_CAP'' THEN S.NON_HEDGEABLE_RISK_BASED_CAPITAL
            WHEN ''NON_DEP_MATH_RES'' THEN S.NON_DEPOSITED_MATHEMATICAL_RESERVES
            WHEN ''NON_DEP_IBNP_RES'' THEN S.NON_DEPOSITED_IBNP_RESERVES
            WHEN ''OTH_INCOM_CON_CF'' THEN S.OTHER_INCOMING_CONTRACTUAL_CASHFLOWS
            WHEN ''OTH_OUT_CONT_CF'' THEN S.OTHER_OUTGOING_CONTRACTUAL_CASHFLOWS
            WHEN ''PLT_CLAIMS'' THEN S.PLT_CLAIMS
            WHEN ''PLT_COMMISSION'' THEN S.PLT_COMMISSION
            WHEN ''PLT_PREMIUMS'' THEN S.PLT_PREMIUMS
            WHEN ''PLT_SUM_ASSURED '' THEN S.PLT_SUM_ASSURED 
            WHEN ''PLT_SURRENDERS'' THEN S.PLT_SURRENDERS
            WHEN ''PLT_NO_POLS_IF'' THEN S.PLT_NO_POLS_IF
            WHEN ''PREMIUMS'' THEN S.PREMIUMS
            WHEN ''PROFIT_COMM'' THEN S.PROFIT_COMMISSIONS
            WHEN ''REN_COMM'' THEN S.RENEWAL_COMMISSION
            WHEN ''REQUIRED_CAPITAL'' THEN S.REQUIRED_CAPITAL
            WHEN ''RA_SUM_ASSURED'' THEN S.RISK_ADJUSTED_SUM_ASSURED
            WHEN ''SUM_ASSURED'' THEN S.SUM_ASSURED
            WHEN ''SURRENDERS'' THEN S.SURRENDERS
            WHEN ''TAX'' THEN S.TAX
            WHEN ''TAX_RES'' THEN S.TAX_RESERVE
            WHEN ''TOTAL_INFLATION'' THEN S.TOTAL_INFLATION
            WHEN ''US_GAAP_RES_BEN'' THEN S.US_GAAP_RESERVE_BENEFIT
            WHEN ''US_GAAP_RES_DAC'' THEN S.US_GAAP_RESERVE_DAC
            WHEN ''US_STATUTORY_RES'' THEN S.US_STATUTORY_RESERVE
            WHEN ''IFRS17_ATTR_EXP_EUR'' THEN S.IFRS17_ATTRIBUTABLE_EXPENSES_EUR
            WHEN ''IFRS17_NON_ATTRIBUTABLE_EXPENSES_EUR'' THEN S.IFRS17_NON_ATTRIBUTABLE_EXPENSES_EUR
            WHEN ''MAINT_EXP_EUR'' THEN S.MAINTENANCE_EXPENSES_EUR
            WHEN ''TAX_EUR'' THEN S.TAX_EUR
            WHEN ''COVERAGE_UNITS'' THEN S.COVERAGE_UNITS
            WHEN ''NDIC_ACTUAL'' THEN S.NDIC_ACTUAL
            WHEN ''NDIC_ESTIMATED'' THEN S.NDIC_ESTIMATED                        
        ELSE NULL END                                               AS  AMOUNT,        
        S.CREATED_BY,
        S.CREATED_DATE,
        S.LINE_NUMBER,
        S.REQUEST_ID,
        S.CREATED_BY                                                  AS SOURCE_REF_NAME,
        S.SPLIT,
        ST.ID AS SPLIT_TYPE_ID
    FROM ' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || ' AS S
    INNER JOIN T ON NVL(MOD(LENGTH(T.POSITION_CODE), 1), 0) = NVL(MOD(LENGTH(S.NEW_BUSINESS_IND), 1), 0)
    INNER JOIN (
    SELECT
        POS.NAME ,
        POS.CODE ,
        POS.CURRENCY_CODE,
        PM.POSITION_ID
    FROM BI_<env>.POSITION pos
    INNER JOIN BI_<env>.POSITION_MAPPING PM ON POS.ID = PM.MAPPING_POSITION_ID  AND DATE(POS.VALID_TO) = ''9999-12-31'' AND DATE(pm.VALID_TO) = ''9999-12-31''
    INNER JOIN BI_<env>.POSITION_TYPE PT ON PT.ID=POS.POSITION_TYPE_ID AND PT.CODE = ''US''   
    ) POS ON (UCASE(POS.CODE) = UCASE(T.POSITION_CODE))   
    LEFT OUTER JOIN BI_<env>.BUSINESS_MATURITY DM ON    (UCASE(DM.CODE) = UCASE(S.BUSINESS_MATURITY_CODE))
    LEFT OUTER JOIN BI_<env>.REPORTING_BASIS RB ON    (UCASE(RB.NAME) = ''IFRS17 GLOBAL'')
    LEFT OUTER JOIN BI_<env>.PERIOD_TYPE PET ON    (PET.CODE = S.FREQUENCY)
    LEFT OUTER JOIN BI_<env>.SCENARIO_TYPE SCN ON    ( UCASE(SCN.NAME) = UCASE(S.SENSITIVITY_TYPE) AND DATE(SCN.VALID_TO) = ''9999-12-31'' )
    LEFT OUTER JOIN BI_<env>.LEVEL_OF_ANALYSIS LVL ON    (UCASE( LVL.NAME) = UCASE(S.AOC_STEP_STEPS) AND DATE(LVL.VALID_TO) = ''9999-12-31'')
    LEFT OUTER JOIN BI_<env>.SPLIT_TYPE  ST ON (UCASE(ST.NAME) = S.SPLIT)
    LEFT OUTER JOIN ' || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_US  DTW ON (CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR trim(S.RETRO_OMEGA_SECTION_NUMBER)='') THEN S.OMEGA_TREATY_NUMBER 
            ELSE S.RETRO_OMEGA_TREATY_NUMBER END = DTW.CTR_NF
        AND CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR trim(S.RETRO_OMEGA_SECTION_NUMBER)='') THEN S.OMEGA_SECTION_NUMBER
            ELSE S.RETRO_OMEGA_SECTION_NUMBER END = DTW.SEC_NF)
    LEFT OUTER JOIN ' || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_US RET ON (CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR trim(S.RETRO_OMEGA_SECTION_NUMBER)='') THEN S.OMEGA_TREATY_NUMBER 
            ELSE S.RETRO_OMEGA_TREATY_NUMBER END = RET.RETCTR_NF
        AND CASE WHEN (S.RETRO_OMEGA_TREATY_NUMBER IS NULL OR S.RETRO_OMEGA_TREATY_NUMBER='') AND (S.RETRO_OMEGA_SECTION_NUMBER IS NULL OR trim(S.RETRO_OMEGA_SECTION_NUMBER)='') THEN S.OMEGA_SECTION_NUMBER
            ELSE S.RETRO_OMEGA_SECTION_NUMBER END = RET.RETSEC_NF)
    LEFT OUTER JOIN (
        SELECT
            CTR_NF
        FROM
            BI_<env>.TCONTR
        GROUP BY CTR_NF
        ) RA ON ( RA.CTR_NF = S.RETRO_OMEGA_TREATY_NUMBER ) 
    WHERE  S.REQUEST_ID = ' || P_REQUEST_ID || '
    ) AS X
'|| A_FILTER ||'
';
    
RAISE NOTICE 'Executing V_DELETE_QUERY: ''%''',V_DELETE_QUERY; 
EXECUTE IMMEDIATE V_DELETE_QUERY; 

RAISE NOTICE 'Executing V_INSERT_QUERY: ''%''',V_INSERT_QUERY;
EXECUTE IMMEDIATE V_INSERT_QUERY;


V_ASSUMED_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_ASSUMED_UWY_US IF EXISTS';
EXECUTE IMMEDIATE V_ASSUMED_TEMP_QUERY; 

V_RETRO_TEMP_QUERY := 'DROP TABLE '  || P_TRG_SCHEMA || '.TMP_RDWH_RETRO_UWY_US IF EXISTS';
EXECUTE IMMEDIATE V_RETRO_TEMP_QUERY; 

EXECUTE IMMEDIATE 'CALL ADMIN_CMD(''   RUNSTATS ON TABLE '|| P_TRG_SCHEMA || '.' || P_TRG_TABLE || '  WITH DISTRIBUTION ON ALL COLUMNS SET PROFILE  '')';
        
EXECUTE IMMEDIATE 'COMMIT';

EXCEPTION WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
    L_ERR_MSG := SQLERRM; 
    RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
    RETURN L_ERR_CD; 
 
END; 

END_PROC;
