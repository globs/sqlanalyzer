SET SCHEMA STAGING_<env>;

CREATE OR REPLACE PROCEDURE SP_FUNC_CONTROL_8 ( 
    CHARACTER VARYING(20),
    CHARACTER VARYING(50),
    CHARACTER VARYING(10),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64),
    CHARACTER VARYING(64) 
) 
RETURNS INTEGER
LANGUAGE NZPLSQL 
AS BEGIN_PROC 

DECLARE 
    P_REQUEST_ID        ALIAS FOR $1;
    P_SRC_REF_NAME      ALIAS FOR $2;
    P_INTERFACE_TYPE    ALIAS FOR $3;
    P_STG_SCHEMA        ALIAS FOR $4;
    P_STG_TABLE         ALIAS FOR $5;
    P_REF_SCHEMA        ALIAS FOR $6;
    P_REF_TABLE         ALIAS FOR $7;
    P_DLV_SCHEMA        ALIAS FOR $8;
    P_TRG_TABLE         ALIAS FOR $9;
    P_DLV_TABLE         ALIAS FOR $10;
    V_REQ_ID            VARCHAR(20);
    V_SRC_REF_NAME      VARCHAR(20);
    V_INTERFACE_TYPE    VARCHAR(20);
    V_STEP1_SQL         VARCHAR(32000);
    V_GLOB_TBL_SQL_1    VARCHAR(32000);
    V_STEP2_SQL         VARCHAR(32000);
    V_YEAR_SQL          VARCHAR(32000);
    V_PERIODICITY_SQL   VARCHAR(32000);
    V_GLOB_TBL_SQL_2    VARCHAR(32000);
    V_STEP3_SQL         VARCHAR(32000);
    V_GLOB_TBL_SQL_3    VARCHAR(32000);
    V_LOG_SQL           VARCHAR(32000);
    V_GLB_TMP           VARCHAR(1000);
    V_STEP1_TBL         VARCHAR(1000);
    V_STEP2_TBL         VARCHAR(1000);
    V_STEP3_TBL         VARCHAR(1000);
    L_ERR_CD            CHAR(5);
    L_ERR_MSG           VARCHAR(32000);

BEGIN 

SET ISOLATION TO UR;

V_REQ_ID := UPPER(TRIM(P_REQUEST_ID));   
V_SRC_REF_NAME := UPPER(TRIM(P_SRC_REF_NAME));   
V_INTERFACE_TYPE := UPPER(TRIM(P_INTERFACE_TYPE));   
V_GLB_TMP := 'CTRL8_GLOBAL_TEMP' || V_REQ_ID;   
V_STEP1_TBL := 'CTRL8_STEP1_' || V_INTERFACE_TYPE || '_' || V_REQ_ID;   
V_STEP2_TBL := 'CTRL8_STEP2_' || V_INTERFACE_TYPE || '_' || V_REQ_ID;   
V_STEP3_TBL := 'CTRL8_STEP3_' || V_INTERFACE_TYPE || '_' || V_REQ_ID;   

EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_GLB_TMP || ' AS (
SELECT 
    REQUEST_ID,
    CONTRACT_NUMBER,
    SECTION_NUMBER,
    LEVEL_OF_ANALYSIS_ID,
    REPORTING_BASIS_ID,
    BUSINESS_MATURITY_ID, 
    SCENARIO_TYPE_ID,
    SENSITIVITY_VALUE,
    CLOSING_DATE,
    PERIOD_TYPE_ID,
    SENSITIVITY_TYPE AS ERROR_MESSAGE_LABEL  
FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || '
)  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

IF V_INTERFACE_TYPE = 'DYNAMIC' THEN

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP1_TBL || ' AS (
    SELECT 
        LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,PROJECTION_YEAR 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP2_TBL || ' AS (
    SELECT 
        LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PERIOD_TYPE_ID,PROJECTION_YEAR,PROJECTION_MONTH AS START_MONTH, PROJECTION_MONTH AS END_MONTH 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP3_TBL || ' AS (
    SELECT 
        LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH,PERIOD_TYPE_ID  
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.CTRL8_REF_YEAR_D AS (
    SELECT 
        LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR AS MIN_YEAR,PROJECTION_YEAR AS MAX_YEAR  
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.CTRL8_REF_PERIODICITY_D AS (
    SELECT 
        LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH AS NUMBER_OF_PROJECTIONS 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    V_STEP1_SQL := 'INSERT INTO SESSION.' || V_STEP1_TBL || '(
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PROJECTION_YEAR
    )     
    SELECT 
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PROJECTION_YEAR    
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || '      
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    GROUP BY LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER, REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,PROJECTION_YEAR';   

    V_GLOB_TBL_SQL_1 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,     
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        ERROR_MESSAGE_LABEL
    )
    SELECT    
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL     
    FROM (SELECT 
            LINE_NUMBER,
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            REPORTING_BASIS_ID,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID,     
            CLOSING_DATE,
            PROJECTION_YEAR,
            IFNULL(LEAD(PROJECTION_YEAR) OVER(PARTITION BY LINE_NUMBER,CONTRACT_NUMBER, SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE ORDER BY PROJECTION_YEAR ), 0) - PROJECTION_YEAR AS DELTA 
        FROM SESSION.' || V_STEP1_TBL || ' 
        ) WHERE DELTA >1      
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,''Gap on projection periodicity within this dataset''';   

    V_STEP2_SQL := 'INSERT INTO SESSION.' || V_STEP2_TBL || '(
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        PROJECTION_YEAR,
        START_MONTH,
        END_MONTH
    )     
    SELECT 
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        PROJECTION_YEAR,
        MIN(PROJECTION_MONTH) AS START_MONTH,
        MAX(PROJECTION_MONTH) AS END_MONTH     
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB 
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    AND PERIOD_TYPE_ID IN ( SELECT 
                            ID 
                        FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                        WHERE CODE IN (''Q'',''M'')
                        ) 
    AND NOT EXISTS (SELECT 
                        1 
                    FROM SESSION.' || V_GLB_TMP || ' T 
                    WHERE T.REQUEST_ID = TAB.REQUEST_ID AND T.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND T.SECTION_NUMBER = TAB.SECTION_NUMBER 
                    AND T.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID AND T.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND T.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
                    AND T.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE AND T.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND T.CLOSING_DATE = TAB.CLOSING_DATE 
                    )     
    GROUP BY LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE, BUSINESS_MATURITY_ID,CLOSING_DATE,PERIOD_TYPE_ID,PROJECTION_YEAR';   

    V_YEAR_SQL := 'INSERT INTO SESSION.CTRL8_REF_YEAR_D(
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,     
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        MIN_YEAR,
        MAX_YEAR
    )     
    SELECT 
        LINE_NUMBER, 
        REQUEST_ID, 
        CONTRACT_NUMBER, 
        SECTION_NUMBER, 
        LEVEL_OF_ANALYSIS_ID, 
        SCENARIO_TYPE_ID, 
        SENSITIVITY_VALUE, 
        BUSINESS_MATURITY_ID,     
        REPORTING_BASIS_ID, 
        CLOSING_DATE,
        MIN(PROJECTION_YEAR) AS MIN_YEAR, 
        MAX(PROJECTION_YEAR) AS MAX_YEAR     
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB 
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || '''      
    GROUP BY LINE_NUMBER, REQUEST_ID, CONTRACT_NUMBER, SECTION_NUMBER, LEVEL_OF_ANALYSIS_ID, SCENARIO_TYPE_ID, SENSITIVITY_VALUE, BUSINESS_MATURITY_ID, REPORTING_BASIS_ID, CLOSING_DATE';   

    V_PERIODICITY_SQL := 'INSERT INTO SESSION.CTRL8_REF_PERIODICITY_D (
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID, 
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,     
        NUMBER_OF_PROJECTIONS
    )     
    SELECT 
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,     
        CLOSING_DATE,
        PROJECTION_YEAR,
        COUNT(PERIOD_TYPE_ID) AS NUMBER_OF_PROJECTIONS     
    FROM (SELECT 
            LINE_NUMBER,
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID, 
            REPORTING_BASIS_ID,     
            CLOSING_DATE,
            PROJECTION_YEAR,
            PERIOD_TYPE_ID 
        FROM    ' || P_STG_SCHEMA || '.' || P_STG_TABLE || '      
        WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || '''      
        GROUP BY LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID, CLOSING_DATE,PROJECTION_YEAR,PERIOD_TYPE_ID
        ) TAB     
    GROUP BY LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR';   

    V_GLOB_TBL_SQL_2 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID, 
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ERROR_MESSAGE_LABEL
    )      
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,     
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL     
    FROM ( SELECT 
            TAB.LINE_NUMBER,
            TAB.REQUEST_ID,
            TAB.CONTRACT_NUMBER,
            TAB.SECTION_NUMBER,
            TAB.REPORTING_BASIS_ID,
            TAB.LEVEL_OF_ANALYSIS_ID,
            TAB.SCENARIO_TYPE_ID,     
            TAB.SENSITIVITY_VALUE,
            TAB.BUSINESS_MATURITY_ID,
            TAB.CLOSING_DATE,
            TAB.PERIOD_TYPE_ID,
            TAB.PROJECTION_YEAR,     
            START_MONTH,
            END_MONTH,
            MIN_YEAR,
            MAX_YEAR,
            NUMBER_OF_PROJECTIONS 
        FROM SESSION.' || V_STEP2_TBL || ' TAB 
        LEFT JOIN SESSION.CTRL8_REF_YEAR_D Y ON ( Y.REQUEST_ID = TAB.REQUEST_ID AND Y.LINE_NUMBER = TAB.LINE_NUMBER AND Y.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER 
        AND Y.SECTION_NUMBER = TAB.SECTION_NUMBER AND Y.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND Y.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
        AND Y.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE AND Y.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND Y.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID 
        AND Y.CLOSING_DATE = TAB.CLOSING_DATE )     
        LEFT JOIN SESSION.CTRL8_REF_PERIODICITY_D P ON ( P.REQUEST_ID = TAB.REQUEST_ID AND P.LINE_NUMBER = TAB.LINE_NUMBER AND P.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER 
        AND P.SECTION_NUMBER = TAB.SECTION_NUMBER AND P.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND P.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
        AND P.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE AND P.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND P.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID 
        AND P.CLOSING_DATE = TAB.CLOSING_DATE AND P.PROJECTION_YEAR = TAB.PROJECTION_YEAR )     
        WHERE CASE WHEN TAB.PROJECTION_YEAR >= MIN_YEAR AND TAB.PROJECTION_YEAR < MAX_YEAR THEN 12 END <> END_MONTH  
            OR CASE WHEN TAB.PROJECTION_YEAR > MIN_YEAR AND TAB.PROJECTION_YEAR <= MAX_YEAR THEN 
                CASE WHEN TAB.PERIOD_TYPE_ID = (SELECT 
                                                    ID 
                                                FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                                                WHERE CODE = ''M'') THEN 1 
                     WHEN TAB.PERIOD_TYPE_ID = ( SELECT 
                                                    ID 
                                                FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || '
                                                WHERE CODE = ''Q'') THEN 3 END 
                END <> START_MONTH 
            OR NUMBER_OF_PROJECTIONS <> 1
        )     
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE, PERIOD_TYPE_ID,''Gap on projection periodicity within this dataset''';   

    V_STEP3_SQL := 'INSERT INTO SESSION.' || V_STEP3_TBL || '(
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE, 
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,
        PROJECTION_MONTH,
        PERIOD_TYPE_ID
    )     
    SELECT 
        LINE_NUMBER,
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,     
        CLOSING_DATE,
        PROJECTION_YEAR,
        PROJECTION_MONTH,
        PERIOD_TYPE_ID
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB     
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    AND PERIOD_TYPE_ID IN (SELECT 
                                ID 
                            FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || '     
                            WHERE CODE IN (''Q'',''M'')) 
    AND NOT EXISTS (SELECT 
                        1 
                    FROM SESSION.' || V_GLB_TMP || ' T 
                    WHERE T.REQUEST_ID = TAB.REQUEST_ID AND T.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND T.SECTION_NUMBER = TAB.SECTION_NUMBER 
                    AND T.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID AND T.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND T.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
                    AND T.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE         AND T.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND T.CLOSING_DATE = TAB.CLOSING_DATE 
                   )     
    GROUP BY LINE_NUMBER,REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID, CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH,PERIOD_TYPE_ID';   
    
    V_GLOB_TBL_SQL_3 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID, 
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ERROR_MESSAGE_LABEL
    )     
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,     
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL      
    FROM (SELECT 
            LINE_NUMBER,
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            REPORTING_BASIS_ID,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID,     
            CLOSING_DATE,
            PERIOD_TYPE_ID,
            PROJECTION_YEAR,
            PROJECTION_MONTH,
            IFNULL(LEAD(PROJECTION_MONTH) OVER(PARTITION BY LINE_NUMBER,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,PERIOD_TYPE_ID,CLOSING_DATE,PROJECTION_YEAR ORDER BY PROJECTION_MONTH ),0) - PROJECTION_MONTH AS DELTA 
        FROM SESSION.' || V_STEP3_TBL || ')      
        WHERE DELTA > 0 AND CASE WHEN PERIOD_TYPE_ID = (SELECT 
                                                            ID 
                                                        FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                                                        WHERE CODE = ''M'') THEN DELTA - 1 
                                 WHEN PERIOD_TYPE_ID = (SELECT 
                                                            ID 
                                                        FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || '     
                                                        WHERE CODE = ''Q'') THEN DELTA - 3 END <> 0      
        GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE, PERIOD_TYPE_ID,''Gap on projection periodicity within this dataset''';   

ELSEIF V_INTERFACE_TYPE = 'FIXED' THEN 

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP1_TBL || ' AS (
    SELECT 
        REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID, SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,PROJECTION_YEAR
        FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP2_TBL || ' AS (
    SELECT 
        REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PERIOD_TYPE_ID,PROJECTION_YEAR,PROJECTION_MONTH AS START_MONTH, PROJECTION_MONTH AS END_MONTH 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_STEP3_TBL || ' AS (
    SELECT 
        REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH,PERIOD_TYPE_ID 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.CTRL8_REF_YEAR_F AS (
    SELECT 
        REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR AS MIN_YEAR,PROJECTION_YEAR AS MAX_YEAR  
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.CTRL8_REF_PERIODICITY_F AS (
    SELECT 
        REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID, SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH AS NUMBER_OF_PROJECTIONS 
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ')  WITH NO DATA ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';   

    V_STEP1_SQL := 'INSERT INTO SESSION.' || V_STEP1_TBL || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,         
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PROJECTION_YEAR
    )     
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,     
        CLOSING_DATE,
        PROJECTION_YEAR    
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || '      
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,PROJECTION_YEAR';   
   
    V_GLOB_TBL_SQL_1 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,     
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        ERROR_MESSAGE_LABEL
    )      
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL     
    FROM (SELECT 
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            REPORTING_BASIS_ID,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID,     
            CLOSING_DATE,
            PROJECTION_YEAR,
            IFNULL(LEAD(PROJECTION_YEAR) OVER(PARTITION BY CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE     ORDER BY PROJECTION_YEAR ), 0) - PROJECTION_YEAR AS DELTA 
        FROM SESSION.' || V_STEP1_TBL || ' )
    WHERE DELTA >1      
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,''Gap on projection periodicity within this dataset''';   
    
    V_STEP2_SQL := 'INSERT INTO SESSION.' || V_STEP2_TBL || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        PROJECTION_YEAR,
        START_MONTH,
        END_MONTH
    )     
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,     
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        PROJECTION_YEAR,
        MIN(PROJECTION_MONTH) AS START_MONTH,MAX(PROJECTION_MONTH) AS END_MONTH     
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB 
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    AND PERIOD_TYPE_ID IN ( SELECT 
                                ID 
                            FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                            WHERE    CODE IN (''Q'',''M'')) 
    AND NOT EXISTS (SELECT 
                        1 
                    FROM SESSION.' || V_GLB_TMP || ' T WHERE T.REQUEST_ID = TAB.REQUEST_ID AND T.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND T.SECTION_NUMBER = TAB.SECTION_NUMBER 
                    AND T.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID AND T.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND T.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
                    AND T.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE AND T.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID         AND T.CLOSING_DATE = TAB.CLOSING_DATE 
                    )     
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE, BUSINESS_MATURITY_ID,CLOSING_DATE,PERIOD_TYPE_ID,PROJECTION_YEAR';   
    
    V_YEAR_SQL := 'INSERT INTO SESSION.CTRL8_REF_YEAR_F (
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        MIN_YEAR,
        MAX_YEAR
    )     
    SELECT 
        REQUEST_ID, 
        CONTRACT_NUMBER, 
        SECTION_NUMBER, 
        LEVEL_OF_ANALYSIS_ID, 
        SCENARIO_TYPE_ID, 
        SENSITIVITY_VALUE, 
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID, 
        CLOSING_DATE,
        MIN(PROJECTION_YEAR) AS MIN_YEAR, 
        MAX(PROJECTION_YEAR) AS MAX_YEAR     
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB 
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || '''      
    GROUP BY REQUEST_ID, CONTRACT_NUMBER, SECTION_NUMBER, LEVEL_OF_ANALYSIS_ID, SCENARIO_TYPE_ID, SENSITIVITY_VALUE, BUSINESS_MATURITY_ID,REPORTING_BASIS_ID, CLOSING_DATE';   
    
    V_PERIODICITY_SQL := 'INSERT INTO SESSION.CTRL8_REF_PERIODICITY_F(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,
        NUMBER_OF_PROJECTIONS
    )    
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,
        COUNT(PERIOD_TYPE_ID) AS NUMBER_OF_PROJECTIONS     
    FROM (SELECT 
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID, 
            REPORTING_BASIS_ID,     
            CLOSING_DATE,
            PROJECTION_YEAR,
            PERIOD_TYPE_ID 
        FROM    ' || P_STG_SCHEMA || '.' || P_STG_TABLE || '      
        WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || '''      
        GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PERIOD_TYPE_ID) TAB     
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID, CLOSING_DATE,PROJECTION_YEAR';   
    
    V_GLOB_TBL_SQL_2 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ERROR_MESSAGE_LABEL
    )      
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL     
    FROM ( SELECT 
            TAB.REQUEST_ID,
            TAB.CONTRACT_NUMBER,
            TAB.SECTION_NUMBER,
            TAB.REPORTING_BASIS_ID,
            TAB.LEVEL_OF_ANALYSIS_ID,
            TAB.SCENARIO_TYPE_ID,     
            TAB.SENSITIVITY_VALUE,
            TAB.BUSINESS_MATURITY_ID,
            TAB.CLOSING_DATE,
            TAB.PERIOD_TYPE_ID,
            TAB.PROJECTION_YEAR,     
            START_MONTH,
            END_MONTH,
            MIN_YEAR,
            MAX_YEAR,
            NUMBER_OF_PROJECTIONS 
        FROM SESSION.' || V_STEP2_TBL || ' TAB 
        LEFT JOIN SESSION.CTRL8_REF_YEAR_F Y ON ( Y.REQUEST_ID = TAB.REQUEST_ID AND Y.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND Y.SECTION_NUMBER = TAB.SECTION_NUMBER 
        AND Y.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND Y.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID AND Y.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE         
        AND Y.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND Y.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID AND Y.CLOSING_DATE = TAB.CLOSING_DATE 
       )     
        LEFT JOIN SESSION.CTRL8_REF_PERIODICITY_F P ON ( P.REQUEST_ID = TAB.REQUEST_ID AND P.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND P.SECTION_NUMBER = TAB.SECTION_NUMBER 
        AND P.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND P.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID AND P.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE         
        AND P.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND P.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID AND P.CLOSING_DATE = TAB.CLOSING_DATE 
        AND P.PROJECTION_YEAR = TAB.PROJECTION_YEAR )     
        WHERE CASE WHEN TAB.PROJECTION_YEAR >= MIN_YEAR AND TAB.PROJECTION_YEAR < MAX_YEAR THEN 12 END <> END_MONTH 
            OR CASE WHEN TAB.PROJECTION_YEAR > MIN_YEAR AND TAB.PROJECTION_YEAR <= MAX_YEAR THEN 
                CASE WHEN TAB.PERIOD_TYPE_ID = (SELECT 
                                                    ID 
                                                FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                                                WHERE     CODE = ''M'') THEN 1 
                    WHEN TAB.PERIOD_TYPE_ID = ( SELECT 
                                                    ID 
                                                FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                                                WHERE CODE = ''Q'') THEN 3 END 
                END <> START_MONTH OR NUMBER_OF_PROJECTIONS <> 1)     
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE, PERIOD_TYPE_ID,''Gap on projection periodicity within this dataset''';   
    
    V_STEP3_SQL := 'INSERT INTO SESSION.' || V_STEP3_TBL || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,
        PROJECTION_MONTH,
        PERIOD_TYPE_ID
    )     
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        REPORTING_BASIS_ID,
        CLOSING_DATE,
        PROJECTION_YEAR,
        PROJECTION_MONTH,
        PERIOD_TYPE_ID
    FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' TAB     
    WHERE REQUEST_ID = ' || V_REQ_ID || ' AND SOURCE_REF_NAME = ''' || V_SRC_REF_NAME || ''' 
    AND PERIOD_TYPE_ID IN (SELECT 
                                ID 
                            FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' WHERE CODE IN (''Q'',''M'')) 
    AND NOT EXISTS (SELECT 
                        1 
                    FROM SESSION.' || V_GLB_TMP || ' T WHERE T.REQUEST_ID = TAB.REQUEST_ID AND T.CONTRACT_NUMBER = TAB.CONTRACT_NUMBER AND T.SECTION_NUMBER = TAB.SECTION_NUMBER 
                    AND T.REPORTING_BASIS_ID = TAB.REPORTING_BASIS_ID         AND T.LEVEL_OF_ANALYSIS_ID = TAB.LEVEL_OF_ANALYSIS_ID AND T.SCENARIO_TYPE_ID = TAB.SCENARIO_TYPE_ID 
                    AND T.SENSITIVITY_VALUE = TAB.SENSITIVITY_VALUE         AND T.BUSINESS_MATURITY_ID = TAB.BUSINESS_MATURITY_ID AND T.CLOSING_DATE = TAB.CLOSING_DATE 
                    )     
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,REPORTING_BASIS_ID,CLOSING_DATE,PROJECTION_YEAR,PROJECTION_MONTH,PERIOD_TYPE_ID';   
    
    V_GLOB_TBL_SQL_3 := 'INSERT INTO SESSION.' || V_GLB_TMP || '(
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ERROR_MESSAGE_LABEL
    )     
    SELECT 
        REQUEST_ID,
        CONTRACT_NUMBER,
        SECTION_NUMBER,
        REPORTING_BASIS_ID,
        LEVEL_OF_ANALYSIS_ID,
        SCENARIO_TYPE_ID,
        SENSITIVITY_VALUE,
        BUSINESS_MATURITY_ID,
        CLOSING_DATE,
        PERIOD_TYPE_ID,
        ''Gap on projection periodicity within this dataset'' AS ERROR_MESSAGE_LABEL      
    FROM (SELECT 
            REQUEST_ID,
            CONTRACT_NUMBER,
            SECTION_NUMBER,
            REPORTING_BASIS_ID,
            LEVEL_OF_ANALYSIS_ID,
            SCENARIO_TYPE_ID,
            SENSITIVITY_VALUE,
            BUSINESS_MATURITY_ID,
            CLOSING_DATE,
            PERIOD_TYPE_ID,
            PROJECTION_YEAR,
            PROJECTION_MONTH,
            IFNULL(LEAD(PROJECTION_MONTH) OVER(PARTITION BY CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,PERIOD_TYPE_ID,CLOSING_DATE, PROJECTION_YEAR ORDER BY PROJECTION_MONTH ),0) - PROJECTION_MONTH AS DELTA 
        FROM SESSION.' || V_STEP3_TBL || ')      
    WHERE DELTA > 0 AND CASE WHEN PERIOD_TYPE_ID = (SELECT 
                                                        ID 
                                                    FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || ' 
                                                    WHERE CODE = ''M'') THEN DELTA - 1 
                            WHEN PERIOD_TYPE_ID = (SELECT 
                                                        ID 
                                                    FROM ' || P_REF_SCHEMA || '.' || P_REF_TABLE || '     
                                                    WHERE CODE = ''Q'') THEN DELTA - 3 END <> 0      
    GROUP BY REQUEST_ID,CONTRACT_NUMBER,SECTION_NUMBER,REPORTING_BASIS_ID,LEVEL_OF_ANALYSIS_ID,SCENARIO_TYPE_ID,SENSITIVITY_VALUE,BUSINESS_MATURITY_ID,CLOSING_DATE,PERIOD_TYPE_ID,''Gap on projection periodicity within this dataset''';  

END IF;   

V_LOG_SQL := 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_TRG_TABLE || ' (
    REQUEST_ID,     
    ERROR_MESSAGE_ID,    
    ERROR_ROW
) 
SELECT     
    WRK.REQUEST_ID,     
    EM.ERROR_MESSAGE_ID,     
    WRK.LINE_NUMBER 
FROM     ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' WRK 
JOIN SESSION.' || V_GLB_TMP || ' REF_TAB ON     ( WRK.REQUEST_ID = REF_TAB.REQUEST_ID     AND WRK.CONTRACT_NUMBER = REF_TAB.CONTRACT_NUMBER     
    AND WRK.SECTION_NUMBER = REF_TAB.SECTION_NUMBER     AND WRK.REPORTING_BASIS_ID = REF_TAB.REPORTING_BASIS_ID     
    AND WRK.LEVEL_OF_ANALYSIS_ID = REF_TAB.LEVEL_OF_ANALYSIS_ID     AND WRK.SCENARIO_TYPE_ID = REF_TAB.SCENARIO_TYPE_ID     
    AND WRK.SENSITIVITY_VALUE = REF_TAB.SENSITIVITY_VALUE     AND WRK.BUSINESS_MATURITY_ID = REF_TAB.BUSINESS_MATURITY_ID     
    AND WRK.CLOSING_DATE = REF_TAB.CLOSING_DATE) 
LEFT JOIN ' || P_DLV_SCHEMA || '.' || P_DLV_TABLE || ' EM ON     (EM.ERROR_MESSAGE_LABEL = REF_TAB.ERROR_MESSAGE_LABEL) 
GROUP BY     WRK.REQUEST_ID,     EM.ERROR_MESSAGE_ID,     WRK.LINE_NUMBER';   

RAISE NOTICE 'Executing 1st SQL OF STEP 1';   
RAISE NOTICE 'Executing V_STEP1_SQL: ''%''', V_STEP1_SQL;
EXECUTE IMMEDIATE V_STEP1_SQL;   

RAISE NOTICE 'Executing 2nd SQL OF STEP 1';   
RAISE NOTICE 'Executing V_GLOB_TBL_SQL_1: ''%''', V_GLOB_TBL_SQL_1;
EXECUTE IMMEDIATE V_GLOB_TBL_SQL_1;  

RAISE NOTICE 'Executing 1st SQL OF STEP 2'; 
RAISE NOTICE 'Executing V_STEP2_SQL: ''%''', V_STEP2_SQL;  
EXECUTE IMMEDIATE V_STEP2_SQL;   

RAISE NOTICE 'Executing 2nd SQL OF STEP 2'; 
RAISE NOTICE 'Executing V_YEAR_SQL: ''%''', V_YEAR_SQL;    
EXECUTE IMMEDIATE V_YEAR_SQL;   

RAISE NOTICE 'Executing 3rd SQL OF STEP 2';   
RAISE NOTICE 'Executing V_PERIODICITY_SQL: ''%''', V_PERIODICITY_SQL;    
EXECUTE IMMEDIATE V_PERIODICITY_SQL; 
  
RAISE NOTICE 'Executing 4th SQL OF STEP 2';  
RAISE NOTICE 'Executing V_GLOB_TBL_SQL_2: ''%''', V_GLOB_TBL_SQL_2;  
EXECUTE IMMEDIATE V_GLOB_TBL_SQL_2;
   
RAISE NOTICE 'Executing 1st SQL OF STEP 3';  
RAISE NOTICE 'Executing V_STEP3_SQL: ''%''', V_STEP3_SQL;   
EXECUTE IMMEDIATE V_STEP3_SQL;   

RAISE NOTICE 'Executing 2nd SQL OF STEP 3';   
RAISE NOTICE 'Executing V_GLOB_TBL_SQL_3: ''%''', V_GLOB_TBL_SQL_3;   
EXECUTE IMMEDIATE V_GLOB_TBL_SQL_3;   

RAISE NOTICE 'Executing SQL TO INSERT IN LOG TABLE';   
RAISE NOTICE 'Executing V_LOG_SQL: ''%''', V_LOG_SQL;   
EXECUTE IMMEDIATE V_LOG_SQL;   

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_GLB_TMP || ' IF EXISTS';   
EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_STEP1_TBL || ' IF EXISTS';   
EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_STEP2_TBL || ' IF EXISTS';   
EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_STEP3_TBL || ' IF EXISTS';   
EXECUTE IMMEDIATE 'DROP TABLE SESSION.CTRL8_REF_YEAR_D IF EXISTS';   
EXECUTE IMMEDIATE 'DROP TABLE SESSION.CTRL8_REF_PERIODICITY_D IF EXISTS';   

EXCEPTION
    WHEN OTHERS THEN 
        L_ERR_CD := SUBSTR(SQLERRM, 8, 5);
        L_ERR_MSG := SQLERRM;
        RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG;
        RETURN L_ERR_CD;
 

END;   

END_PROC;
