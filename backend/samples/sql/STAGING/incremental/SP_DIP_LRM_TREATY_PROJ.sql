SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_DIP_LRM_TREATY_PROJ;

CREATE OR REPLACE PROCEDURE SP_DIP_LRM_TREATY_PROJ(CHARACTER VARYING(50),CHARACTER VARYING(50),CHARACTER VARYING(50),CHARACTER VARYING(50),CHARACTER VARYING(50) ) 
RETURNS INTEGER
LANGUAGE NZPLSQL AS 
BEGIN_PROC
DECLARE 

    P_STG_SCHEMA            ALIAS FOR $1;
    P_WRK_DIP_PROJ_PVT_TBL  ALIAS FOR $2;
    P_WRK_DIP_LRM_PROJ_TBL  ALIAS FOR $3;
    P_QTR_DATE              ALIAS FOR $4;
    P_RPT_BA_CODE           ALIAS FOR $5;
    V_STG_SELECT            VARCHAR(32000);
    V_CONSTANT_QTR          VARCHAR(5);
    V_CONSTANT_YR           VARCHAR(5);
    V_SQL1                  VARCHAR(32000);
    V_QUERY_1               VARCHAR(32000);
    V_QUERY_2               VARCHAR(32000);
    V_QUERY_3               VARCHAR(32000);
    V_QUERY_4               VARCHAR(32000);
    V_QTRS                  VARCHAR(32000);
	V_PRE_QUERY_3    		VARCHAR(32000);
	V_PRE_QUERY_3_DDL		VARCHAR(32000);
    V_QTR                   VARCHAR(50);
    V_YR                    VARCHAR(50);
    L_ERR_CD                CHAR(5);
    L_ERR_MSG               VARCHAR(32000);
    V_REC                   RECORD;

BEGIN
SET ISOLATION TO UR;

V_QTR = SUBSTRING(P_QTR_DATE,2,1); 
V_YR = SUBSTRING(P_QTR_DATE,3,4);
V_CONSTANT_QTR = 'Q';
V_CONSTANT_YR = 'Y';
V_QUERY_4 = 0;

V_QTRS :=
CASE
   WHEN V_QTR = 4 THEN '(''Q4' ||(V_YR)|| ''')'
   WHEN V_QTR = 1 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''')'
   WHEN V_QTR = 2 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''',''Q2' || V_YR || ''')'
   WHEN V_QTR = 3 THEN '(''Q4' ||(V_YR-1)|| ''',''Q1' || V_YR || ''',''Q2' || V_YR || ''',''Q3' || V_YR || ''')'
END ;

RAISE NOTICE '''%''',
V_QTRS ;

V_PRE_QUERY_3 = '(
	SELECT
		DENSE_RANK() OVER (ORDER BY CONTRACT_NUMBER , UNDERWRITING_YEAR , SECTION_NUMBER ,UNDERWRITING_ORDER , ENDORSEMENT_NUMBER , CLOSING_DATE ,POLICY_UW_YEAR , BUSINESS_MATURITY_ID , REPORTING_BASIS_ID , ASSUMED_CONTRACT_NUMBER , ASSUMED_SECTION_NUMBER , SPLIT_TYPE_ID ) AS ID ,
		REPORTING_BASIS_ID,
		CURRENCY_CODE,
		SCENARIO_PARAMETER,
		PERIOD_TYPE_ID ,
		PROJECTION_MONTH,
		POSITION_ID ,
		MP.MAP_POSITION_CODE,
		SCENARIO_TYPE_ID ,
		LEVEL_OF_ANALYSIS_ID,
		PROJECTION_YEAR,
		AMOUNT,
		SC.CODE AS SCENARIO_TYPE_CODE,
		PR.IS_COMPOSITE,
		PR.IS_CSM,
		PR.CLOSING_DATE,
		''Q''||QUARTER(PR.CLOSING_DATE) AS QTR,
		YEAR(PR.CLOSING_DATE) AS CLOSING_YR   
	FROM BI_<env>.PROJECTION_FACT PR
	INNER JOIN DWHD1_<env>.V_Mapping_Position MP ON PR.POSITION_ID = MP.SOURCE_Position_ID AND MP.IS_CSM_MAP is true AND MP.MAP_POSITION_CODE <> ''COV_UNITS''
	INNER JOIN BI_<env>.REPORTING_BASIS RB ON  PR.REPORTING_BASIS_ID = RB.ID AND RB.CODE =''' || P_RPT_BA_CODE || '''
	INNER JOIN BI_<env>.SCENARIO_TYPE SC ON SC.ID = PR.SCENARIO_TYPE_ID 
	WHERE DATE(PR.VALID_TO) = ''9999-12-31'' AND DATE(PR.SUPP_DATE) = ''9999-12-31'' AND PR.PROJECTION_YEAR >= (YEAR(PR.CLOSING_DATE)-1)
	AND QTR||CLOSING_YR IN ' || V_QTRS || ' 
)';

EXECUTE IMMEDIATE 'DROP TABLE STAGING_<env>.WRK_DIP_LRM_PROJ_TMP IF EXISTS';
V_PRE_QUERY_3_DDL = 'CREATE TABLE STAGING_<env>.WRK_DIP_LRM_PROJ_TMP AS' || V_PRE_QUERY_3 || 'WITH NO DATA IN TBS_<env> DISTRIBUTE ON RANDOM';
EXECUTE IMMEDIATE V_PRE_QUERY_3_DDL;
V_PRE_QUERY_3 = 'INSERT INTO STAGING_<env>.WRK_DIP_LRM_PROJ_TMP' || V_PRE_QUERY_3;
EXECUTE IMMEDIATE V_PRE_QUERY_3;

V_STG_SELECT = '(
SELECT 
    PC.ID,
    CURRENCY_CODE,
    MAP_POSITION_CODE,
    SCENARIO_TYPE_CODE,
    SCENARIO_PARAMETER,
    LVL.CODE AS LEVEL_OF_ANALYSIS_CODE ,
    CLOSING_DATE,
    CASE WHEN PERIOD_TYPE_ID = 1 THEN PROJECTION_YEAR||''' || V_CONSTANT_YR || '''
         WHEN PERIOD_TYPE_ID = 2 THEN PROJECTION_YEAR||''' || V_CONSTANT_QTR || '''||
	CASE WHEN PROJECTION_MONTH IN (1,2,3) THEN 1 
		 WHEN PROJECTION_MONTH IN (4,5,6) THEN 2 
         WHEN PROJECTION_MONTH IN (7,8,9) THEN 3 
	ELSE 4 END 
    END PERIOD, 
    AMOUNT 
FROM (	SELECT 
			ROW_NUMBER() OVER (PARTITION BY ID, CURRENCY_CODE, MAP_POSITION_CODE, SCENARIO_TYPE_CODE, SCENARIO_PARAMETER, CLOSING_DATE, PROJECTION_YEAR, PROJECTION_MONTH ORDER BY LEVEL_OF_ANALYSIS_ID desc) AS MAX_LVL,
			ID,
			CURRENCY_CODE,
			MAP_POSITION_CODE,
			SCENARIO_TYPE_CODE,
			SCENARIO_PARAMETER,
			LEVEL_OF_ANALYSIS_ID ,
			CLOSING_DATE,
			PERIOD_TYPE_ID,
			PROJECTION_YEAR,
			PROJECTION_MONTH,
			AMOUNT
		FROM STAGING_<env>.WRK_DIP_LRM_PROJ_TMP
		WHERE MAX_LVL=1
	) PC   
    INNER JOIN BI_<env>.LEVEL_OF_ANALYSIS LVL ON LVL.ID=PC.LEVEL_OF_ANALYSIS_ID AND DATE(LVL.VALID_TO) = ''9999-12-31''

)';

V_SQL1 = 'DELETE  FROM ' || P_STG_SCHEMA || '.' || P_WRK_DIP_LRM_PROJ_TBL|| '';
RAISE NOTICE 'Executing V_SQL1: ''%''',V_SQL1; 
EXECUTE IMMEDIATE V_SQL1;
EXECUTE IMMEDIATE 'COMMIT';
RAISE NOTICE 'DELETING DATA FROM WRK_DIP_LRM_PROJECTION';

V_SQL1 = 'INSERT INTO ' || P_STG_SCHEMA || '.' || P_WRK_DIP_LRM_PROJ_TBL|| ' ' || V_STG_SELECT;
RAISE NOTICE 'Executing V_SQL1: ''%''',V_SQL1; 
EXECUTE IMMEDIATE V_SQL1;
RAISE NOTICE ' INSERTING DATA RELATED PROJECTION IN WRK_DIP_LRM_PROJECTION';

V_QUERY_1 = 'MAX(DECODE(PERIOD, ''';

SELECT 
    COUNT (1) INTO V_QUERY_4 
FROM 
    STAGING_<env>.WRK_DIP_LRM_PROJECTION;

IF V_QUERY_4 > 0 THEN 
    FOR V_REC IN
        SELECT
           PERIOD
        FROM STAGING_<env>.WRK_DIP_LRM_PROJECTION
        WHERE PERIOD IS NOT NULL
        GROUP BY PERIOD
        ORDER BY 1 

    LOOP   
        RAISE NOTICE 'Treating column ''%'' ',
        V_REC.PERIOD;
        V_QUERY_1 = V_QUERY_1 || V_REC.PERIOD || ''',AMOUNT)) AS "' || V_REC.PERIOD || '",MAX(DECODE(PERIOD, ''';

    END LOOP;

    V_QUERY_1 = SUBSTRING(V_QUERY_1, 0, LENGTH(V_QUERY_1) - 20);

    V_QUERY_2 = 'SELECT ID,CURRENCY_CODE AS "Currency_Code",MAP_POSITION_CODE AS "CSM_Cashflow_Legs_Code",SCENARIO_TYPE_CODE AS "Scenario_Type_Code",SCENARIO_PARAMETER AS "Scenario_Parameter",LEVEL_OF_ANALYSIS_CODE AS "Level_Of_Analysis_Code",CLOSING_DATE AS "Closing_Date",
        ' || V_QUERY_1 || '
    FROM ' || P_STG_SCHEMA || '.' || P_WRK_DIP_LRM_PROJ_TBL || '
    GROUP BY 1,2,3,4,5,6,7';

    V_QUERY_3 = 'DROP TABLE ' || P_STG_SCHEMA || '.' || P_WRK_DIP_PROJ_PVT_TBL || ' IF EXISTS ';

    RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
    EXECUTE IMMEDIATE V_QUERY_3;

    V_QUERY_3 = 'CREATE TABLE ' || P_STG_SCHEMA || '.' || P_WRK_DIP_PROJ_PVT_TBL || ' AS (' || V_QUERY_2 || ') WITH DATA DISTRIBUTE ON RANDOM';

    RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
    EXECUTE IMMEDIATE V_QUERY_3;

ELSE
    RAISE NOTICE 'NO DATA INSERTED ON WRK_DIP_LRM_PROJECTION';

    V_QUERY_3 = 'DROP TABLE ' || P_STG_SCHEMA || '.' || P_WRK_DIP_PROJ_PVT_TBL || ' IF EXISTS ';
    EXECUTE IMMEDIATE 'COMMIT';

    RAISE NOTICE 'Executing V_QUERY_3: ''%''',V_QUERY_3; 
    EXECUTE IMMEDIATE V_QUERY_3;

END IF;

EXECUTE IMMEDIATE 'DROP TABLE STAGING_<env>.WRK_DIP_LRM_PROJ_TMP IF EXISTS';

EXCEPTION WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM, 8, 5); 
	L_ERR_MSG := SQLERRM; 
	RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG; 
	RETURN L_ERR_CD; 
 
END; 

END_PROC;
