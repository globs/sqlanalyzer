SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_DIP_FUNC_CONTROL_2;

CREATE OR REPLACE
PROCEDURE SP_DIP_FUNC_CONTROL_2 ( BIGINT,
CHARACTER VARYING(ANY),
CHARACTER VARYING(ANY),
CHARACTER VARYING(ANY),
CHARACTER VARYING(ANY),
CHARACTER VARYING(ANY),
CHARACTER VARYING(ANY)) RETURNS INTEGER
LANGUAGE NZPLSQL AS BEGIN_PROC
DECLARE P_REQUEST_ID		ALIAS FOR $1;
P_STG_SCHEMA				ALIAS FOR $2;
P_STG_TABLE					ALIAS FOR $3;
P_REF_SCHEMA				ALIAS FOR $4;
P_DLV_SCHEMA				ALIAS FOR $5;
P_DLV_TBL					ALIAS FOR $6;
P_ERR_TBL					ALIAS FOR $7;
V_ERR_ID					SMALLINT;
V_SQL_1 					VARCHAR(32000);
L_ERR_CD 					CHAR(5);
L_ERR_MSG 					VARCHAR(32000);

BEGIN

V_ERR_ID = 9;

V_SQL_1 := 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || ' (
	REQUEST_ID,
	ERROR_MESSAGE_ID,
	ERROR_ROW) 	
SELECT 
	REQUEST_ID,
	' || V_ERR_ID || ' AS ERROR_MESSAGE_ID,
	LINE_NUMBER AS  ERROR_ROW
FROM ' || P_STG_SCHEMA || '.' || P_STG_TABLE || ' 
WHERE REQUEST_ID = ' || P_REQUEST_ID || ' 
	  AND UNDERWRITING_YEAR IS NULL 
GROUP BY LINE_NUMBER,
		 REQUEST_ID';

RAISE NOTICE 'Executing 1st SQL';

EXECUTE IMMEDIATE V_SQL_1;

EXCEPTION
WHEN OTHERS THEN L_ERR_CD := SUBSTR(SQLERRM,
8,
5);


L_ERR_MSG := SQLERRM;


RAISE EXCEPTION '% Error while executing SQL statement',
L_ERR_MSG;


RETURN L_ERR_CD;

END;


END_PROC;