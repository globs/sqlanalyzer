SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_WRK_US_RETRO_FUNCTIONAL_CTRL;

CREATE OR REPLACE PROCEDURE SP_LOAD_WRK_US_RETRO_FUNCTIONAL_CTRL(
	BIGINT,
	CHARACTER VARYING(50),
	CHARACTER VARYING(50),
	CHARACTER VARYING(50),
	CHARACTER VARYING(50)
)
RETURNS INTEGER 
LANGUAGE NZPLSQL
AS BEGIN_PROC 

DECLARE
	P_REQUEST_ID   ALIAS FOR $1;
    P_SRC_SCHEMA   ALIAS FOR $2;
    P_SRC_TABLE	   ALIAS FOR $3;
    P_TRG_SCHEMA   ALIAS FOR $4;
    P_TRG_TABLE	   ALIAS FOR $5;
	V_INS_SQL      VARCHAR(ANY);
	V_DELETE_QUERY VARCHAR(ANY);
	L_ERR_CD       CHAR(5);
	L_ERR_MSG      VARCHAR(32000);

BEGIN
	V_DELETE_QUERY := 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE REQUEST_ID =' || P_REQUEST_ID || ' ';
	
	V_INS_SQL := 'INSERT INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' (
		REQUEST_ID,
		ERROR_ROW,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		ERROR_MESSAGE_ID,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	) 
	WITH CTE_CASE AS (
		SELECT
			REQUEST_ID,
			CONTROL12,
			CONTROL3,
			CONTROL4,
			CONTROL5,
			CONTROL6,
			LINE_NUMBER,OMEGA_TREATY_NUMBER,
			OMEGA_SECTION_NUMBER,
			RETRO_OMEGA_TREATY_NUMBER,
			RETRO_OMEGA_SECTION_NUMBER,
			LE_HOP,
			A_R
		FROM 
			(
				SELECT
					OMEGA_TREATY_NUMBER,
					OMEGA_SECTION_NUMBER,
					RETRO_OMEGA_TREATY_NUMBER,
					RETRO_OMEGA_SECTION_NUMBER,
					LE_HOP,
					A_R,
					RETCTR_NF_LVL1,
					REQUEST_ID,
					LINE_NUMBER,
					CTR_NF_LVL1,
					SEC_NF_LVL1,
					CASE
						WHEN RETRO_OMEGA_TREATY_NUMBER IS NOT NULL 
							AND RETRO_OMEGA_SECTION_NUMBER IS NULL THEN 27
						WHEN RETRO_OMEGA_SECTION_NUMBER IS NOT NULL 
							AND RETRO_OMEGA_TREATY_NUMBER IS NULL THEN 28
						ELSE 0
					END CONTROL12,
					CASE
						WHEN RETRO_OMEGA_TREATY_NUMBER IS NULL 
							AND RETRO_OMEGA_SECTION_NUMBER IS NULL 
							AND LE_HOP != ''A0'' THEN 29
						ELSE 0
					END CONTROL3,
					CASE
						WHEN RETRO_OMEGA_TREATY_NUMBER IS NOT NULL 
							AND RETRO_OMEGA_SECTION_NUMBER IS NOT NULL
							AND LE_HOP NOT IN (''A1'',''A2'',''A3'',''A4'',''R0'',''R1'',''R2'',''R3'',''R4'') THEN 30
						ELSE 0
					END CONTROL4,
					CASE
						WHEN RETCTR_NF_LVL1 IS NULL 
							AND LE_HOP NOT IN (''A0'',''R0'') THEN 31 
						ELSE 0
					END CONTROL5,
					CASE
					    WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A1'',''R1'') 
							AND LE_HOP<>''R0''
							AND A_R = ''R''
							AND (RETCTR_NF_LVL1 IS NULL
								OR RETCTR_NF_LVL1 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A1'',''R1'') 
							AND LE_HOP<>''R0''
							AND A_R = ''IA''
							AND (CTR_NF_LVL1 IS NULL
								OR SEC_NF_LVL1 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A2'',''R2'') 
							AND LE_HOP<>''R0''
							AND A_R = ''R''
							AND (RETCTR_NF_LVL2 IS NULL
								OR RETSEC_NF_LVL2 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A2'',''R2'') 
							AND LE_HOP<>''R0''
							AND A_R = ''IA''
							AND (CTR_NF_LVL2 IS NULL
								OR SEC_NF_LVL2 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A3'',''R3'') 
							AND LE_HOP<>''R0''
							AND A_R = ''R''
							AND (RETCTR_NF_LVL3 IS NULL
								OR RETSEC_NF_LVL3 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A3'',''R3'') AND LE_HOP<>''R0''
							AND A_R = ''IA''
							AND (CTR_NF_LVL3 IS NULL
								OR SEC_NF_LVL3 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A4'',''R4'') 
							AND LE_HOP<>''R0''
							AND A_R = ''R''
							AND (RETCTR_NF_LVL4 IS NULL
								OR RETSEC_NF_LVL4 IS NULL) THEN 32
						WHEN RETCTR_NF_LVL1 IS NOT NULL
							AND LE_HOP IN (''A4'',''R4'') 
							AND LE_HOP<>''R0''
							AND A_R = ''IA''
							AND (CTR_NF_LVL4 IS NULL
								OR SEC_NF_LVL4 IS NULL) THEN 32
						ELSE 0
					END CONTROL6
				FROM
					' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || '
				LEFT OUTER JOIN 
					(
						SELECT
							*
						FROM
							(
								SELECT
									RETCTR_NF_LVL1,
									RETSEC_NF_LVL1,
									RTY_NF_LVL1,
									CTR_NF_LVL1,
									SEC_NF_LVL1,
									CTR_NF_LVL2,
									SEC_NF_LVL2,
									CTR_NF_LVL3,
									SEC_NF_LVL3,
									CTR_NF_LVL4,
									SEC_NF_LVL4,
									RETCTR_NF_LVL2,
									RETSEC_NF_LVL2,
									RETCTR_NF_LVL3,
									RETSEC_NF_LVL3,
									RETCTR_NF_LVL4,
									RETSEC_NF_LVL4,
									ROW_NUMBER() OVER (PARTITION BY RETCTR_NF_LVL1,RETSEC_NF_LVL1
										ORDER BY RTY_NF_LVL1 DESC) RNK
								FROM
									BI_<env>.TWRETRO_LINKS_FINAL
							)x
						WHERE
							x.RNK = 1
					) 
					ON RETRO_OMEGA_TREATY_NUMBER = RETCTR_NF_LVL1
					AND RETRO_OMEGA_SECTION_NUMBER = RETSEC_NF_LVL1
			)
	)
	SELECT
		REQUEST_ID,
		LINE_NUMBER,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		CONTROL12,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	FROM
		CTE_CASE
	WHERE
		CONTROL12 != 0
	UNION ALL
	SELECT
		REQUEST_ID,
		LINE_NUMBER,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		CONTROL3,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	FROM
		CTE_CASE
	WHERE
		CONTROL3 != 0
	UNION ALL
	SELECT
		REQUEST_ID,
		LINE_NUMBER,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		CONTROL4,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	FROM
		CTE_CASE
	WHERE
		CONTROL4 != 0
	UNION ALL
	SELECT
		REQUEST_ID,
		LINE_NUMBER,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		CONTROL5,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	FROM
		CTE_CASE
	WHERE
		CONTROL5 != 0
	UNION ALL
	SELECT
		REQUEST_ID,
		LINE_NUMBER,
		OMEGA_TREATY_NUMBER,
		OMEGA_SECTION_NUMBER,
		CONTROL6,
		RETRO_OMEGA_TREATY_NUMBER,
		RETRO_OMEGA_SECTION_NUMBER,
		LE_HOP,
		A_R
	FROM
		CTE_CASE
	WHERE
		CONTROL6 != 0';
	
	EXECUTE IMMEDIATE V_DELETE_QUERY;
	
	EXECUTE IMMEDIATE V_INS_SQL;
	
	EXECUTE IMMEDIATE 'INSERT INTO DELIVERY_<env>.UPLOAD_ERROR_LOG ( 
		REQUEST_ID,
		ERROR_MESSAGE_ID,
		ERROR_ROW)
	SELECT
		REQUEST_ID,
		ERROR_MESSAGE_ID,
		ERROR_ROW
	FROM
		' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || '
	WHERE REQUEST_ID = ' || P_REQUEST_ID ||'
';
		
EXCEPTION 
	WHEN OTHERS THEN
   		L_ERR_CD := SUBSTR(SQLERRM, 8, 5);
		L_ERR_MSG := SQLERRM;
		RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG;
		RETURN L_ERR_CD;
		
END

END_PROC;