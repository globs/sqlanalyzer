SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_LOAD_YIELD_CURVE_LIFE;

CREATE OR REPLACE PROCEDURE SP_LOAD_YIELD_CURVE_LIFE(
	BIGINT,
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	CHARACTER VARYING(64),
	SMALLINT,
	SMALLINT
) RETURNS INTEGER
language nzplsql
AS
BEGIN_PROC
 
DECLARE    
    P_REQUEST_ID                ALIAS FOR $1;
    P_SRC_SCHEMA                ALIAS FOR $2;
    P_SRC_TABLE                 ALIAS FOR $3;
    P_TRG_SCHEMA                ALIAS FOR $4; 
    P_TRG_TABLE                 ALIAS FOR $5;    
    P_FILEYEAR    	            ALIAS FOR $6;
    P_FILEQUARTER            	ALIAS FOR $7;       
    L_ERR_CD                    CHAR(5);          
    L_ERR_MSG                   VARCHAR(32000);       
    V_REC                       RECORD;
    V_CLEAN_WRK_ECONOMIC_RATE   VARCHAR(64000);
    V_LOAD_WRK_ECONOMIC_RATE    VARCHAR(64000);
    
BEGIN
	SET ISOLATION TO UR;
	 
	V_CLEAN_WRK_ECONOMIC_RATE := 'DELETE FROM ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' WHERE REQUEST_ID =' || P_REQUEST_ID || ' ';
	
	V_LOAD_WRK_ECONOMIC_RATE := 'INSERT INTO ' || P_TRG_SCHEMA || '.' || P_TRG_TABLE || ' (
	    REPORTING_BASIS_ID,  
	    CLOSING_DATE,
	    PARAMETER_TYPE_ID,
	    SEGMENT_CODE,
	    LOB_CODE,
	    CURRENCY_CODE,
	    MATURITY_TYPE_ID,
	    MATURITY,
		USAGE_TYPE_ID,
	    RATE,
		DISCOUNT_FACTOR,
	    REQUEST_ID
	)
	SELECT
		REPORTING_BASIS_ID,
		CLOSING_DATE,
		PARAMETER_TYPE_ID,
		SEGMENT_CODE,
		LOB_CODE,
		CURRENCY_CODE,
		MATURITY_TYPE_ID,
		MATURITY,
		USAGE_TYPE_ID,
		RATE,
		CASE 
			WHEN POWER((1 + RATE), (DECFLOAT(MATURITY) / 12)) = 0 THEN 0 
			ELSE  (1 / (POWER((1 + RATE), (DECFLOAT(MATURITY) / 12)))) 
		END AS DISCOUNT_FACTOR,
		REQUEST_ID
	FROM
		(
			SELECT
				RB.ID AS REPORTING_BASIS_ID,
				DATE(ADD_MONTHS(TO_DATE(''01/01/''||'|| P_FILEYEAR||',''DD/MM/YYYY''), '|| P_FILEQUARTER||' * 3) -1) AS CLOSING_DATE ,
				PAR_TYPE.ID AS PARAMETER_TYPE_ID, 
				CASE WHEN LENGTH (SR.SEGMENT_CODE) =0 THEN NULL ELSE SR.SEGMENT_CODE END AS SEGMENT_CODE,
				''30'' AS LOB_CODE,
			    CAST(SR.CURRENCY_CODE AS CHAR(3)) AS CURRENCY_CODE,
			    MT.ID AS MATURITY_TYPE_ID,
			    CAST(SR.MATURITY AS INTEGER) AS MATURITY,
				(SELECT ID FROM BI_<env>.USAGE_TYPE WHERE CODE = ''PROD'') AS USAGE_TYPE_ID,
			    CAST(SR.RATE AS DECFLOAT) AS RATE,   
			    '|| P_REQUEST_ID ||' AS REQUEST_ID
			FROM 
				' || P_SRC_SCHEMA || '.' || P_SRC_TABLE || ' SR
				INNER JOIN 
					BI_<env>.PARAMETER_TYPE PAR_TYPE 
					ON UPPER(SR.CURVE_TYPE) = PAR_TYPE.CODE
				INNER JOIN 
					BI_<env>.REPORTING_BASIS RB 
					ON RB.CODE = UPPER(SR.NORM_CODE)
				INNER JOIN 
					BI_<env>.MATURITY_TYPE MT 
					ON MT.CODE = (
						CASE 
							WHEN UPPER(SR.MATURITY_TYPE)=''Y'' THEN ''Years'' 
							WHEN UPPER(SR.MATURITY_TYPE)=''Q'' THEN ''Quarters'' 
							WHEN UPPER(SR.MATURITY_TYPE) = ''M'' THEN ''Months'' 
							ELSE ''None'' 
						END
					)
		)';
	
	RAISE NOTICE 'Executing V_CLEAN_WRK_ECONOMIC_RATE: ''%''',V_CLEAN_WRK_ECONOMIC_RATE; 
	EXECUTE IMMEDIATE V_CLEAN_WRK_ECONOMIC_RATE; 
	RAISE NOTICE 'Executing V_LOAD_WRK_ECONOMIC_RATE: ''%''',V_LOAD_WRK_ECONOMIC_RATE; 
	EXECUTE IMMEDIATE V_LOAD_WRK_ECONOMIC_RATE; 
	EXECUTE IMMEDIATE 'COMMIT';

EXCEPTION 
	WHEN OTHERS THEN
		L_ERR_CD := SUBSTR(SQLERRM,8,5); 
		L_ERR_MSG := SQLERRM;
		RAISE EXCEPTION '% Error while executing SQL statement',L_ERR_MSG;
		RETURN L_ERR_CD;

END;

END_PROC;