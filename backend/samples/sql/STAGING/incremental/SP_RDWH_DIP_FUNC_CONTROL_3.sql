SET SCHEMA STAGING_<env>;

DROP PROCEDURE SP_DIP_FUNC_CONTROL_3;

CREATE OR REPLACE PROCEDURE SP_DIP_FUNC_CONTROL_3 (
    BIGINT,
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50),
    CHARACTER VARYING(50)
) 
RETURNS INTEGER
LANGUAGE NZPLSQL 
AS BEGIN_PROC 

DECLARE 
    P_REQ_ID            ALIAS FOR $1;
    P_CLOSING_DATE      ALIAS FOR $2;
    P_PositionType      ALIAS FOR $3;
    P_STG_SCHEMA        ALIAS FOR $4;
    P_REF_SCHEMA        ALIAS FOR $5;
    P_DLV_SCHEMA        ALIAS FOR $6;
    P_WRK_TBL           ALIAS FOR $7;
    P_DLV_TBL           ALIAS FOR $8;
    P_SCENARIO_TYPE     ALIAS FOR $9;
    P_LEVEL_OF_ANALYSIS ALIAS FOR $10;
    P_POSITION          ALIAS FOR $11;
    P_POSITION_TYPE     ALIAS FOR $12;
    P_TCURSII           ALIAS FOR $13;
    P_REPORTING_BASIS   ALIAS FOR $14;
    P_BUSINESS_MATURITY ALIAS FOR $15;
    P_SPLIT_TYPE        ALIAS FOR $16;
    V_REQ_ID            VARCHAR(20);
    V_CLOSING_DATE      VARCHAR(50);
    V_PositionType      VARCHAR(50);
    V_WRK_TBL           VARCHAR(1000);
    L_ERR_CD            CHAR(5);
    L_ERR_MSG           VARCHAR(32000);


BEGIN     

SET ISOLATION TO UR;

V_REQ_ID := UPPER(TRIM(P_REQ_ID));
V_CLOSING_DATE := UPPER(TRIM(P_CLOSING_DATE));
V_PositionType := UPPER(TRIM(P_PositionType));
V_WRK_TBL := 'CTRL3_WRK_' || P_REQ_ID;

EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_WRK_TBL || ' IF EXISTS';

EXECUTE IMMEDIATE 'DECLARE GLOBAL TEMPORARY TABLE SESSION.' || V_WRK_TBL || ' (
    SENSITIVITY_TYPE    VARCHAR(100), 
    AOC_STEP            VARCHAR(100),
    P_POSITION          VARCHAR(100), 
    CURRENCY            CHAR(3),
    BASIS               VARCHAR(100),
    BUSINESS_MATURITY   VARCHAR(100),
    SPLIT               VARCHAR(100),
    LINE_NUMBER         BIGINT,
    REQUEST_ID          BIGINT
) ON COMMIT PRESERVE ROWS NOT LOGGED WITH REPLACE DISTRIBUTE ON RANDOM';

EXECUTE IMMEDIATE 'INSERT INTO SESSION.' || V_WRK_TBL || '
SELECT
    UPPER(SENSITIVITY_TYPE)             AS SENSITIVITY_TYPE,
    UPPER(AOC_STEP)                     AS AOC_STEP,
    UPPER(REPLACE(POSITION, ''_EUR'', ''''))   AS P_POSITION,
    UPPER(CURRENCY_CODE)                AS CURRENCY,
    UPPER(BASIS)                        AS BASIS,
    UPPER(BUSINESS_MATURITY)            AS BUSINESS_MATURITY,
    UPPER(SPLIT),
    LINE_NUMBER,
    REQUEST_ID
FROM ' || P_STG_SCHEMA || '.' || P_WRK_TBL || ' P
WHERE REQUEST_ID = ' || V_REQ_ID || '';

EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    41 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_LEVEL_OF_ANALYSIS || ' LA ON (WT.AOC_STEP = UPPER(LA.NAME)  AND DATE(LA.VALID_TO) = DATE(''' || V_CLOSING_DATE || '''))
WHERE LA.NAME IS NULL
';

EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    42 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_SCENARIO_TYPE || ' ST  ON (WT.SENSITIVITY_TYPE = UPPER(ST.NAME)   AND DATE(ST.VALID_TO) = DATE(''' || V_CLOSING_DATE || '''))
WHERE ST.NAME IS NULL    
';
    
EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    43 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ( SELECT
                UPPER(POS.NAME) AS NAME
            FROM ' || P_REF_SCHEMA || '.' || P_POSITION || ' POS 
            INNER JOIN ' || P_REF_SCHEMA || '.' || P_POSITION_TYPE || ' PTY ON (POS.POSITION_TYPE_ID = PTY.ID) 
            WHERE UPPER(PTY.CODE) = ''' || V_PositionType || ''' AND  DATE(POS.VALID_TO) = DATE(''' || V_CLOSING_DATE || ''')
            ) PS ON (WT.P_POSITION = PS.NAME) 
WHERE PS.NAME IS NULL
';
    
EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    44 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_TCURSII || ' CUR ON (WT.CURRENCY = UPPER(CUR.CUR_CF))
WHERE CUR.CUR_CF IS NULL
';

EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    45 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_BUSINESS_MATURITY || ' BM ON (WT.BUSINESS_MATURITY = UPPER(BM.NAME))
WHERE BM.NAME IS NULL
';

EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    46 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_REPORTING_BASIS || ' RB ON (WT.BASIS = UPPER(RB.NAME))
WHERE RB.NAME IS NULL
';
    
EXECUTE IMMEDIATE 'INSERT INTO ' || P_DLV_SCHEMA || '.' || P_DLV_TBL || '
(
    REQUEST_ID, 
    ERROR_MESSAGE_ID, 
    ERROR_ROW
)
SELECT DISTINCT
    REQUEST_ID,
    47 AS ERROR_MESSAGE_ID,
    LINE_NUMBER
FROM SESSION.' || V_WRK_TBL|| ' WT
LEFT OUTER JOIN ' || P_REF_SCHEMA || '.' || P_SPLIT_TYPE || '  SP  ON (CASE WHEN (WT.SPLIT IS NULL OR trim(WT.SPLIT)='''') THEN NULL ELSE UPPER(TRIM(WT.SPLIT)) END) = UPPER(SP.NAME)
WHERE (CASE WHEN (CASE WHEN (WT.SPLIT IS NULL OR trim(WT.SPLIT)='''') THEN NULL ELSE UPPER(TRIM(WT.SPLIT)) END) IS NOT NULL AND UPPER(SP.NAME) IS NULL THEN UPPER(SP.NAME) IS NULL END)
';
    
EXECUTE IMMEDIATE 'DROP TABLE SESSION.' || V_WRK_TBL || ' IF EXISTS';

EXCEPTION
    WHEN OTHERS THEN 
        L_ERR_CD := SUBSTR(SQLERRM, 8, 5);
        L_ERR_MSG := SQLERRM;
        RAISE EXCEPTION '% Error while executing SQL statement', L_ERR_MSG;
        RETURN L_ERR_CD;

END 

END_PROC;